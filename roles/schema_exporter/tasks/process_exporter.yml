---
# Enhanced Schema Exporter with Comprehensive Override Support
# This allows overriding ANY part of the API request body

- name: Set exporter configuration
  set_fact:
    schema_exporter_config:
      name: "{{ exporter.name }}"
      context_type: "{{ exporter.context_type | default('AUTO') }}"
      context: "{{ exporter.context | default('') }}"
      subjects: "{{ exporter.subjects | default([]) }}"
      kek_rename_format: "{{ exporter.kek_rename_format | default('') }}"
      subject_rename_format: "{{ exporter.subject_rename_format | default('') }}"
      config: "{{ schema_exporter_final_config }}"
  vars:
    base_config: "{{ exporter.config | default({}) }}"
    config_overrides: "{{ exporter.config_overrides | default({}) }}"
    
    # Transform inventory config to API format
    api_config:
      schema.registry.url: "{{ base_config.schema_registry_endpoint }}"
      basic.auth.credentials.source: "{{ 'USER_INFO' if base_config.authentication_type == 'basic' else omit }}"
      basic.auth.user.info: "{{ base_config.basic_username + ':' + base_config.basic_password if base_config.authentication_type == 'basic' else omit }}"
      
    # Enhanced: Apply config overrides to config section
    schema_exporter_final_config: "{{ api_config | combine(config_overrides) }}"

# Shared variables for common request body fields and URI auth
- name: Set exporter variables
  set_fact:
    # Certificate chain for mTLS authentication
    certs_chain: "{{ssl_file_dir_final}}/schema_registry.chain"
    
    # Build base request body from configuration
    base_request_body:
      name: "{{ schema_exporter_config.name }}"
      subjects: "{{ schema_exporter_config.subjects }}"
      config: "{{ schema_exporter_config.config }}"
      
    # Add optional fields if they exist
    optional_fields:
      contextType: "{{ schema_exporter_config.context_type if schema_exporter_config.context_type != 'AUTO' else omit }}"
      context: "{{ schema_exporter_config.context if schema_exporter_config.context_type not in ['NONE', 'AUTO'] and schema_exporter_config.context != '' else omit }}"
      kekRenameFormat: "{{ schema_exporter_config.kek_rename_format if schema_exporter_config.kek_rename_format != '' else omit }}"
      subjectRenameFormat: "{{ schema_exporter_config.subject_rename_format if schema_exporter_config.subject_rename_format != '' else omit }}"

- name: Check if Schema Exporter exists
  include_tasks: ../common/tasks/sr_api_call.yml
  vars:
    sr_api_operation_name: "Check if Schema Exporter exists"
    sr_api_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}"
    sr_api_method: GET
    sr_api_expected_status: [200, 404]
    sr_api_result_var: exporter_check
    sr_api_ignore_errors: true
    sr_api_username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    sr_api_password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

# Pause exporter before update (only needed for existing exporters)
- name: Pause Schema Exporter
  include_tasks: ../common/tasks/sr_api_call.yml
  vars:
    sr_api_operation_name: "Pause Schema Exporter"
    sr_api_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/pause"
    sr_api_method: PUT
    sr_api_expected_status: [200, 202]
    sr_api_result_var: exporter_pause
    sr_api_when_condition: "{{ exporter_check.status == 200 }}"
    sr_api_until_condition: "{{ RESULT_VAR.status in [200] }}"
    sr_api_retries: "{{ schema_registry_retries }}"
    sr_api_delay: 2
    sr_api_username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    sr_api_password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

# Enhanced: Build comprehensive request body with full override support
- name: Set exporter operation variables
  set_fact:
    # Dynamic method and URL based on whether exporter exists
    exporter_method: "{{ 'POST' if exporter_check.status == 404 else 'PUT' }}"
    exporter_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters{{ '' if exporter_check.status == 404 else '/' + schema_exporter_config.name }}"
    # Dynamic base body (create includes name, update doesn't)
    initial_request_body: "{{ {'name': schema_exporter_config.name} if exporter_check.status == 404 else {} }}"
  when: exporter_check.status in [200, 404]

- name: Build standard exporter request body
  set_fact:
    # Build standard request body from base components
    standard_request_body: "{{ initial_request_body | combine(base_request_body) | combine(optional_fields) }}"
  when: exporter_check.status in [200, 404]

- name: Apply comprehensive overrides to exporter request body
  set_fact:
    # Apply comprehensive overrides (can override ANY field)
    exporter_request_body: "{{ standard_request_body | combine(exporter.body_overrides | default({}), recursive=True) }}"
  when: exporter_check.status in [200, 404]

# Create or Update Schema Exporter (POST for new, PUT for existing)
- name: Create or Update Schema Exporter
  include_tasks: ../common/tasks/sr_api_call.yml
  vars:
    sr_api_operation_name: "Create or Update Schema Exporter"
    sr_api_url: "{{ exporter_url }}"
    sr_api_method: "{{ exporter_method }}"
    sr_api_expected_status: 200
    sr_api_body_format: json
    sr_api_body: "{{ exporter_request_body }}"
    sr_api_result_var: exporter_operation
    sr_api_when_condition: "{{ exporter_check.status in [200, 404] }}"
    sr_api_username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    sr_api_password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

# Resume exporter after update (only needed for existing exporters)
- name: Resume Schema Exporter
  include_tasks: ../common/tasks/sr_api_call.yml
  vars:
    sr_api_operation_name: "Resume Schema Exporter"
    sr_api_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/resume"
    sr_api_method: PUT
    sr_api_expected_status: [200, 202]
    sr_api_result_var: exporter_resume
    sr_api_when_condition: "{{ exporter_check.status == 200 }}"
    sr_api_username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    sr_api_password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

- name: Register Schema Exporter Status
  include_tasks: ../common/tasks/sr_api_call.yml
  vars:
    sr_api_operation_name: "Register Schema Exporter Status"
    sr_api_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/status"
    sr_api_method: GET
    sr_api_expected_status: 200
    sr_api_result_var: exporter_status_response
    sr_api_username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    sr_api_password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

- name: Retrieve Schema Exporter State
  set_fact:
    schema_exporter_state: "{{ exporter_status_response.json.state }}"
    schema_exporter_configured: true