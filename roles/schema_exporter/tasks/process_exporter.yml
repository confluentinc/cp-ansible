---
- name: Set exporter configuration
  set_fact:
    schema_exporter_config:
      name: "{{ exporter.name }}"
      contextType: "{{ exporter.contextType | default('AUTO') }}"
      context: "{{ exporter.remote_context | default('') }}"
      subjects: "{{ exporter.subjects | default([]) }}"
      config: "{{ schema_exporter_final_config }}"
  vars:
    base_config: "{{ exporter.config | default({}) }}"
    override_config: "{{ exporter.config_overrides | default({}) }}"
    schema_exporter_final_config: "{{ base_config | combine(override_config) }}"

- name: Check if Schema Exporter exists
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}"
    method: GET
    status_code: [200, 404]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: exporter_check
  ignore_errors: true

- name: Create Schema Exporter via API
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters"
    method: POST
    body_format: json
    body: "{{ exporter_request_body }}"
    status_code: [200]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  vars:
    base_request_body:
      name: "{{ schema_exporter_config.name }}"
      subjects: "{{ schema_exporter_config.subjects }}"
      config: "{{ schema_exporter_config.config }}"
    context_type_field: "{{ {'contextType': schema_exporter_config.contextType} if schema_exporter_config.contextType != 'AUTO' else {} }}"
    context_field: "{{ {'context': schema_exporter_config.context} if schema_exporter_config.contextType not in ['NONE', 'AUTO'] else {} }}"
    exporter_request_body: "{{ base_request_body | combine(context_type_field) | combine(context_field) }}"
  register: exporter_creation
  when: exporter_check.status == 404

- name: Pause Schema Exporter before update
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/pause"
    method: PUT
    status_code: [200, 202]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: exporter_pause
  when: exporter_check.status == 200

- name: Wait for Schema Exporter to be paused
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/status"
    method: GET
    status_code: 200
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: pause_status
  until: pause_status.json.state == 'PAUSED'
  retries: 10
  delay: 2
  when: exporter_check.status == 200

- name: Update Schema Exporter via API
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/config"
    method: PUT
    body_format: json
    body: "{{ schema_exporter_config.config }}"
    status_code: 200
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: exporter_config_update
  when: exporter_check.status == 200

- name: Update Schema Exporter Config via API
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}"
    method: PUT
    body_format: json
    body: "{{ exporter_update_body }}"
    status_code: 200
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  vars:
    base_update_body:
      name: "{{ schema_exporter_config.name }}"
      subjects: "{{ schema_exporter_config.subjects | default([]) }}"
      config: "{{ schema_exporter_config.config }}"
    context_type_field: "{{ {'contextType': schema_exporter_config.contextType} if schema_exporter_config.contextType is defined and schema_exporter_config.contextType != 'AUTO' else {} }}"
    context_field: "{{ {'context': schema_exporter_config.context} if schema_exporter_config.context is defined and schema_exporter_config.contextType not in ['NONE', 'AUTO'] else {} }}"
    exporter_update_body: "{{ base_update_body | combine(context_type_field) | combine(context_field) }}"
  register: exporter_update
  when: exporter_check.status == 200

- name: Resume Schema Exporter after update
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/resume"
    method: PUT
    status_code: [200, 202]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: exporter_resume
  when: exporter_check.status == 200 and exporter_update is defined

- name: Register Schema Exporter Status
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ schema_exporter_config.name }}/status"
    method: GET
    status_code: 200
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: exporter_status

- name: Set Schema Exporter State
  set_fact:
    schema_exporter_state: "{{ exporter_status.json.state | default('Unknown') }}"
    schema_exporter_configured: true

- name: Log Schema Exporter Creation Result
  debug:
    msg: |
      Schema Exporter '{{ schema_exporter_config.name }}' configured successfully.
      Status: {{ schema_exporter_state }}
      {% if schema_exporter_state == 'PAUSED' and exporter_status.json.trace is defined %}
      Error: {{ exporter_status.json.trace | regex_replace('\n', ' ') }}
      {% endif %}
      {% if exporter_creation is defined and exporter_creation.changed %}
      Action: Created new exporter
      {% elif exporter_update is defined and exporter_update.changed %}
      Action: Updated existing exporter
      {% else %}
      Action: No changes needed
      {% endif %}
