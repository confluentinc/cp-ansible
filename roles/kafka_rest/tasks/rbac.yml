---
- name: RBAC Setup Tasks
  import_role:
    name: common
    tasks_from: rbac_setup.yml
  vars:
    user: "{{kafka_rest_user}}"
    group: "{{kafka_rest_group}}"
  delegate_to: "{{ groups['kafka_broker'][0] }}"  # delegating this task to broker as in case of cert based token retrival only broker can get a super user token using its certs

- set_fact:
    send_client_cert: "{{ ssl_client_authentication in ['required', 'requested'] }}"

- name: Grant Rest Proxy user ResourceOwner on Confluent License Topic
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{rest_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_rest_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_rest_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster": "{{kafka_cluster_id}}"
          }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name": "{{kafka_rest_final_properties['confluent.license.topic']}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: kr_mds_result
  until: kr_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  no_log: "{{mask_secrets|bool}}"
  when: not ansible_check_mode

### Rest Proxy user is now being set as resource owner on the monitoring interceptor topic to prevent race conditions when RBAC is enabled.

- name: Grant Rest Proxy user ResouceOwnder on the Monitoring Interceptor Topic
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{rest_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_rest_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_rest_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}"
          }
        },
        "resourcePatterns": [{
          "resourceType": "Topic",
          "name": "{{kafka_rest_final_properties['confluent.monitoring.interceptor.topic']}}",
          "patternType":"LITERAL"
        }]
      }
    status_code: 204
  register: kr_mds_result
  until: kr_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  no_log: "{{mask_secrets|bool}}"
  when: kafka_rest_monitoring_interceptors_enabled|bool and not ansible_check_mode
