---
- name: Export CA Cert from Truststore
  shell: |
    keytool -exportcert -rfc \
      -alias "{{ssl_truststore_ca_cert_alias}}" \
      -storepass {{truststore_storepass}}  \
      -file {{ca_cert_path}} \
      -keystore {{truststore_path}}
  register: export_ca_result
  changed_when: export_ca_result.rc == 0
  no_log: "{{mask_secrets|bool}}"

- name: Get Keystore Type
  shell: |
    set -o pipefail
    keytool -list -keystore {{keystore_path}} \
      -storepass {{keystore_storepass}} -v \
      | grep "Keystore type" \
      | cut -d ":" -f2 \
      | cut -c2-
  register: keytool_type
  changed_when: false
  no_log: "{{mask_secrets|bool}}"

- name: Export Certificate from Keystore - PKCS12
  shell: |
    openssl pkcs12 -in {{keystore_path}} \
      -nokeys -out {{cert_path}} \
      -passin pass:{{keystore_storepass}}
  register: export_cert_pkcs12_result
  changed_when: export_cert_pkcs12_result.rc == 0
  when: keytool_type.stdout|upper == 'PKCS12'
  no_log: "{{mask_secrets|bool}}"

- name: Export Key from Keystore - PKCS12
  shell: |
    openssl pkcs12 -in {{keystore_path}} \
      -nodes -nocerts -out {{key_path}} \
      -passin pass:{{keystore_storepass}}
  register: export_key_pkcs12_result
  changed_when: export_key_pkcs12_result.rc == 0
  when: keytool_type.stdout|upper == 'PKCS12'
  no_log: "{{mask_secrets|bool}}"

- set_fact:
    extra_args: ""
  when:
    - not fips_enabled|bool
    - keytool_type.stdout|lower == 'jks'

- set_fact:
    extra_args: "-providerpath {{fips_jar_path}} -providerclass {{fips_provider_class}}"
  when:
    - fips_enabled|bool
    - keytool_type.stdout|lower == 'jks'

- name: Convert Keystore to Pem Format - JKS
  shell: |
    keytool -noprompt -importkeystore \
      -srckeystore {{keystore_path}} \
      -srcstorepass {{keystore_storepass}}{% if ssl_keystore_alias|length > 0 %} -srcalias {{ssl_keystore_alias}} {% endif %} \
      -destkeystore {{ ssl_file_dir_final }}/generation/{{service_name}}.p12 \
      -deststoretype PKCS12 \
      -deststorepass {{keystore_storepass}} \
      -destkeypass {{keystore_storepass}} {{extra_args}}
  register: convert_keystore_result
  changed_when: convert_keystore_result.rc == 0
  failed_when: false
  when: keytool_type.stdout|lower == 'jks'
  no_log: "{{mask_secrets|bool}}"

- name: Export Certificate from Keystore - JKS
  shell: |
    openssl pkcs12 -in {{ ssl_file_dir_final }}/generation/{{service_name}}.p12 \
      -nokeys -out {{cert_path}} \
      -passin pass:{{keystore_storepass}}
  register: export_cert_jks_result
  changed_when: export_cert_jks_result.rc == 0
  when: keytool_type.stdout|lower == 'jks'
  no_log: "{{mask_secrets|bool}}"

- name: Export Key from Keystore - JKS
  shell: |
    openssl pkcs12 -in {{ ssl_file_dir_final }}/generation/{{service_name}}.p12 \
      -nodes -nocerts -out {{key_path}} \
      -passin pass:{{keystore_storepass}}
  register: export_key_jks_result
  changed_when: export_key_jks_result.rc == 0
  when: keytool_type.stdout|lower == 'jks'
  no_log: "{{mask_secrets|bool}}"

- name: Set certs already exported
  set_fact:
    certs_already_exported: true
