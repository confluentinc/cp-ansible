---
- name: Copy CA Cert to Host
  copy:
    src: "{{ssl_self_signed_ca_cert_filepath}}"
    dest: "{{ca_cert_path}}"
  diff: "{{ not mask_sensitive_diff|bool }}"

- name: Copy CA Key to Host
  copy:
    src: "{{ssl_self_signed_ca_key_filepath}}"
    dest: "{{ca_key_path}}"
  diff: "{{ not mask_sensitive_diff|bool }}"

- name: Create Host Key
  shell: |
    openssl genrsa -out {{key_path}} {{ssl_key_size}}
  diff: "{{ not mask_sensitive_diff|bool }}"

- name: Create Certificate Signing Request
  shell: |
    openssl req -new -key {{key_path}} \
      -out {{ ssl_file_dir_final }}/generation/client.csr \
      -subj '/CN={{service_name}}/OU=TEST/O=CONFLUENT/L=PaloAlto/ST=Ca/C=US'
  diff: "{{ not mask_sensitive_diff|bool }}"

- name: Create Openssl Config for SAN
  template:
    src: openssl-san.cnf.j2
    dest: "{{ ssl_file_dir_final }}/generation/openssl-san.cnf"
  diff: "{{ not mask_sensitive_diff|bool }}"

- name: Sign CSR with the Certificate Authority
  shell: |
    openssl x509 -req -CA {{ca_cert_path}} \
      -CAkey {{ca_key_path}} \
      -in {{ ssl_file_dir_final }}/generation/client.csr \
      -out {{cert_path}} \
      -days {{keystore_expiration_days}} -CAcreateserial \
      -passin pass:{{ssl_self_signed_ca_password}} \
      -extfile {{ ssl_file_dir_final }}/generation/openssl-san.cnf \
      -extensions v3_req
  no_log: "{{mask_secrets|bool}}"

- name: Split CA Cert Bundle into Individual Certificates
  shell: |
    awk 'BEGIN {n=0} /BEGIN CERTIFICATE/{n++} {print > "{{ temp_dir.path }}/ca." n ".pem"}' {{ ca_cert_path }}
  changed_when: false

- name: Split Signed Cert Bundle - Extract Last Certificate
  shell: |
    awk '
      /BEGIN CERTIFICATE/,/END CERTIFICATE/ {
        cert = cert $0 "\n"
      }
      /END CERTIFICATE/ {
        last_cert = cert
        cert = ""
      }
      END {
        print last_cert
      }' {{ cert_path }} > "{{ temp_dir.path }}/signed.last.pem"
  changed_when: false

- name: Verify and Build Certificate Chain
  shell: |
    for ca_file in {{ temp_dir.path }}/ca.*.pem; do
      # Verify using the last certificate from the chain
      if openssl verify -CAfile "$ca_file" "{{ temp_dir.path }}/signed.last.pem"; then
        # If verification succeeds, create the chain using original cert/chain
        cat {{ cert_path }} "$ca_file" > "{{ ssl_file_dir_final }}/{{ service_name }}.chain"
        echo "Chain completed with: $ca_file"
        exit 0
      fi
    done
    echo "No valid CA found to complete the chain" >&2
    exit 1
  register: chain_result
  failed_when: chain_result.rc != 0
  changed_when: chain_result.rc == 0

- name: Cleanup Temp Directory
  file:
    path: "{{ temp_dir.path }}"
    state: absent
  changed_when: false

- name: Create Keystore and Truststore from Certs
  include_tasks: create_keystores_from_certs.yml
