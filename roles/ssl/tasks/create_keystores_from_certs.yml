---
- name: Count Certificates in Ca Cert
  shell: |
    grep -c "END CERTIFICATE" {{ca_cert_path}}
  check_mode: false
  register: ca_cert_count_grep
  diff: "{{ not mask_sensitive_diff|bool }}"

- name: Set the Certificate Count Var
  set_fact:
    cert_count: "{{ca_cert_count_grep.stdout}}"

- name: Create Truststore and Import the CA Chain
  include_tasks: import_ca_chain.yml
  when: cert_count|int > 1

- name: Create Truststore and Import the CA Cert
  shell: |
    keytool -noprompt -keystore {{truststore_path}} \
      -storetype pkcs12 \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{truststore_storepass}} \
      -keypass {{truststore_storepass}}
  when: cert_count|int == 1
  no_log: "{{mask_secrets|bool}}"

- name: Create BCFKS Truststore and Import the CA Cert
  shell: |
    keytool -noprompt -keystore {{bcfks_truststore_path}} \
      -storetype BCFKS \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{truststore_storepass}} \
      -keypass {{truststore_storepass}} \
      -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
      -providerpath {{ (binary_base_path, 'share/java/kafka/bc-fips-*.jar') | path_join }}
  when:
    - cert_count|int == 1
    - create_bouncy_castle_keystore|bool
  no_log: "{{mask_secrets|bool}}"

- name: Create Temporary PKCS12 File with Key and Signed Cert Chain
  shell: |
    openssl pkcs12 -export \
      -in {{ ssl_file_dir_final }}/{{service_name}}.chain \
      -inkey {{key_path}} \
      {% if ssl_key_password is defined %}-passin pass:{{ssl_key_password}}{% endif %} \
      -out {{ ssl_file_dir_final }}/generation/{{service_name}}.p12 \
      -name localhost \
      -passout pass:mykeypassword
  no_log: "{{mask_secrets|bool}}"

- name: Create Keystore
  shell: |
    keytool -importkeystore \
      -srckeystore {{ ssl_file_dir_final }}/generation/{{service_name}}.p12 \
      -srcstoretype pkcs12 \
      -srcstorepass mykeypassword \
      -destkeystore {{keystore_path}} \
      -deststoretype pkcs12 \
      -deststorepass {{keystore_storepass}} \
      -destkeypass {{keystore_storepass}}
  no_log: "{{mask_secrets|bool}}"

- name: Create BCFKS Keystore
  shell: |
    keytool -importkeystore \
      -srckeystore {{ ssl_file_dir_final }}/generation/{{service_name}}.p12 \
      -srcstoretype pkcs12 \
      -srcstorepass mykeypassword \
      -destkeystore {{bcfks_keystore_path}} \
      -deststorepass {{keystore_storepass}} \
      -destkeypass {{keystore_storepass}} \
      -deststoretype BCFKS \
      -providername BCFIPS \
      -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
      -providerpath {{ (binary_base_path, 'share/java/kafka/bc-fips-*.jar') | path_join }}
  when: create_bouncy_castle_keystore|bool
  no_log: "{{mask_secrets|bool}}"

- name: Import the CA cert into the Keystore
  shell: |
    keytool -noprompt -keystore {{keystore_path}} \
      -storetype pkcs12 \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{keystore_storepass}}
  no_log: "{{mask_secrets|bool}}"

- name: Import the CA cert into the BCFKS Keystore
  shell: |
    keytool -noprompt -keystore {{bcfks_keystore_path}} \
      -storetype BCFKS \
      -alias CARoot \
      -import -file {{ca_cert_path}} \
      -storepass {{keystore_storepass}} \
      -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
      -providerpath {{ (binary_base_path, 'share/java/kafka/bc-fips-*.jar') | path_join }}
  when: create_bouncy_castle_keystore|bool
  no_log: "{{mask_secrets|bool}}"
