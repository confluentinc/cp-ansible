---
- include_role:
    name: common
  when: not common_role_completed|bool
  tags: common

- name: Gather OS Facts
  setup:
    # Only gathers items in list, filters out the rest
    filter: "{{item}}"
    gather_subset:
      - '!all'
  loop:
    - ansible_os_family
    - ansible_fqdn

# If the target directory (i.e. creates) doesn't exist then download and expand the remote archive into target
- name: Expand remote Confluent Control Center Next Gen archive
  unarchive:
    src: "{{ confluent_archive_control_center_next_gen_file_source }}"
    remote_src: "{{ confluent_archive_control_center_next_gen_file_remote }}"
    dest: "{{archive_destination_path}}"
    group: "{{ omit if archive_group == '' else archive_group }}"
    owner: "{{ omit if archive_owner == '' else archive_owner }}"
    mode: '755'
    creates: "{{confluent_control_center_next_gen_binary_base_path}}"
  when: installation_method == "archive"

- name: Stop Service and Remove Packages on Version Change
  include_role:
    name: common
    tasks_from: remove_packages.yml
  vars:
    service_name: "{{ control_center_next_gen_service_name }}"
  when: installation_method == "package"
  tags:
    - package
    - cp_package

- name: Install the Control Center Next Gen Packages
  yum:
    name: "{{ control_center_next_gen_packages | product([confluent_control_center_next_gen_package_redhat_suffix]) | map('join') | list }}"
    state: latest
  register: install_c3_package_result
  until: install_c3_package_result is success or ansible_check_mode
  retries: 5
  delay: 90
  when:
    - ansible_os_family == "RedHat"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - package
    - cp_package
  notify: restart control center next gen

- name: Install the Control Center Next Gen Packages
  apt:
    name: "{{ control_center_next_gen_packages | product([confluent_control_center_next_gen_package_debian_suffix]) | map('join') | list }}"
  register: install_c3_package_result
  until: install_c3_package_result is success or ansible_check_mode
  retries: 5
  delay: 90
  when:
    - ansible_os_family == "Debian"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - package
    - cp_package
  notify: restart control center next gen

- name: Create Control Center Next Gen Group
  group:
    name: "{{control_center_next_gen_group}}"
  tags:
    - privileged

- name: Check if Control Center Next Gen User Exists
  # Create user task must be skipped for non-linux users
  getent:
    database: passwd
    key: "{{control_center_next_gen_user}}"
  failed_when: false

- name: Create Control Center Next Gen User
  user:
    name: "{{control_center_next_gen_user}}"
    comment: Confluent Control Center
    system: true
    shell: "{{user_login_shell}}"
    group: "{{control_center_next_gen_group}}"
  when: (getent_passwd|default({}))[control_center_next_gen_user] is not defined
  tags:
    - privileged

- name: Set Control Center Next Gen Data Dir & Control Center Next Gen Dependencies (Prometheus, AlertManager)'s Config Dir permissions
  file:
    path: "{{ item }}"
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
    state: directory
    mode: '750'
  loop:
    - "{{control_center_next_gen_final_properties['confluent.controlcenter.data.dir']}}"
    - "{{control_center_next_gen_dependencies_config_path}}"
  tags:
    - filesystem

- name: Set Control Center Next Gen Data Dir & Control Center Next Gen Dependencies (Prometheus, AlertManager)'s Config Dir file permissions
  file:
    path: "{{ item }}"
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
    recurse: true
  loop:
    - "{{control_center_next_gen_final_properties['confluent.controlcenter.data.dir']}}"
  tags:
    - filesystem

- name: Copy Control Center Next Gen Dependencies Prometheus and AlertManager configuration files
  include_tasks: copy_dependency_configs.yml
  loop:
    - name: prometheus_generated
      src: "{{control_center_next_gen_dependency_prometheus_generated_src_config_file}}"
      dest: "{{control_center_next_gen_dep_prometheus.config_file}}"
      always_copy: false
    - name: prometheus_recording_rules
      src: "{{control_center_next_gen_dependency_recording_rules_generated_src_config_file}}"
      dest: "{{control_center_next_gen_dep_prometheus.recording_rules_config_file}}"
      always_copy: true
    - name: prometheus_trigger_rules
      src: "{{control_center_next_gen_dependency_trigger_rules_generated_src_config_file}}"
      dest: "{{control_center_next_gen_dep_prometheus.trigger_rules_config_file}}"
      always_copy: false
    - name: alertmanager_generated
      src: "{{control_center_next_gen_dependency_alertmanager_generated_src_config_file}}"
      dest: "{{control_center_next_gen_dep_alertmanager.config_file}}"
      always_copy: false
  tags:
    - configuration

- name: Create Control Center Next Gen Dependency Prometheus `prometheus-generated-overlay.yml` configuration
  template:
    src: prometheus_generated_overlay.yml.j2
    dest: "{{control_center_next_gen_dependency_prometheus_custom_overlay_path}}"
    mode: '640'
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  tags:
    - configuration

- name:  Merge Control Center Next Gen Dependency Prometheus overlay with `prometheus-generated.yml` configuration
  include_tasks: prometheus_config_overlay.yml
  when: control_center_next_gen_dependency_prometheus_custom_overlay_path is defined
  tags:
    - configuration

- name: Create Control Center Next Gen Dependencies Prometheus (`web-config-prom.yml`) & AlertManager (`web-config-am.yml`) configuration
  template:
    src: "{{item.template}}"
    dest: "{{item.dest}}"
    mode: '640'
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  loop:
    - template: "prometheus_web_config.yml.j2"
      dest: "{{control_center_next_gen_dep_prometheus.web_config_file}}"
    - template: "alertmanager_web_config.yml.j2"
      dest: "{{control_center_next_gen_dep_alertmanager.web_config_file}}"
  notify: restart control center next gen
  tags:
    - configuration

- name: Set Control Center Next Gen Data Dir & Control Center Next Gen Dependencies (Prometheus, AlertManager)'s Config Dir file permissions
  file:
    path: "{{ item }}"
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  loop:
    - "{{control_center_next_gen_dep_prometheus.config_file}}"
    - "{{control_center_next_gen_dep_prometheus.recording_rules_config_file}}"
    - "{{control_center_next_gen_dep_prometheus.trigger_rules_config_file}}"
    - "{{control_center_next_gen_dep_prometheus.web_config_file}}"
    - "{{control_center_next_gen_dep_alertmanager.config_file}}"
    - "{{control_center_next_gen_dep_alertmanager.web_config_file}}"
  tags:
    - filesystem

# Archive File deployments need to create SystemD service units
# Copy the tarball's systemd service to the system
- name: Copy Control Center Next Gen & its Dependencies Prometheus & AlertManager Service from archive file to system
  copy:
    src: "{{item.service_file_source}}"
    remote_src: true
    dest: "{{item.service_file_dest}}"
    mode: '640'
    force: true
  loop:
    - service_file_source: "{{confluent_control_center_next_gen_binary_base_path}}/lib/systemd/system/{{control_center_next_gen_dep_prometheus.systemd_file|basename}}"
      service_file_dest: "{{control_center_next_gen_dep_prometheus.systemd_file}}"
    - service_file_source: "{{confluent_control_center_next_gen_binary_base_path}}/lib/systemd/system/{{control_center_next_gen_dep_alertmanager.systemd_file|basename}}"
      service_file_dest: "{{control_center_next_gen_dep_alertmanager.systemd_file}}"
    - service_file_source: "{{confluent_control_center_next_gen_binary_base_path}}/lib/systemd/system/{{control_center_next_gen.systemd_file|basename}}"
      service_file_dest: "{{control_center_next_gen.systemd_file}}"
  when: installation_method == "archive"
  tags:
    - systemd

- name: Create Control Center Next Gen Keystore and Truststore
  include_role:
    name: ssl
  vars:
    truststore_storepass: "{{control_center_next_gen_truststore_storepass}}"
    truststore_path: "{{control_center_next_gen_truststore_path}}"
    keystore_path: "{{control_center_next_gen_keystore_path}}"
    keystore_storepass: "{{control_center_next_gen_keystore_storepass}}"
    keystore_keypass: "{{control_center_next_gen_keystore_keypass}}"
    service_name: control_center
    user: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host|default(omit), hostname|default(omit)] | unique }}"
    ca_cert_path: "{{control_center_next_gen_ca_cert_path}}"
    cert_path: "{{control_center_next_gen_cert_path}}"
    key_path: "{{control_center_next_gen_key_path}}"
    export_certs: "{{control_center_next_gen_export_certs}}"
  # CCloud Kafka does not need Keystores/Truststores
  when: >
    control_center_next_gen_ssl_enabled|bool or
    ( kafka_broker_listeners[control_center_next_gen_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool and not public_certificates_enabled|bool ) or
    ( mds_tls_enabled | bool and not public_certificates_enabled|bool ) or
    ( 'schema_registry' in groups and schema_registry_ssl_enabled|bool ) or
    ( 'kafka_connect' in groups and kafka_connect_ssl_enabled|bool ) or
    ( 'ksql' in groups and ksql_ssl_enabled|bool )
  tags: ssl

- name: Create Control Center Next Gen Dependency Prometheus Keystore and Truststore
  include_role:
    name: ssl
  vars:
    truststore_storepass: "{{control_center_next_gen_dependency_prometheus_truststore_storepass}}"
    truststore_path: "{{control_center_next_gen_dependency_prometheus_truststore_path}}"
    keystore_path: "{{control_center_next_gen_dependency_prometheus_keystore_path}}"
    keystore_storepass: "{{control_center_next_gen_dependency_prometheus_keystore_storepass}}"
    keystore_keypass: "{{control_center_next_gen_dependency_prometheus_keystore_keypass}}"
    service_name: "{{control_center_next_gen_dependency_prometheus_service_name}}"
    user: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host|default(omit), hostname|default(omit)] | unique }}"
    ca_cert_path: "{{control_center_next_gen_dependency_prometheus_ca_cert_path}}"
    cert_path: "{{control_center_next_gen_dependency_prometheus_cert_path}}"
    key_path: "{{control_center_next_gen_dependency_prometheus_key_path}}"
    export_certs: "true"
  when: control_center_next_gen_dependency_prometheus_ssl_enabled|bool

- name:  Create Control Center Next Gen Dependency Alertmanager Keystore and Truststore
  include_role:
    name: ssl
  vars:
    truststore_storepass: "{{control_center_next_gen_dependency_alertmanager_truststore_storepass}}"
    truststore_path: "{{control_center_next_gen_dependency_alertmanager_truststore_path}}"
    keystore_path: "{{control_center_next_gen_dependency_alertmanager_keystore_path}}"
    keystore_storepass: "{{control_center_next_gen_dependency_alertmanager_keystore_storepass}}"
    keystore_keypass: "{{control_center_next_gen_dependency_alertmanager_keystore_keypass}}"
    service_name: "{{control_center_next_gen_dependency_alertmanager_service_name}}"
    user: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host|default(omit), hostname|default(omit)] | unique }}"
    ca_cert_path: "{{control_center_next_gen_dependency_alertmanager_ca_cert_path}}"
    cert_path: "{{control_center_next_gen_dependency_alertmanager_cert_path}}"
    key_path: "{{control_center_next_gen_dependency_alertmanager_key_path}}"
    export_certs: "true"
  when: control_center_next_gen_dependency_alertmanager_ssl_enabled|bool

- name: Configure Kerberos
  include_role:
    name: kerberos
  vars:
    kerberos_group: "{{control_center_next_gen_group}}"
    kerberos_user: "{{control_center_next_gen_user}}"
    kerberos_keytab_path: "{{control_center_next_gen_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{control_center_next_gen_keytab_path}}"
    kerberos_handler: "restart control center next gen"
  when: "'GSSAPI' in (kafka_broker_listeners[control_center_next_gen_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | confluent.platform.normalize_sasl_protocol)"

- name: Copy Custom Control Center Next Gen Files
  include_role:
    name: common
    tasks_from: copy_files.yml
  vars:
    copy_files: "{{control_center_next_gen_copy_files}}"
    user: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  when: control_center_next_gen_copy_files | length > 0
  tags:
    - configuration

- name: Copy Custom Files From All Components List
  include_role:
    name: common
    tasks_from: copy_files.yml
  vars:
    copy_files: "{{all_components_copy_files}}"
    user: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  when: all_components_copy_files | length > 0
  tags:
    - configuration

- name: Configure RBAC for OAuth User
  include_tasks: rbac.yml
  vars:
    c3_user: "{{control_center_next_gen_oauth_principal}}"
  when: rbac_enabled|bool and oauth_enabled|bool

- name: Configure RBAC for LDAP User
  include_tasks: rbac.yml
  vars:
    c3_user: "{{control_center_next_gen_ldap_user}}"
  when:
    - rbac_enabled|bool
    - "'ldap' in auth_mode"

- name: Extract C3 Principal from cert
  import_role:
    name: common
    tasks_from: cert_principal_extract.yml
  vars:
    keystore_path: "{{control_center_next_gen_keystore_path}}"
    keystore_storepass: "{{control_center_next_gen_keystore_storepass}}"
    pm_rules: "{{control_center_next_gen_final_properties.get('ssl.principal.mapping.rules','DEFAULT')}}"
  when:
    - rbac_enabled|bool
    - mds_ssl_client_authentication != 'none'

- name: Configure RBAC for mTLS User
  include_tasks: rbac.yml
  vars:
    c3_user: "{{ks_extracted_principal}}"
  when:
    - rbac_enabled|bool
    - mds_ssl_client_authentication != 'none'

- name: Import IDP certificate to Truststore for OAuth
  include_role:
    name: common
    tasks_from: idp_certs.yml
  vars:
    idp_cert_path: "{{ oauth_idp_cert_path }}"
    idp_cert_dest: /tmp/oauth_idp_cert.pem
    alias: "oauth_cert"
    truststore_storepass: "{{control_center_next_gen_truststore_storepass}}"
    truststore_path: "{{control_center_next_gen_truststore_path}}"
    create_bouncy_castle_keystore: false
    restart_handler_name: "restart control center next gen"
  when:
    - oauth_enabled|bool or schema_registry_oauth_enabled|bool or kafka_rest_oauth_enabled|bool or kafka_connect_oauth_enabled|bool or kafka_connect_replicator_oauth_enabled|bool
    - oauth_idp_cert_path != ""

- name: Create Control Center Next Gen Config directory
  file:
    path: "{{ control_center_next_gen.config_file | dirname }}"
    state: directory
    mode: '750'
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  tags:
    - configuration
    - filesystem

- name: Create Control Center Next Gen Config
  template:
    src: control-center.properties.j2
    dest: "{{control_center_next_gen.config_file}}"
    mode: '640'
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  notify: restart control center next gen
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - configuration

- name: Create Control Center Next Gen Config with Secrets Protection
  include_role:
    name: common
    tasks_from: secrets_protection.yml
  vars:
    final_properties: "{{ control_center_next_gen_final_properties }}"
    encrypt_passwords: "{{ control_center_next_gen_secrets_protection_encrypt_passwords }}"
    encrypt_properties: "{{ control_center_next_gen_secrets_protection_encrypt_properties }}"
    config_path: "{{ control_center_next_gen.config_file }}"
    secrets_file: "{{ control_center_next_gen_secrets_protection_file }}"
    secrets_file_owner: "{{ control_center_next_gen_user }}"
    secrets_file_group: "{{ control_center_next_gen_group }}"
    ca_cert_path: "{{ control_center_next_gen_ca_cert_path if control_center_next_gen_ssl_enabled|bool else '' }}"
    handler: restart control center next gen
  tags:
    - configuration
  when:
    - control_center_next_gen_secrets_protection_enabled|bool
    - rbac_enabled|bool or confluent_cli_version is version('3.0.0', '>=')

- name: Create Control Center Next Gen Logs Directory
  file:
    path: "{{control_center_next_gen_log_dir}}"
    state: directory
    group: "{{control_center_next_gen_group}}"
    owner: "{{control_center_next_gen_user}}"
    mode: '770'
  tags:
    - filesystem
    - log

- name: Update Control Center Next Gen log4j Config for Log Cleanup
  include_role:
    name: common
    tasks_from: update_log4j.yml
  vars:
    log4j_file: "{{control_center_next_gen.log4j_file}}"
    log4j_max_backup_index: "{{control_center_next_gen_max_log_files}}"
    log4j_max_file_size: "{{control_center_next_gen_log_file_size}}"
    log4j_root_logger: "{{control_center_next_gen_log4j_root_logger}}"
    handler: "restart control center next gen"
  when: control_center_next_gen_custom_log4j|bool
  tags:
    - log

- name: Set Permissions on Log4j Conf
  file:
    path: "{{control_center_next_gen.log4j_file}}"
    group: "{{control_center_next_gen_group}}"
    owner: "{{control_center_next_gen_user}}"
    mode: '640'
  tags:
    - filesystem
    - log

- name: Create logredactor rule file directory
  file:
    path: "{{ logredactor_rule_path | dirname }}"
    state: directory
    mode: '755'
  when: (control_center_next_gen_custom_log4j2|bool) and (logredactor_enabled|bool) and (logredactor_rule_url == '')
  tags:
    - log

- name: Copy logredactor rule file from control node to component node
  copy:
    src: "{{ logredactor_rule_path_local }}"
    dest: "{{ logredactor_rule_path }}"
    mode: '640'
  when: (control_center_next_gen_custom_log4j2|bool) and (logredactor_enabled|bool) and (logredactor_rule_url == '')
  tags:
    - log

- name: Check if Control Center Next Gen log4j file exists
  stat:
    path: "{{ control_center_next_gen.log4j_file }}"
  register: log4j_file_stat
  tags:
    - log

- name: Backup Control Center Next Gen log4j file if it exists
  copy:
    src: "{{ control_center_next_gen.log4j_file }}"
    dest: "{{ control_center_next_gen.log4j_file }}.bak"
    remote_src: yes
  when: log4j_file_stat.stat.exists
  tags:
    - log

- name: Update log4j Config for Log Cleanup
  confluent.platform.update_log4j2:
    path: "{{control_center_next_gen.log4j_file}}"
    max: "{{control_center_next_gen_max_log_files}}"
    size: "{{control_center_next_gen_log_file_size}}"
    root_level: "{{control_center_next_gen_log4j2_root_logger_level}}"
    root_appenders: "{{ control_center_next_gen_log4j2_root_appenders }}"
    add_redactor: "{{ logredactor_enabled|bool }}"
    redactor_refs: "{{ control_center_next_gen_logredactor_logger_specs_list | map(attribute='appenderRefs') | list }}"
    redactor_rules: "{% if logredactor_rule_url == '' %}{{logredactor_rule_path}}{% else %}{{logredactor_rule_url}}{% endif %}"
    redactor_policy_refresh_interval: "{{ logredactor_policy_refresh_interval }}"
    redactor_logger_names: "{{ control_center_next_gen_logredactor_logger_specs_list | map(attribute='logger_name') | list }}"
  notify: restart connect distributed
  when: control_center_next_gen_custom_log4j2|bool
  tags:
    - configuration
    - log

- name: Set Permissions on Log4j Conf
  file:
    path: "{{control_center_next_gen.log4j_file}}"
    group: "{{control_center_next_gen_group}}"
    owner: "{{control_center_next_gen_user}}"
    mode: '640'
  tags:
    - filesystem
    - log

- name: Restart Control Center Next Gen
  ansible.builtin.debug:
    msg: "restarting control center"
  notify: restart control center next gen
  when: (control_center_next_gen_custom_log4j2|bool) and (logredactor_enabled|bool) and (not control_center_next_gen_skip_restarts|bool)
  tags:
    - log

- name: Create RocksDB Directory
  file:
    path: "{{control_center_next_gen_rocksdb_path}}"
    group: "{{control_center_next_gen_group}}"
    owner: "{{control_center_next_gen_user}}"
    mode: '750'
    state: directory
  when: control_center_next_gen_rocksdb_path != ""
  tags:
    - filesystem

- name: Set Permission to RocksDB Files
  file:
    path: "{{control_center_next_gen_rocksdb_path}}"
    group: "{{control_center_next_gen_group}}"
    owner: "{{control_center_next_gen_user}}"
    recurse: true
  when: control_center_next_gen_rocksdb_path != ""
  tags:
    - filesystem

- name: Create Basic Auth Jaas File
  template:
    src: jaas.conf.j2
    dest: "{{control_center_next_gen.jaas_file}}"
    mode: '640'
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  notify: restart control center next gen
  when: control_center_next_gen_authentication_type == 'basic'

- name: Create Basic Auth Password File
  template:
    src: password.properties.j2
    dest: "{{control_center_next_gen.password_file}}"
    mode: '640'
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
  notify: restart control center next gen
  when: control_center_next_gen_authentication_type == 'basic'

- name: Create Control Center Next Gen & Its dependencies Alertmanager & prometheus Service Override Directory
  file:
    path: "{{item}}"
    state: directory
    owner: "{{control_center_next_gen_user}}"
    group: "{{control_center_next_gen_group}}"
    mode: '750'
  loop:
    - "{{control_center_next_gen.systemd_override | dirname}}"
    - "{{control_center_next_gen_dep_alertmanager.systemd_override | dirname}}"
    - "{{control_center_next_gen_dep_prometheus.systemd_override | dirname}}"
  tags:
    - systemd
    - privileged

- name: Write Control Center Next Gen & Its dependencies Alertmanager & prometheus Service Overrides
  template:
    src: "{{item.override_file_template}}"
    dest: "{{item.override_file_dst}}"
    mode: '640'
    owner: root
    group: root
  loop:
    - override_file_template: "alertmanager_override.conf.j2"
      override_file_dst: "{{control_center_next_gen_dep_alertmanager.systemd_override}}"
    - override_file_template: "prometheus_override.conf.j2"
      override_file_dst: "{{control_center_next_gen_dep_prometheus.systemd_override}}"
    - override_file_template: "override.conf.j2"
      override_file_dst: "{{control_center_next_gen.systemd_override}}"
  notify: restart control center next gen
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - systemd
    - privileged

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart control center next gen
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Control Center Next Gen & its dependencies Alertmanager & Prometheus Service
  systemd:
    name: "{{item}}"
    enabled: true
    state: started
  loop:
    - "{{control_center_next_gen_dep_alertmanager_service_name}}"
    - "{{control_center_next_gen_dep_prometheus_service_name}}"
    - "{{control_center_next_gen_service_name}}"
  when: installation_method == "package"
  tags:
    - systemd

- name: Do Health Check on Control Center Next Gen & its dependencies Alertmanager & Prometheus
  include_tasks: health_check.yml
  when:
    - control_center_next_gen_health_checks_enabled|bool
    - not ansible_check_mode
  tags: health_check

- name: Delete temporary keys/certs when keystore and truststore is provided
  file:
    path: "{{item}}"
    state: absent
  loop:
    - "{{control_center_next_gen_ca_cert_path}}"
    - "{{control_center_next_gen_cert_path}}"
    - "{{control_center_next_gen_key_path}}"
  when: (ssl_provided_keystore_and_truststore | bool)
