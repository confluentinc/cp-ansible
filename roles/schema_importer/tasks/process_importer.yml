---
# Enhanced Schema Importer with Comprehensive Override Support
# This allows overriding ANY part of the API request body

- name: Set importer configuration
  set_fact:
    schema_importer_config:
      name: "{{ importer.name }}"
      context: "{{ importer.context | default('') }}"
      context_type: "{{ importer.context_type | default('') }}"
      subjects: "{{ importer.subjects | default([]) }}"
      config: "{{ schema_importer_final_config }}"
  vars:
    base_config: "{{ importer.config | default({}) }}"

    # Transform inventory config to API format
    api_config:
      schema.registry.url: "{{ base_config.schema_registry_endpoint }}"
      basic.auth.credentials.source: "{{ 'USER_INFO' if base_config.authentication_type == 'basic' else omit }}"
      basic.auth.user.info: "{{ base_config.basic_username + ':' + base_config.basic_password if base_config.authentication_type == 'basic' else omit }}"

    # Use API config directly without separate overrides
    schema_importer_final_config: "{{ api_config }}"

# Shared variables for common request body fields and URI auth
- name: Set importer variables
  set_fact:
    # Certificate chain for mTLS authentication
    certs_chain: "{{ssl_file_dir_final}}/schema_registry.chain"

    # Build base request body from configuration
    base_request_body:
      name: "{{ schema_importer_config.name }}"
      subjects: "{{ schema_importer_config.subjects }}"
      config: "{{ schema_importer_config.config }}"

    # Add optional fields if they exist
    optional_fields:
      context: "{{ schema_importer_config.context if schema_importer_config.context != '' else omit }}"
      contextType: "{{ schema_importer_config.context_type if schema_importer_config.context_type != '' else omit }}"

- name: Check if Schema Importer exists
  include_tasks: ../common/tasks/schema_registry_operations.yml
  vars:
    operation_name: "Check if Schema Importer exists"
    request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}"
    method: GET
    expected_status: [200, 404]
    result_var: importer_check
    ignore_errors: true
    username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

# Pause importer before update (only needed for existing importers)
- name: Pause Schema Importer before update
  include_tasks: ../common/tasks/schema_registry_operations.yml
  vars:
    operation_name: "Pause Schema Importer before update"
    request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/pause"
    method: PUT
    expected_status: [200, 202]
    result_var: importer_pause
    when_condition: "{{ importer_check.status == 200 }}"
    until_condition: "{{ RESULT_VAR.status in [200] }}"
    request_retries: "{{ schema_registry_retries }}"
    request_delay: 2
    username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

# Enhanced: Build comprehensive request body with full override support
- name: Set importer operation variables
  set_fact:
    # Dynamic method and URL based on whether importer exists
    importer_method: "{{ 'POST' if importer_check.status == 404 else 'PUT' }}"
    importer_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers{{ '' if importer_check.status == 404 else '/' + schema_importer_config.name }}"
    # Dynamic base body (create includes name, update doesn't)
    initial_request_body: "{{ {'name': schema_importer_config.name} if importer_check.status == 404 else {} }}"
  when: importer_check.status in [200, 404]

- name: Build standard importer request body
  set_fact:
    # Build standard request body from base components
    standard_request_body: "{{ initial_request_body | combine(base_request_body) | combine(optional_fields) }}"
  when: importer_check.status in [200, 404]

- name: Apply comprehensive overrides to importer request body
  set_fact:
    # Apply comprehensive overrides (can override ANY field)
    importer_request_body: "{{ standard_request_body | combine(importer.overrides | default({}), recursive=True) }}"
  when: importer_check.status in [200, 404]

# Create or Update Schema Importer (POST for new, PUT for existing)
- name: Create or Update Schema Importer
  include_tasks: ../common/tasks/schema_registry_operations.yml
  vars:
    operation_name: "Create or Update Schema Importer"
    request_url: "{{ importer_url }}"
    method: "{{ importer_method }}"
    expected_status: 200
    request_body_format: json
    request_body: "{{ importer_request_body }}"
    result_var: importer_operation
    when_condition: "{{ importer_check.status in [200, 404] }}"
    username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

# Resume importer after update (only needed for existing importers)
- name: Resume Schema Importer after update
  include_tasks: ../common/tasks/schema_registry_operations.yml
  vars:
    operation_name: "Resume Schema Importer after update"
    request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/resume"
    method: PUT
    expected_status: [200, 202]
    result_var: importer_resume
    when_condition: "{{ importer_check.status == 200 }}"
    username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

- name: Register Schema Importer Status
  include_tasks: ../common/tasks/schema_registry_operations.yml
  vars:
    operation_name: "Register Schema Importer Status"
    request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/status"
    method: GET
    expected_status: 200
    result_var: importer_status_response
    username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
    password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"

- name: Retrieve Schema Importer State
  set_fact:
    schema_importer_state: "{{ importer_status_response.json.state }}"
    schema_importer_configured: true
