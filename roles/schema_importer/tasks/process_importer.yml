---
- name: Set importer configuration
  set_fact:
    schema_importer_config:
      name: "{{ importer.name }}"
      context: "{{ importer.context | default('') }}"
      subjects: "{{ importer.subjects | default([]) }}"
      config: "{{ schema_importer_final_config }}"
  vars:
    base_config: "{{ importer.config | default({}) }}"
    override_config: "{{ importer.config_overrides | default({}) }}"
    # Transform inventory config to API format
    api_config:
      schema.registry.url: "{{ base_config.remote_schema_registry_endpoint }}"
      basic.auth.credentials.source: "{{ 'USER_INFO' if base_config.remote_authentication_type == 'basic' else omit }}"
      basic.auth.user.info: "{{ base_config.basic_username + ':' + base_config.basic_password if base_config.remote_authentication_type == 'basic' else omit }}"
    schema_importer_final_config: "{{ api_config | combine(override_config) }}"

# Shared variables for common request body fields and URI auth
- name: Set importer variables
  set_fact:
    # Common URI authentication parameters
    importer_uri_auth:
      validate_certs: false
      user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
      password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
    # Common request body fields
    importer_body_fields:
      context_field: "{{ {'context': schema_importer_config.context} if schema_importer_config.context | default('') != '' else {} }}"

- name: Check if Schema Importer exists
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}"
    method: GET
    status_code: [200, 404]
  args: "{{ importer_uri_auth }}"
  register: importer_check
  ignore_errors: true

# Pause importer before update (only needed for existing importers)
- name: Pause Schema Importer before update
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/pause"
    method: PUT
    status_code: [200, 202]
  args: "{{ importer_uri_auth }}"
  register: importer_pause
  until: importer_pause.status in [200]
  retries: "{{ schema_registry_retries }}"
  delay: 2
  when: importer_check.status == 200

# Create or Update Schema Importer (POST for new, PUT for existing)
- name: Create or Update Schema Importer
  uri:
    url: "{{ importer_url }}"
    method: "{{ importer_method }}"
    body_format: json
    body: "{{ importer_request_body }}"
    status_code: 200
  args: "{{ importer_uri_auth }}"
  vars:
    # Dynamic method and URL based on whether importer exists
    importer_method: "{{ 'POST' if importer_check.status == 404 else 'PUT' }}"
    importer_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers{{ '' if importer_check.status == 404 else '/' + schema_importer_config.name }}"
    # Dynamic request body (create includes name, update doesn't)
    base_importer_body: "{{ {'name': schema_importer_config.name} if importer_check.status == 404 else {} }}"
    common_importer_body:
      subjects: "{{ schema_importer_config.subjects }}"
      config: "{{ schema_importer_config.config }}"
    importer_request_body: "{{ base_importer_body | combine(common_importer_body) | combine(importer_body_fields.context_field) }}"
  register: importer_operation
  when: importer_check.status in [200, 404]

# Resume importer after update (only needed for existing importers)
- name: Resume Schema Importer after update
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/resume"
    method: PUT
    status_code: [200, 202]
  args: "{{ importer_uri_auth }}"
  register: importer_resume
  when: importer_check.status == 200

- name: Verify Schema Importer Status
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/status"
    method: GET
    status_code: 200
  args: "{{ importer_uri_auth }}"
  register: importer_status

- name: Retrieve Schema Importer State
  set_fact:
    schema_importer_state: "{{ importer_status.json.state }}"
    schema_importer_configured: true
