---
- name: Set importer configuration
  set_fact:
    schema_importer_config:
      name: "{{ importer.name }}"
      contextType: "{{ importer.context_type | default('AUTO') }}"
      context: "{{ importer.source_context | default('') }}"
      subjects: "{{ importer.subjects | default([]) }}"
      config: "{{ schema_importer_final_config }}"
  vars:
    base_config: "{{ importer.config | default({}) }}"
    override_config: "{{ importer.config_overrides | default({}) }}"
    # Transform inventory config to API format
    api_config:
      schema.registry.url: "{{ base_config.remote_schema_registry_endpoint }}"
      basic.auth.credentials.source: "{{ 'USER_INFO' if base_config.remote_authentication_type == 'basic' else omit }}"
      basic.auth.user.info: "{{ base_config.basic_username + ':' + base_config.basic_password if base_config.remote_authentication_type == 'basic' else omit }}"
    schema_importer_final_config: "{{ api_config | combine(override_config) }}"

- name: Check if Schema Importer exists
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}"
    method: GET
    status_code: [200, 404]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: importer_check
  ignore_errors: true

- name: Create Schema Importer
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers"
    method: POST
    body_format: json
    body: "{{ importer_request_body }}"
    # 201: Successfully created new importer
    # 409: Importer already exists (conflict, but acceptable)
    status_code: [200]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  vars:
    base_request_body:
      name: "{{ schema_importer_config.name }}"
      subjects: "{{ schema_importer_config.subjects }}"
      config: "{{ schema_importer_config.config }}"
    context_type_field: "{{ {'contextType': schema_importer_config.contextType} if schema_importer_config.contextType != 'AUTO' else {} }}"
    context_field: "{{ {'context': schema_importer_config.context} if schema_importer_config.contextType not in ['NONE', 'AUTO'] else {} }}"
    importer_request_body: "{{ base_request_body | combine(context_type_field) | combine(context_field) }}"
  register: importer_creation
  when: importer_check.status == 404

- name: Pause Schema Importer
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/pause"
    method: PUT
    status_code: [200, 202]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: exporter_pause
  until: exporter_pause.status in [200]
  retries: 10
  delay: 2
  when: exporter_check.status == 200

- name: Update Schema Importer
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}"
    method: PUT
    body_format: json
    body: "{{ importer_update_body }}"
    status_code: 200
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  vars:
    # Include all updatable fields
    base_update_body:
      subjects: "{{ schema_importer_config.subjects }}"
      config: "{{ schema_importer_config.config }}"
    context_type_field: "{{ {'contextType': schema_importer_config.contextType} if schema_importer_config.contextType != 'AUTO' else {} }}"
    context_field: "{{ {'context': schema_importer_config.context} if schema_importer_config.contextType not in ['NONE', 'AUTO'] else {} }}"
    importer_update_body: "{{ base_update_body | combine(context_type_field) | combine(context_field) }}"
  register: importer_update
  when: importer_check.status == 200

- name: Resume Schema Importer
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/resume"
    method: PUT
    status_code: [200, 202]
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: importer_resume
  when: importer_check.status == 200 and importer_update is defined

- name: Verify Schema Importer Status
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/status"
    method: GET
    status_code: 200
    validate_certs: false
    user: "{{ schema_registry_health_check_user if schema_registry_authentication_type == 'basic' else omit }}"
    password: "{{ schema_registry_health_check_password if schema_registry_authentication_type == 'basic' else omit }}"
  register: importer_status

- name: Set Schema Importer State
  set_fact:
    schema_importer_state: "{{ importer_status.json.state }}"
    schema_importer_configured: true
