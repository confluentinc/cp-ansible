---
- name: Set importer configuration
  set_fact:
    schema_importer_config:
      name: "{{ importer.name }}"
      context: "{{ importer.context | default('') }}"
      subjects: "{{ importer.subjects | default([]) }}"
      config: "{{ schema_importer_final_config }}"
  vars:
    base_config: "{{ importer.config | default({}) }}"
    override_config: "{{ importer.config_overrides | default({}) }}"
    # Transform inventory config to API format
    # Base configuration
    base_api_config:
      schema.registry.url: "{{ base_config.schema_registry_endpoint }}"
    
    # Basic Authentication
    basic_auth_config: "{{ {
      'basic.auth.credentials.source': 'USER_INFO',
      'basic.auth.user.info': base_config.basic_username + ':' + base_config.basic_password
    } if base_config.authentication_type == 'basic' else {} }}"
    
    # SASL Authentication
    sasl_auth_config: "{{ {
      'sasl.mechanism': base_config.sasl_mechanism | default('PLAIN'),
      'security.protocol': base_config.security_protocol | default('SASL_SSL'),
      'sasl.jaas.config': base_config.sasl_jaas_config if base_config.sasl_jaas_config is defined 
                         else (base_config.sasl_mechanism | default('PLAIN') + ' required username=\"' + base_config.sasl_username + '\" password=\"' + base_config.sasl_password + '\";')
    } if base_config.authentication_type == 'sasl' else {} }}"
    
    # OAuth Authentication  
    oauth_auth_config: "{{ {
      'security.protocol': base_config.security_protocol | default('SASL_SSL'),
      'sasl.mechanism': 'OAUTHBEARER',
      'sasl.jaas.config': 'org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\"' + base_config.oauth_client_id + '\" clientSecret=\"' + base_config.oauth_client_secret + '\" scope=\"' + (base_config.oauth_scope | default('')) + '\" extension_logicalCluster=\"' + (base_config.oauth_logical_cluster | default('')) + '\" extension_identityPoolId=\"' + (base_config.oauth_identity_pool_id | default('')) + '\";',
      'sasl.login.callback.handler.class': 'io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler'
    } if base_config.authentication_type == 'oauth' else {} }}"
    
    # mTLS Authentication
    mtls_auth_config: "{{ {
      'security.protocol': base_config.security_protocol | default('SSL'),
      'ssl.keystore.location': base_config.ssl_keystore_location,
      'ssl.keystore.password': base_config.ssl_keystore_password,
      'ssl.key.password': base_config.ssl_key_password | default(base_config.ssl_keystore_password),
      'ssl.truststore.location': base_config.ssl_truststore_location,
      'ssl.truststore.password': base_config.ssl_truststore_password
    } if base_config.authentication_type == 'mtls' else {} }}"
    
    # Combined API configuration
    api_config: "{{ base_api_config | combine(basic_auth_config) | combine(sasl_auth_config) | combine(oauth_auth_config) | combine(mtls_auth_config) }}"
    schema_importer_final_config: "{{ api_config | combine(override_config) }}"

# Shared variables for common request body fields and URI auth
- name: Set importer variables
  set_fact:
    # Certificate chain for mTLS authentication
    certs_chain: "{{ssl_file_dir_final}}/schema_registry.chain"
    # Common request body fields
    importer_body_fields:
      context_field: "{{ {'context': schema_importer_config.context} if schema_importer_config.context | default('') != '' else {} }}"

- name: Check if Schema Importer exists
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}"
    method: GET
    status_code: [200, 404]
  validate_certs: false
  url_username: "{{ schema_registry_health_check_user if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  url_password: "{{ schema_registry_health_check_password if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  force_basic_auth: "{{ true if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  client_cert: "{{ (schema_registry_cert_path if ssl_provided_keystore_and_truststore else certs_chain) if schema_registry_authentication_type == 'mtls' else omit }}"
  client_key: "{{ schema_registry_key_path if schema_registry_authentication_type == 'mtls' else omit }}"
  headers: "{{ {'Authorization': 'Bearer ' + authorization_token} if (rbac_enabled or schema_registry_oauth_enabled) else {} }}"
  register: importer_check
  ignore_errors: true

# Pause importer before update (only needed for existing importers)
- name: Pause Schema Importer before update
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/pause"
    method: PUT
    status_code: [200, 202]
  validate_certs: false
  url_username: "{{ schema_registry_health_check_user if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  url_password: "{{ schema_registry_health_check_password if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  force_basic_auth: "{{ true if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  client_cert: "{{ (schema_registry_cert_path if ssl_provided_keystore_and_truststore else certs_chain) if schema_registry_authentication_type == 'mtls' else omit }}"
  client_key: "{{ schema_registry_key_path if schema_registry_authentication_type == 'mtls' else omit }}"
  headers: "{{ {'Authorization': 'Bearer ' + authorization_token} if (rbac_enabled or schema_registry_oauth_enabled) else {} }}"
  register: importer_pause
  until: importer_pause.status in [200]
  retries: "{{ schema_registry_retries }}"
  delay: 2
  when: importer_check.status == 200

# Create or Update Schema Importer (POST for new, PUT for existing)
- name: Create or Update Schema Importer
  uri:
    url: "{{ importer_url }}"
    method: "{{ importer_method }}"
    body_format: json
    body: "{{ importer_request_body }}"
    status_code: 200
  validate_certs: false
  url_username: "{{ schema_registry_health_check_user if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  url_password: "{{ schema_registry_health_check_password if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  force_basic_auth: "{{ true if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  client_cert: "{{ (schema_registry_cert_path if ssl_provided_keystore_and_truststore else certs_chain) if schema_registry_authentication_type == 'mtls' else omit }}"
  client_key: "{{ schema_registry_key_path if schema_registry_authentication_type == 'mtls' else omit }}"
  headers: "{{ {'Authorization': 'Bearer ' + authorization_token} if (rbac_enabled or schema_registry_oauth_enabled) else {} }}"
  vars:
    # Dynamic method and URL based on whether importer exists
    importer_method: "{{ 'POST' if importer_check.status == 404 else 'PUT' }}"
    importer_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers{{ '' if importer_check.status == 404 else '/' + schema_importer_config.name }}"
    # Dynamic request body (create includes name, update doesn't)
    base_importer_body: "{{ {'name': schema_importer_config.name} if importer_check.status == 404 else {} }}"
    common_importer_body:
      subjects: "{{ schema_importer_config.subjects }}"
      config: "{{ schema_importer_config.config }}"
    importer_request_body: "{{ base_importer_body | combine(common_importer_body) | combine(importer_body_fields.context_field) }}"
  register: importer_operation
  when: importer_check.status in [200, 404]

# Resume importer after update (only needed for existing importers)
- name: Resume Schema Importer after update
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/resume"
    method: PUT
    status_code: [200, 202]
  validate_certs: false
  url_username: "{{ schema_registry_health_check_user if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  url_password: "{{ schema_registry_health_check_password if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  force_basic_auth: "{{ true if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  client_cert: "{{ (schema_registry_cert_path if ssl_provided_keystore_and_truststore else certs_chain) if schema_registry_authentication_type == 'mtls' else omit }}"
  client_key: "{{ schema_registry_key_path if schema_registry_authentication_type == 'mtls' else omit }}"
  headers: "{{ {'Authorization': 'Bearer ' + authorization_token} if (rbac_enabled or schema_registry_oauth_enabled) else {} }}"
  register: importer_resume
  when: importer_check.status == 200

- name: Verify Schema Importer Status
  uri:
    url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers/{{ schema_importer_config.name }}/status"
    method: GET
    status_code: 200
  validate_certs: false
  url_username: "{{ schema_registry_health_check_user if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  url_password: "{{ schema_registry_health_check_password if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  force_basic_auth: "{{ true if schema_registry_authentication_type != 'mtls' and not (rbac_enabled or schema_registry_oauth_enabled) else omit }}"
  client_cert: "{{ (schema_registry_cert_path if ssl_provided_keystore_and_truststore else certs_chain) if schema_registry_authentication_type == 'mtls' else omit }}"
  client_key: "{{ schema_registry_key_path if schema_registry_authentication_type == 'mtls' else omit }}"
  headers: "{{ {'Authorization': 'Bearer ' + authorization_token} if (rbac_enabled or schema_registry_oauth_enabled) else {} }}"
  register: importer_status

- name: Retrieve Schema Importer State
  set_fact:
    schema_importer_state: "{{ importer_status.json.state }}"
    schema_importer_configured: true
