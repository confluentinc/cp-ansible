---
- name: RBAC Setup Tasks
  import_role:
    name: common
    tasks_from: rbac_setup.yml
  vars:
    user: "{{kafka_broker_user}}"
    group: "{{kafka_broker_group}}"

- set_fact:
    send_client_cert: "{{ ssl_client_authentication in ['required', 'requested'] }}"

- name: Grant role System Admin to Additional Kafka Broker users/groups
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/{% if 'User' not in item and 'Group' not in item %}User:{% endif %}{{item}}/roles/SystemAdmin"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_broker_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_broker_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "clusters": {
          "kafka-cluster": "{{kafka_cluster_id}}"
        }
      }
    status_code: 204
  register: kb_mds_result
  until: kb_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  no_log: "{{mask_secrets|bool}}"
  loop: "{{kafka_broker_additional_system_admins}}"
  when: not ansible_check_mode

# confluent iam rolebinding create --principal User:<audit-log-admin> --role ResourceOwner --resource Topic:confluent-audit-log-events --prefix --cluster-name audit_logs
- name: Grant Audit Logs Principal ResourceOwner on confluent-audit-log-events Prefixed Topics
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{audit_logs_destination_principal}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_broker_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_broker_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{audit_logs_destination_kafka_cluster_name}}"
        },
        "resourcePatterns": [{
          "resourceType": "Topic",
          "name": "confluent-audit-log-events",
          "patternType":"PREFIXED"
        }]
      }
    status_code: 204
  register: kb_mds_result
  until: kb_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  no_log: "{{mask_secrets|bool}}"
  when: audit_logs_destination_enabled|bool and not ansible_check_mode

# confluent iam rolebinding create --principal User:<audit-log-writer> --role DeveloperWrite --resource Topic:confluent-audit-log-events --prefix --cluster-name audit_logs
- name: Grant Audit Logs Principal DeveloperWrite on confluent-audit-log-events Prefixed Topics
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{audit_logs_destination_principal}}/roles/DeveloperWrite/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_broker_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_broker_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{audit_logs_destination_kafka_cluster_name}}"
        },
        "resourcePatterns": [{
          "resourceType": "Topic",
          "name": "confluent-audit-log-events",
          "patternType":"PREFIXED"
        }]
      }
    status_code: 204
  register: kb_mds_result
  until: kb_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  no_log: "{{mask_secrets|bool}}"
  when: audit_logs_destination_enabled|bool and not ansible_check_mode
  run_once: true
