---
- name: Get Authorization Token for Connect Replicator Producer ERP User
  import_role:
    name: common
    tasks_from: get_authorization_token.yml
  vars:
    oauth: "{{ kafka_connect_replicator_oauth_enabled }}"
    oauth_user: "{{ kafka_connect_replicator_producer_erp_oauth_user }}"
    oauth_password: "{{ kafka_connect_replicator_producer_erp_oauth_password }}"
    ldap_user: "{{ kafka_connect_replicator_producer_erp_admin_user }}"
    ldap_password: "{{ kafka_connect_replicator_producer_erp_admin_password }}"
  when: kafka_connect_replicator_producer_rbac_enabled or kafka_connect_replicator_oauth_enabled

- name: Create SSL Certificate Directory
  file:
    path: /var/ssl/private/kafka_connect_replicator_producer
    state: directory
    mode: '755'
  tags:
    - privileged

- name: Check if MDS pem file exists on Ansible Controller
  stat:
    path: "{{ kafka_connect_replicator_producer_erp_pem_file }}"
  register: replicator_pem_file
  delegate_to: localhost
  vars:
    ansible_connection: local
    ansible_become: "{{ ansible_become_localhost }}"

- name: Debug
  ansible.builtin.debug:
    msg: WARNING - The file {{kafka_connect_replicator_producer_erp_pem_file}} doesn't exist on the control node
  when: not replicator_pem_file.stat.exists|bool

- name: Copy in MDS Public Pem File
  copy:
    src: "{{ kafka_connect_replicator_producer_erp_pem_file }}"
    dest: "{{ kafka_connect_replicator_producer_rbac_enabled_public_pem_path }}"
    mode: '640'
    owner: "{{kafka_connect_replicator_user}}"
    group: "{{kafka_connect_replicator_group}}"
  when: replicator_pem_file.stat.exists|bool
  diff: "{{ not mask_sensitive_diff|bool }}"

# The following block of URI calls sets up the permissions for replicator when cluster_id is used for the indetifier.

- name: Grant Confluent Replicator User ResourceOwner on White List Topics
  uri:
    url: "{{kafka_connect_replicator_producer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{replicator_producer_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_connect_replicator_producer_kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{ item }}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  with_items: "{{ kafka_connect_replicator_white_list.split(',') }}"
  when: kafka_connect_replicator_producer_kafka_cluster_id != "" and not ansible_check_mode

# The following block of URI calls sets up the permissions for replicator when cluster_name is used for the indetifier.

- name: Grant Confluent Replicator User ResourceOwner on White List Topics
  uri:
    url: "{{kafka_connect_replicator_producer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{replicator_producer_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{ kafka_connect_replicator_producer_kafka_cluster_name }}"
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{ item }}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  with_items: "{{ kafka_connect_replicator_white_list.split(',') }}"
  when: kafka_connect_replicator_producer_kafka_cluster_name != "" and not ansible_check_mode
