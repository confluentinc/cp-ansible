---
- name: Decide Where to delegate task of getting superuser token
  set_fact:
    delegation_target: >-
      {%- if mds_ssl_client_authentication == 'none' -%}
        {{ inventory_hostname }}
      {%- elif external_mds_enabled|bool -%}
        localhost
      {%- else -%}
        {{ groups['kafka_broker'][0] }}
      {%- endif -%}

- name: Get Authorization Token for Connect Replicator Monitoring Interceptor ERP User
  import_role:
    name: common
    tasks_from: get_authorization_token.yml
  vars:
    oauth: "{{ kafka_connect_replicator_oauth_enabled }}"
    oauth_user: "{{ kafka_connect_replicator_monitoring_interceptor_erp_oauth_user }}"
    oauth_password: "{{ kafka_connect_replicator_monitoring_interceptor_erp_oauth_password }}"
    ldap_user: "{{ kafka_connect_replicator_monitoring_interceptor_erp_admin_user }}"
    ldap_password: "{{ kafka_connect_replicator_monitoring_interceptor_erp_admin_password }}"
    mtls_client_cert: "{{ mds_super_user_external_cert_path if external_mds_enabled|bool else kafka_broker_cert_path }}"
    mtls_client_key: "{{ mds_super_user_external_key_path if external_mds_enabled|bool else kafka_broker_key_path }}"
  # For single cluster delegating this task to broker as in case of cert based token retrival only broker can get a super user token using its certs
  # For Centralized MDS other clusters can't delegate to MDS cluster as that cluster may not have permissions to ssh into MDS, thus delegate to localhost
  when: kafka_connect_replicator_monitoring_interceptor_rbac_enabled or kafka_connect_replicator_oauth_enabled
  delegate_to: "{{ delegation_target }}"

- set_fact:
    send_client_cert: "{{ mds_ssl_client_authentication in ['required', 'requested'] }}"

- name: Create SSL Certificate Directory
  file:
    path: /var/ssl/private/kafka_connect_replicator_monitoring_interceptor
    state: directory
    mode: '755'
  tags:
    - privileged

- name: Check if MDS pem file exists on Ansible Controller
  stat:
    path: "{{ kafka_connect_replicator_monitoring_interceptor_erp_pem_file }}"
  register: replicator_pem_file
  delegate_to: localhost
  vars:
    ansible_connection: local
    ansible_become: "{{ ansible_become_localhost }}"

- name: Debug
  ansible.builtin.debug:
    msg: WARNING - The file {{kafka_connect_replicator_monitoring_interceptor_erp_pem_file}} doesn't exist on the control node
  when: not replicator_pem_file.stat.exists|bool

- name: Copy in MDS Public Pem File
  copy:
    src: "{{ kafka_connect_replicator_monitoring_interceptor_erp_pem_file }}"
    dest: "{{ kafka_connect_replicator_monitoring_interceptor_rbac_enabled_public_pem_path }}"
    mode: '640'
    owner: "{{kafka_connect_replicator_user}}"
    group: "{{kafka_connect_replicator_group}}"
  when: replicator_pem_file.stat.exists|bool
  diff: "{{ not mask_sensitive_diff|bool }}"

- name: Grant connect user the DeveloperWrite role on Monitoring Interceptor Topic
  uri:
    url: "{{kafka_connect_replicator_monitoring_interceptor_erp_host.split(',')[0]}}/security/1.0/principals/User:{{replicator_monitoring_user}}/roles/DeveloperWrite/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_replicator_monitoring_interceptor_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_replicator_monitoring_interceptor_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_connect_replicator_monitoring_interceptor_kafka_cluster_id}}"
          }
        },
        "resourcePatterns": [{
          "resourceType": "Topic",
          "name": "{{kafka_connect_replicator_monitoring_interceptor_final_properties['confluent.monitoring.interceptor.topic']}}",
          "patternType":"LITERAL"
        }]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: (kafka_connect_replicator_monitoring_interceptors_enabled|bool) and (kafka_connect_replicator_monitoring_interceptor_kafka_cluster_id != "") and not ansible_check_mode

- name: Grant connect user the DeveloperWrite role on Monitoring Interceptor Topic
  uri:
    url: "{{kafka_connect_replicator_monitoring_interceptor_erp_host.split(',')[0]}}/security/1.0/principals/User:{{replicator_monitoring_user}}/roles/DeveloperWrite/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_replicator_monitoring_interceptor_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_replicator_monitoring_interceptor_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{ kafka_connect_replicator_monitoring_interceptor_kafka_cluster_name }}"
        },
        "resourcePatterns": [{
          "resourceType": "Topic",
          "name": "{{kafka_connect_replicator_monitoring_interceptor_final_properties['confluent.monitoring.interceptor.topic']}}",
          "patternType":"LITERAL"
        }]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: (kafka_connect_replicator_monitoring_interceptors_enabled|bool) and (kafka_connect_replicator_monitoring_interceptor_kafka_cluster_name != "") and not ansible_check_mode
