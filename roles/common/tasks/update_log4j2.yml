---
# Set Root Logger Level in Log4j2 YAML format
- name: Update Root Logger Level
  ansible.builtin.replace:
    path: "{{log4j_file}}"
    regexp: '(\s+Root:\s*\n\s+level:\s*)(\w+)'
    replace: '\1{{log4j_root_logger}}'
  notify: "{{handler}}"

# Update Appender References for Root Logger
- name: Update Root Logger Appender References
  ansible.builtin.blockinfile:
    path: "{{log4j_file}}"
    marker: "# {mark} ANSIBLE MANAGED APPENDER REFS"
    insertafter: "(?s)(\\s+Root:\\s*\\n\\s+level:\\s*\\w+\\s*\\n)"
    block: |2
      AppenderRef:
      {% for appender in log4j_root_appenders %}
        - ref: {{appender}}
      {% endfor %}
  notify: "{{handler}}"

# Identify RollingFile Appenders
- name: Identify RollingFile Appenders
  shell: |
    grep -A 2 "RollingFile:" {{log4j_file}} | grep "name:" | awk '{print $2}'
  register: appenders_grep
  changed_when: false
  check_mode: false

# Add or update SizeBasedTriggeringPolicy for each RollingFile appender
- name: Update Size Policy for Each Appender
  ansible.builtin.blockinfile:
    path: "{{log4j_file}}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR {{item}}"
    insertafter: "(?s)(\\s+- name: {{item}}.*?Policies:)"
    block: |2
          SizeBasedTriggeringPolicy:
            size: {{log4j_max_file_size}}
  with_items: "{{appenders_grep.stdout_lines}}"
  notify: "{{handler}}"

# Add or update the DefaultRolloverStrategy for each RollingFile appender
- name: Update Rollover Strategy for Each Appender
  ansible.builtin.blockinfile:
    path: "{{log4j_file}}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR ROLLOVER {{item}}"
    insertafter: "(?s)(\\s+- name: {{item}}.*?Policies:.*?\\n\\s+\\w+)"
    block: |2
        DefaultRolloverStrategy:
          max: {{log4j_max_backup_index}}
  with_items: "{{appenders_grep.stdout_lines}}"
  notify: "{{handler}}"

# Ensure correct pattern layout for each appender if needed
- name: Update Pattern Layout
  ansible.builtin.replace:
    path: "{{log4j_file}}"
    regexp: '(\s+PatternLayout:\s*\n\s+pattern:).*'
    replace: '\1 "[%d] %p %m (%c:%L)%n"'
  notify: "{{handler}}"