---
- name: Retrieve SSL public key hash from private key on Local Host
  shell:
    cmd: openssl pkey -pubout | openssl sha256
    stdin: "{{ lookup('file', ssl_key_filepath) }}"
  register: key_hash_local
  delegate_to: localhost
  changed_when: false
  when:
    - ssl_custom_certs|bool and not ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Register content of key file
  slurp:
    src: "{{ ssl_key_filepath }}"
  register: remote_key
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Retrieve SSL public key Hash from private key on Remote Host
  shell:
    cmd: openssl pkey -pubout | openssl sha256
    stdin: "{{ remote_key['results'][group_idx].content | b64decode }}"
  register: key_hash_remote
  changed_when: false
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"
  loop_control:
    index_var: group_idx

- name: Retrieve SSL public key hash from X509 certificate on Local Host
  shell:
    cmd: openssl x509 -noout -pubkey | openssl sha256
    stdin: "{{ lookup('file', ssl_signed_cert_filepath) }}"
  register: cert_hash_local
  delegate_to: localhost
  changed_when: false
  when:
    - ssl_custom_certs|bool and not ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Register content of cert file
  slurp:
    src: "{{ ssl_signed_cert_filepath }}"
  register: remote_cert
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"

- name: Retrieve SSL public key hash from X509 certificate on Remote Host
  shell:
    cmd: openssl x509 -noout -pubkey | openssl sha256
    stdin: "{{ remote_cert['results'][group_idx].content | b64decode }}"
  register: cert_hash_remote
  changed_when: false
  when:
    - ssl_custom_certs|bool and ssl_custom_certs_remote_src|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"
  loop_control:
    index_var: group_idx

- name: get public key hash from private key
  set_fact:
    key_hash: "{{key_hash_remote if ssl_custom_certs_remote_src|bool else key_hash_local}}"
  tags:
    - validate
    - validate_ssl_keys_certs

- name: get public key hash from X509 cert
  set_fact:
    cert_hash: "{{cert_hash_remote if ssl_custom_certs_remote_src|bool else cert_hash_local}}"
  tags:
    - validate
    - validate_ssl_keys_certs

- name: Assert SSL public key hash from private key matches public key hash from Cert
  assert:
    that: key_hash['results'][group_idx].stdout == cert_hash['results'][group_idx].stdout and not key_hash['results'][group_idx].stderr|length > 0
    fail_msg: >-
      "The sha256 value of the custom ssl key does not match the sha256 value of the custom certificate, indicating that the keys do no match
      and are incompatible.  Please review your keys and certs and confirm they are from the same source."
  when:
    - ssl_custom_certs|bool
    - lookup('vars', item + '_ssl_enabled', default=ssl_enabled)|bool
  tags:
    - validate
    - validate_ssl_keys_certs
  loop: "{{group_names}}"
  loop_control:
    index_var: group_idx

- name: Check the OS when using FIPS mode
  fail:
    msg: "FIPS mode is only supported on RedHat based OS"
  when:
    - fips_enabled | bool
    - ansible_os_family != "RedHat"
  tags: validate

- name: Check if FIPS is enabled on Local Host
  shell: sysctl crypto.fips_enabled
  delegate_to: localhost
  register: fips_output_localhost
  when:
    - fips_enabled | bool
    - ansible_os_family == "RedHat"
  tags: validate

- assert:
    that:
      - fips_output_localhost.stdout == "crypto.fips_enabled = 1"
    fail_msg: "FIPS is not enabled on your localhost, please enable fips on your Local Host."
  delegate_to: localhost
  when:
    - fips_enabled | bool
    - ansible_os_family == "RedHat"
  tags: validate

- name: Check if FIPS is enabled on Remote Host
  shell: sysctl crypto.fips_enabled
  register: fips_output_remotehost
  when:
    - fips_enabled | bool
    - ansible_os_family == "RedHat"
  tags: validate

- assert:
    that:
      - fips_output_remotehost.stdout == "crypto.fips_enabled = 1"
    fail_msg: "FIPS is not enabled on your remote host, please enable fips on your Remote Host."
  when:
    - fips_enabled | bool
    - ansible_os_family == "RedHat"
  tags: validate

- name: Set Jolokia Component Detection Facts
  set_fact:
    jolokia_component_enabled: >-
      {{
        ('kafka_controller' in group_names and kafka_controller_jolokia_enabled|bool) or
        ('kafka_broker' in group_names and kafka_broker_jolokia_enabled|bool) or
        ('kafka_connect' in group_names and kafka_connect_jolokia_enabled|bool) or
        ('kafka_connect_replicator' in group_names and kafka_connect_replicator_jolokia_enabled|bool) or
        ('ksql' in group_names and ksql_jolokia_enabled|bool) or
        ('zookeeper' in group_names and zookeeper_jolokia_enabled|bool) or
        ('kafka_rest' in group_names and kafka_rest_jolokia_enabled|bool) or
        ('schema_registry' in group_names and schema_registry_jolokia_enabled|bool)
      }}
    jolokia_component_name: >-
      {{
        'kafka_controller' if 'kafka_controller' in group_names else
        'kafka_broker' if 'kafka_broker' in group_names else
        'kafka_connect' if 'kafka_connect' in group_names else
        'kafka_connect_replicator' if 'kafka_connect_replicator' in group_names else
        'ksql' if 'ksql' in group_names else
        'zookeeper' if 'zookeeper' in group_names else
        'kafka_rest' if 'kafka_rest' in group_names else
        'schema_registry' if 'schema_registry' in group_names else
        'unknown'
      }}
  tags:
    - validate
    - validate_jolokia

- name: Validate Jolokia Access Control Configuration
  fail:
    msg: |
      Security requirement: When Jolokia is enabled and access control is enabled,
      you must set jolokia_access_control_custom_file_enabled to either:
      - true (provide your own secure XML file via jolokia_access_control_file_src_path)
      - false (use our secure default XML)
      This prevents lateral movement attacks via exposed Jolokia endpoints.
      Component: {{ jolokia_component_name }}
  when:
    - jolokia_component_enabled|bool
    - jolokia_access_control_enabled|bool
    - jolokia_access_control_custom_file_enabled is none
  tags:
    - validate
    - validate_jolokia

- name: Validate Custom Jolokia Access Control File Path
  fail:
    msg: |
      When jolokia_access_control_custom_file_enabled is true,
      you must provide jolokia_access_control_file_src_path with a valid file path.
      Component: {{ jolokia_component_name }}
  when:
    - jolokia_component_enabled|bool
    - jolokia_access_control_enabled|bool
    - jolokia_access_control_custom_file_enabled|bool
    - jolokia_access_control_file_src_path == ""
  tags:
    - validate
    - validate_jolokia

- name: Validate Custom Jolokia Access Control File Exists
  stat:
    path: "{{ jolokia_access_control_file_src_path }}"
  delegate_to: localhost
  register: jolokia_custom_file_check
  when:
    - jolokia_component_enabled|bool
    - jolokia_access_control_enabled|bool
    - jolokia_access_control_custom_file_enabled|bool
    - jolokia_access_control_file_src_path != ""
  tags:
    - validate
    - validate_jolokia

- name: Fail if Custom Jolokia Access Control File Does Not Exist
  fail:
    msg: |
      Custom Jolokia access control file not found at: {{ jolokia_access_control_file_src_path }}
      Please ensure the file exists on the Ansible controller.
      Component: {{ jolokia_component_name }}
  when:
    - jolokia_component_enabled|bool
    - jolokia_access_control_enabled|bool
    - jolokia_access_control_custom_file_enabled|bool
    - jolokia_access_control_file_src_path != ""
    - not jolokia_custom_file_check.stat.exists
  tags:
    - validate
    - validate_jolokia
