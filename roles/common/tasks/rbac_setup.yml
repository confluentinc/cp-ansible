---
- name: Get Authorization Token for Super User
  include_tasks: get_authorization_token.yml
  vars:
    oauth: "{{ oauth_enabled }}"
    oauth_user: "{{ oauth_superuser_client_id }}"
    oauth_password: "{{ oauth_superuser_client_password }}"
    ldap_user: "{{ mds_super_user }}"
    ldap_password: "{{ mds_super_user_password }}"
    mds_mtls_client_cert: "{{ mds_super_user_external_cert_path if delegated_to_localhost|bool else kafka_broker_cert_path }}"
    mds_mtls_client_key: "{{ mds_super_user_external_key_path if delegated_to_localhost|bool else kafka_broker_key_path }}"

- set_fact:
    send_client_cert: "{{ ssl_client_authentication in ['required', 'requested'] }}"
    erp_cert_path: "{{ mds_super_user_external_cert_path if delegated_to_localhost|bool else kafka_broker_cert_path }}"
    erp_key_path: "{{ mds_super_user_external_key_path if delegated_to_localhost|bool else kafka_broker_key_path }}"

- name: Get Kafka Cluster ID from Embedded Rest Proxy
  uri:
    url: "{{mds_http_protocol}}://{{ hostvars[groups['kafka_broker'][0]] | confluent.platform.resolve_hostname }}:{{mds_port}}/kafka/v3/clusters"
    method: GET
    validate_certs: false
    return_content: true
    status_code: 200
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ erp_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ erp_key_path if send_client_cert|bool else omit }}"
  register: cluster_id_query
  until: cluster_id_query.status == 200
  retries: "{{ mds_retries }}"
  delay: 10
  no_log: "{{mask_secrets|bool}}"
  when:
    - cluster_id_source | default('erp') == 'erp'

- name: Parse Kafka Cluster ID from json query
  set_fact:
    kafka_cluster_id: "{{ cluster_id_query.json.data[0].cluster_id }}"
  when: (cluster_id_source | default('erp') == 'erp') and not ansible_check_mode

- name: Get Kafka Cluster ID from Zookeeper
  shell: >
      {{ binary_base_path }}/bin/zookeeper-shell {{ groups['zookeeper'][0] }}:{{zookeeper_client_port}} \
      {% if zookeeper_ssl_enabled|bool %}-zk-tls-config-file {{ kafka_broker.zookeeper_tls_client_config_file \
      if kafka_broker_secrets_protection_enabled else kafka_broker.config_file }}{% endif %} \
      get /cluster/id | grep version
  register: zk_cluster_id_query
  when: cluster_id_source | default('erp') == 'zookeeper'
  delegate_to: "{{ inventory_hostname }}"

- set_fact:
    cluster_id_json: "{{ zk_cluster_id_query.stdout }}"
  when: cluster_id_source | default('erp') == 'zookeeper'
  delegate_to: "{{ inventory_hostname }}"

- name: Set kafka_cluster_id Variable
  set_fact:
    kafka_cluster_id: "{{ cluster_id_json.id }}"
  when: cluster_id_source | default('erp') == 'zookeeper'
  delegate_to: "{{ inventory_hostname }}"

- name: Create SSL Certificate Directory
  file:
    path: "{{ ssl_file_dir_final }}"
    state: directory
    mode: '755'
  tags:
    - privileged
    - filesystem
  # delegating task to actual node because the above task may be running on kafka broker due to delegation from components to get a super user token
  delegate_to: "{{ inventory_hostname }}"

- name: Check if MDS public pem file exists on Ansible Controller
  stat:
    path: "{{ token_services_public_pem_file }}"
  register: public_pem_file
  delegate_to: localhost
  vars:
    ansible_connection: local
    ansible_become: "{{ ansible_become_localhost }}"

- name: Debug
  ansible.builtin.debug:
    msg: WARNING - The file {{token_services_public_pem_file}} doesn't exist on the control node
  when: not public_pem_file.stat.exists|bool

- name: Copy in MDS Public Pem File
  copy:
    src: "{{token_services_public_pem_file}}"
    dest: "{{rbac_enabled_public_pem_path}}"
    mode: '640'
    owner: "{{user}}"
    group: "{{group}}"
  when:
    - not ( ssl_provided_keystore_and_truststore_remote_src|bool )
    - public_pem_file.stat.exists|bool
    - copy_certs | default(True)
  diff: "{{ not mask_sensitive_diff|bool }}"
  delegate_to: "{{ inventory_hostname }}"
