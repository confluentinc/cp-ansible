---
- name: Get Authorization Token for Super User
  import_role:
    name: common
    tasks_from: get_authorization_token.yml
  vars:
    oauth: "{{ oauth_enabled }}"
    oauth_user: "{{ oauth_superuser_client_id }}"
    oauth_password: "{{ oauth_superuser_client_password }}"
    ldap_user: "{{ mds_super_user }}"
    ldap_password: "{{ mds_super_user_password }}"
  when: rbac_enabled or oauth_enabled

- name: Check Kafka Connect Connector Topics
  assert:
    that: kafka_connect_connector_white_list != ""
    fail_msg: "Please provide Connector's Topics to produce/consume data in the inventory file."

- name: Grant Connect User ResourceOwner role on White List Topics
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{item}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  loop: "{{kafka_connect_connector_white_list.split(',')}}"

- name: Grant Connect User ResourceOwner role on resourceType Subject in Schema Registry Cluster
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}",
            "schema-registry-cluster": "{{schema_registry_final_properties['schema.registry.group.id']}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Subject",
            "name":"{{item}}-value",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  loop: "{{kafka_connect_connector_white_list.split(',')}}"
  when: ("'schema_registry' in groups")

- name: Grant Connect User DeveloperRead role to Consumer group
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/DeveloperRead/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Group",
            "name":"connect-",
            "patternType":"PREFIXED"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5

- name: Grant Connect User ResourceOwner role for the Connector
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}",
            "connect-cluster": "{{kafka_connect_final_properties['group.id']}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Connector",
            "name":"{{item.name}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  loop: "{{kafka_connect_connectors}}"
