---
- name: Decide Where to delegate task of getting superuser token
  set_fact:
    delegation_target: >-
      {%- if mds_ssl_client_authentication == 'none' -%}
        {{ inventory_hostname }}
      {%- elif external_mds_enabled|bool -%}
        localhost
      {%- else -%}
        {{ groups['kafka_broker'][0] }}
      {%- endif -%}

- name: Get Authorization Token for Super User
  import_role:
    name: common
    tasks_from: get_authorization_token.yml
  vars:
    oauth: "{{ oauth_enabled }}"
    oauth_user: "{{ oauth_superuser_client_id }}"
    oauth_password: "{{ oauth_superuser_client_password }}"
    ldap_user: "{{ mds_super_user }}"
    ldap_password: "{{ mds_super_user_password }}"
    mtls_client_cert: "{{ mds_super_user_external_cert_path if external_mds_enabled|bool else kafka_broker_cert_path }}"
    mtls_client_key: "{{ mds_super_user_external_key_path if external_mds_enabled|bool else kafka_broker_key_path }}"
    cert_auth_only_enabled: "{{ kafka_connect_mds_cert_auth_only|bool }}"
  when: rbac_enabled or oauth_enabled
  delegate_to: "{{ delegation_target }}"
  # For single cluster delegating this task to broker as in case of cert based token retrival only broker can get a super user token using its certs
  # For Centralized MDS other clusters can't delegate to MDS cluster as that cluster may not have permissions to ssh into MDS, thus delegate to localhost

- name: Check Kafka Connect Connector Topics
  assert:
    that: kafka_connect_connector_white_list != ""
    fail_msg: "Please provide Connector's Topics to produce/consume data in the inventory file."

- set_fact:
    send_client_cert: "{{ mds_ssl_client_authentication in ['required', 'requested'] }}"

- name: Grant Connect User ResourceOwner role on White List Topics
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{item}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  loop: "{{kafka_connect_connector_white_list.split(',')}}"

- name: Grant Connect User ResourceOwner role on resourceType Subject in Schema Registry Cluster
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}",
            "schema-registry-cluster": "{{schema_registry_final_properties['schema.registry.group.id']}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Subject",
            "name":"{{item}}-value",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  loop: "{{kafka_connect_connector_white_list.split(',')}}"
  when: ("'schema_registry' in groups")

- name: Grant Connect User DeveloperRead role to Consumer group
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/DeveloperRead/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Group",
            "name":"connect-",
            "patternType":"PREFIXED"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5

- name: Grant Connect User ResourceOwner role for the Connector
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/principals/User:{{connect_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_cluster_id}}",
            "connect-cluster": "{{kafka_connect_final_properties['group.id']}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Connector",
            "name":"{{item.name}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: connect_mds_result
  until: connect_mds_result.status == 204
  retries: "{{ mds_retries }}"
  delay: 5
  loop: "{{kafka_connect_connectors}}"
