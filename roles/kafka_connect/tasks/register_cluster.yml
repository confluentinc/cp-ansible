---
- name: Decide Where to delegate task of getting superuser token
  set_fact:
    delegation_target: >-
      {%- if external_mds_enabled | bool and (mds_ssl_client_authentication != 'none' or oauth_superuser_client_assertion_enabled | bool) -%}
        localhost
      {%- elif oauth_superuser_client_assertion_enabled | bool or mds_ssl_client_authentication != 'none' -%}
        {{ groups['kafka_broker'][0] }}
      {%- else -%}
        {{ inventory_hostname }}
      {%- endif -%}

- name: Get Kafka Cluster Id
  import_role:
    name: common
    tasks_from: rbac_setup.yml
  vars:
    copy_certs: false
    delegated_to_localhost: "{{ external_mds_enabled|bool }}"
    erp_client_cert_path: "{{ kafka_connect_cert_path }}"
    erp_client_key_path: "{{ kafka_connect_key_path }}"
    cert_auth_only_enabled_for_rbac: "{{ kafka_connect_mds_cert_auth_only|bool }}"
  delegate_to: "{{ delegation_target }}"
  # For single cluster delegating this task to broker as in case of cert based token retrival only broker can get a super user token using its certs
  # For Centralized MDS other clusters can't delegate to MDS cluster as that cluster may not have permissions to ssh into MDS, thus delegate to localhost

- name: Lookup cluster hosts
  vars:
    - connect_cluster_workers: []
  set_fact:
    connect_cluster_workers: "{{ connect_cluster_workers + [ { 'host': hostvars[item]['ansible_host'], 'port': kafka_connect_rest_port } ] }}"
  loop: "{{ groups['kafka_connect'] }}"

- name: Register Kafka Connect Cluster
  vars:
    cluster_register_request:
      - clusterName: "{{ kafka_connect_cluster_name }}"
        protocol: "{{ kafka_connect_http_protocol | upper }}"
        scope:
          kafka-cluster: "{{ kafka_cluster_id }}"
          connect-cluster: "{{ kafka_connect_final_properties['group.id'] }}"
        hosts: "{{ connect_cluster_workers }}"
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/registry/clusters"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: "{{ cluster_register_request | to_json }}"
    status_code: 204
  register: output
  until: output.status == 204
  retries: "{{ mds_retries }}"
  delay: 10
