---
- name: Extract Connect Principal from cert
  import_role:
    name: common
    tasks_from: cert_principal_extract.yml
  vars:
    keystore_path: "{{kafka_connect_keystore_path}}"
    keystore_storepass: "{{kafka_connect_keystore_storepass}}"
    pm_rules: "{{kafka_connect_final_properties.get('auth.ssl.principal.mapping.rules','DEFAULT')}}"
  when:
    - rbac_enabled|bool
    - mds_ssl_client_authentication != 'none'
    - not ansible_check_mode

- name: Add Role Bindings for Connect mTLS User
  include_tasks: rbac_connectors.yml
  vars:
    connect_user: "{{ ks_extracted_principal | urlencode }}"
  when:
    - rbac_enabled|bool
    - mds_ssl_client_authentication != 'none'
    - not ansible_check_mode

- name: Add Role Bindings for Connect OAuth
  include_tasks: rbac_connectors.yml
  vars:
    connect_user: "{{kafka_connect_oauth_principal}}"
  when:
    - rbac_enabled|bool
    - oauth_enabled|bool
    - not ansible_check_mode

- name: Add Role Bindings for Connect Ldap
  include_tasks: rbac_connectors.yml
  vars:
    connect_user: "{{kafka_connect_ldap_user}}"
  when:
    - rbac_enabled|bool
    - "'ldap' in auth_mode"
    - not ansible_check_mode

- set_fact:
    certs_chain: "{{ssl_file_dir_final}}/{{ kafka_connect_service_name if kafka_connect_service_name != kafka_connect_default_service_name else 'kafka_connect' }}.chain"

- name: Get Authorization Token for Connect User
  import_role:
    name: common
    tasks_from: get_authorization_token.yml
  vars:
    oauth: "{{ kafka_connect_oauth_enabled }}"
    oauth_user: "{{ kafka_connect_oauth_user }}"
    oauth_password: "{{ kafka_connect_oauth_password }}"
    ldap_user: "{{ kafka_connect_ldap_user }}"
    ldap_password: "{{ kafka_connect_ldap_password }}"
    mtls_client_cert: "{{ kafka_connect_cert_path }}"
    mtls_client_key: "{{ kafka_connect_key_path }}"
    cert_auth_only_enabled: "{{ kafka_connect_mds_cert_auth_only|bool }}"
    oauth_client_assertion_enabled: "{{ kafka_connect_oauth_client_assertion_enabled }}"
    oauth_client_assertion_issuer: "{{ kafka_connect_oauth_client_assertion_issuer }}"
    oauth_client_assertion_sub: "{{ kafka_connect_oauth_client_assertion_sub }}"
    oauth_client_assertion_audience: "{{ kafka_connect_oauth_client_assertion_audience }}"
    oauth_client_assertion_private_key_file: "{{ kafka_connect_oauth_client_assertion_private_key_file_dest_path }}"
    oauth_client_assertion_private_key_passphrase: "{{ kafka_connect_oauth_client_assertion_private_key_passphrase }}"
    oauth_client_assertion_file: "{{ kafka_connect_third_party_oauth_client_assertion_config.kafka_connect }}"
    oauth_client_assertion_template_file: "{{ kafka_connect_oauth_client_assertion_template_file_dest_path }}"
  when: rbac_enabled or kafka_connect_oauth_enabled

- name: Register connector configs and remove deleted connectors for a connect cluster
  confluent.platform.kafka_connectors:
    connect_url: "{{kafka_connect_http_protocol}}://{{ hostvars[inventory_hostname] | confluent.platform.resolve_and_format_hostname }}:{{kafka_connect_rest_port}}/connectors"
    active_connectors: "{{ kafka_connect_connectors }}"
    timeout: "{{ kafka_connect_deploy_connector_timeout }}"
    token: "{% if rbac_enabled or kafka_connect_oauth_enabled %}{{ authorization_token }}{% else %}{{none}}{% endif %}"
    client_cert: "{% if (ssl_provided_keystore_and_truststore and ssl_mutual_auth_enabled) %}{{kafka_connect_cert_path}}{% elif ssl_mutual_auth_enabled %}{{certs_chain}}{% else %}{{none}}{% endif %}"
    client_key: "{% if ssl_mutual_auth_enabled %}{{kafka_connect_key_path}}{% else %}{{none}}{% endif %}"
  when:
    - inventory_hostname == ansible_play_hosts_all[0] # solves serial mode issue
