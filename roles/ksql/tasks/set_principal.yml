---
- name: Set Principal - Sasl Scram
  set_fact:
    ksql_log4j_principal: "{{ sasl_scram_users_final.ksql.principal }}"
  when: "'SCRAM-SHA-512' in (kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | confluent.platform.normalize_sasl_protocol)"

- name: Set Principal - Sasl Scram 256
  set_fact:
    ksql_log4j_principal: "{{ sasl_scram256_users_final.ksql.principal }}"
  when: "'SCRAM-SHA-256' in (kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | confluent.platform.normalize_sasl_protocol)"

- name: Set Principal - Sasl Plain
  set_fact:
    ksql_log4j_principal: "{{ sasl_plain_users_final.ksql.principal }}"
  when: "'PLAIN' in (kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | confluent.platform.normalize_sasl_protocol)"

- name: Set Principal - Sasl Kerberos
  set_fact:
    ksql_log4j_principal: "{{ ksql_kerberos_principal }}"
  when: "'GSSAPI' in (kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | confluent.platform.normalize_sasl_protocol)"

- name: Extract Common Name from Keystore - SSL Mutual Auth
  # Examine the keystore
  # Search lines with Entry type: "PrivateKeyEntry" and return that line and all after, ca cert is of type "trustedCertEntry"
  # Search for first "Owner" line
  # Extract DNAME from line
  # Remove spaces after commas
  # Extract just the CN
  # Extract just the principal without any other formatting
  # We only use the CN as many LDAP implementations cannot handle the full DN as a username
  shell: |
    keytool -list -keystore {{ksql_keystore_path}} \
        -storepass {{ksql_keystore_storepass}} -v \
        | grep PrivateKeyEntry -A1000 \
        | grep Owner -m1 \
        | cut -d ":" -f2 \
        | cut -c2- \
        | sed 's/^.*CN=//' \
        | cut -d "," -f1
  register: distinguished_name_from_keystore
  when:
    - "'none' in (kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | confluent.platform.normalize_sasl_protocol)"
    - kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool
    - kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool
  no_log: "{{ mask_sensitive_logs|bool }}"

- name: Set Principal - SSL Mutual Auth
  set_fact:
    ksql_log4j_principal: "{{ distinguished_name_from_keystore.stdout }}"
  when:
    - "'none' in (kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | confluent.platform.normalize_sasl_protocol)"
    - kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool
    - kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool
