---
# health check for kafka controller
- name: Check Kafka Metadata Quorum
  shell: |
    {{ binary_base_path }}/bin/kafka-metadata-quorum --bootstrap-controller {{inventory_hostname}}:{{kafka_controller_port}} \
      --command-config {{kafka_controller.client_config_file}} describe --replication
  environment:
    KAFKA_OPTS: "-Xlog:all=error -XX:+IgnoreUnrecognizedVMOptions {% if kerberos_client_config_file_dest != '/etc/krb5.conf' %}-Djava.security.krb5.conf={{kerberos_client_config_file_dest}}{% endif %}"
  ignore_errors: false
  changed_when: false
  check_mode: false

#Registers LEO of controllers only if Metadata Quorum passed in the above task
- name: Register LogEndOffset
  shell: |
    {{ binary_base_path }}/bin/kafka-metadata-quorum --bootstrap-controller {{inventory_hostname}}:{{kafka_controller_port}} \
      --command-config {{kafka_controller.client_config_file}} describe --replication |  grep -v Observer | awk '{print $2}'
  environment:
    KAFKA_OPTS: "-Xlog:all=error -XX:+IgnoreUnrecognizedVMOptions {% if kerberos_client_config_file_dest != '/etc/krb5.conf' %}-Djava.security.krb5.conf={{kerberos_client_config_file_dest}}{% endif %}"
  register: leo
  ignore_errors: false
  changed_when: false
  check_mode: false

- name: Check LogEndOffset values
  assert:
    that:
      - "{{ item|int > 0 and leo.stdout_lines[1:]|max|int - item|int < 1000 }}"
    fail_msg: "UnreachableQuorumMember or Found at least one quorum voter with an offset {{ item }}, while the primary controller was at offset {{ leo.stdout_lines[1:]|max}}
               The max allowed offset lag is 1000"
  loop: "{{ leo.stdout_lines[1:] }}"
  ignore_errors: false
  changed_when: false
  check_mode: false
