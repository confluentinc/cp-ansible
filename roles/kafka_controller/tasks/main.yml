---
- include_role:
    name: common
  when: not common_role_completed|bool
  tags: common

- name: Gather OS Facts
  setup:
    # Only gathers items in list, filters out the rest
    filter: "{{item}}"
    gather_subset:
      - '!all'
  loop:
    - ansible_os_family
    - ansible_fqdn
    - ansible_distribution

# datadir is not supported way to provide data directories for kafka controllers
- name: Assert that datadir is not present in the inventory
  assert:
    that: >
      'kafka_controller' not in hostvars[item] or
      hostvars[item].kafka_controller == None or
      'datadir' not in hostvars[item].kafka_controller
    fail_msg: |
      "Providing 'datadir' in inventory file is no more supported way to configure data directories for kafka controllers."
      "Please use 'log.dirs' under kafka_controller_custom_properties."
  loop: "{{ groups['kafka_controller'] }}"

# To avoid a catastrophic user error where root directory permissions get recursively changed
- name: Assert log.dirs Property not Misconfigured
  assert:
    that:
      - kafka_controller_final_properties['log.dirs'] != "/" and not ',' in kafka_controller_final_properties['log.dirs']
    fail_msg: "If you have log.dirs in kafka_controller_custom_properties, make sure you only provide one directory."

- name: Stop Service and Remove Packages on Version Change
  include_role:
    name: common
    tasks_from: remove_packages.yml
  vars:
    service_name: "{{ kafka_controller_service_name }}"
  when: installation_method == "package"
  tags: package

- name: Install the Kafka Controller Packages
  yum:
    name: "{{ kafka_controller_packages | product([confluent_package_redhat_suffix]) | map('join') | list }}"
    state: latest
  register: install_kafka_package_result
  until: install_kafka_package_result is success  or ansible_check_mode
  retries: 5
  delay: 90
  loop: "{{kafka_controller_packages}}"
  when:
    - ansible_os_family == "RedHat"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: package
  notify: restart Kafka Controller

- name: Install the Kafka Controller Packages
  apt:
    name: "{{ kafka_controller_packages | product([confluent_package_debian_suffix]) | map('join') | list }}"
  register: install_kafka_package_result
  until: install_kafka_package_result is success  or ansible_check_mode
  retries: 5
  delay: 90
  loop: "{{kafka_controller_packages}}"
  when:
    - ansible_os_family == "Debian"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: package
  notify: restart Kafka Controller

- name: Kafka Controller group
  group:
    name: "{{kafka_controller_group}}"
  tags:
    - privileged

- name: Check if Kafka Controller User Exists
  # Create user task must be skipped for non-linux users
  getent:
    database: passwd
    key: "{{kafka_controller_user}}"
  failed_when: false

- name: Create Kafka Controller user
  user:
    name: "{{kafka_controller_user}}"
    comment: Confluent Kafka
    system: true
    shell: "{{user_login_shell}}"
    group: "{{kafka_controller_group}}"
  when: (getent_passwd|default({}))[kafka_controller_user] is not defined
  tags:
    - privileged

- name: Copy Kafka broker's Service to Create kafka Controller's service
  copy:
    src: "{{ ((binary_base_path, 'lib/systemd/system') | path_join if installation_method=='archive' else systemd_base_dir, kafka_broker.systemd_file|basename) | path_join }}"
    remote_src: true
    dest: "{{kafka_controller.systemd_file}}"
    mode: '644'
    force: true
  tags:
    - systemd
    - privileged

- include_role:
    name: ssl
  vars:
    truststore_storepass: "{{kafka_controller_truststore_storepass}}"
    truststore_path: "{{kafka_controller_pkcs12_truststore_path}}"
    keystore_path: "{{kafka_controller_pkcs12_keystore_path}}"
    keystore_storepass: "{{kafka_controller_keystore_storepass}}"
    keystore_keypass: "{{kafka_controller_keystore_keypass}}"
    service_name: kafka_controller
    user: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
    hostnames: "{{ ([inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host|default(omit), hostname|default(omit)] + kafka_controller_listeners | confluent.platform.get_hostnames(inventory_hostname)) | unique }}"
    ca_cert_path: "{{kafka_controller_ca_cert_path}}"
    cert_path: "{{kafka_controller_cert_path}}"
    key_path: "{{kafka_controller_key_path}}"
    export_certs: "{{kafka_controller_export_certs}}"
    create_bouncy_castle_keystore: "{{fips_enabled}}"
    bcfks_truststore_path: "{{kafka_controller_bcfks_truststore_path}}"
    bcfks_keystore_path: "{{kafka_controller_bcfks_keystore_path}}"
  when: >
    kafka_controller_listeners | confluent.platform.ssl_required(kafka_controller_ssl_enabled) or
    mds_broker_listener.ssl_enabled|bool or
    mds_tls_enabled|bool
  tags: ssl

- include_tasks: rbac.yml
  when: rbac_enabled|bool

- name: Configure Kerberos
  include_role:
    name: kerberos
  vars:
    kerberos_group: "{{kafka_controller_group}}"
    kerberos_user: "{{kafka_controller_user}}"
    kerberos_keytab_path: "{{kafka_controller_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{kafka_controller_keytab_path}}"
    kerberos_handler: "restart Kafka Controller"
  when:
    - "'GSSAPI' in kafka_controller_sasl_enabled_mechanisms or mds_broker_listener.sasl_protocol =='kerberos'"

- name: Copy Custom Kafka Files
  include_role:
    name: common
    tasks_from: copy_files.yml
  vars:
    copy_files: "{{kafka_controller_copy_files}}"
    user: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
  when: kafka_controller_copy_files | length > 0
  tags:
    - configuration

- name: Set Permissions on /var/lib/controller
  file:
    path: /var/lib/controller/
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
    state: directory
    mode: '750'
  tags:
    - privileged
    - filesystem

- name: Set Permissions on Data Dirs
  file:
    path: "{{kafka_controller_final_properties['log.dirs']}}"
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
    state: directory
    mode: '750'
  tags:
    - filesystem
    - privileged

- name: Set Permissions on Data Dir files  # noqa deprecated-command-syntax
  # Have to use command + chown instead of the Ansible file module here as it seems
  # like the file module can't handle files modified/deleted while running. This task
  # can fail on a very active cluster. See https://github.com/confluentinc/cp-ansible/pull/903 for details.
  command: chown -R {{ kafka_controller_user }}:{{ kafka_controller_group }} {{ kafka_controller_final_properties['log.dirs'] }}
  changed_when: false
  tags:
    - filesystem

- name: Create Kafka Controller Config directory
  file:
    path: "{{ kafka_controller.config_file | dirname }}"
    state: directory
    mode: '750'
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
  tags:
    - filesystem
    - privileged


- name: Create Kafka Controller Config
  template:
    src: server.properties.j2
    dest: "{{kafka_controller.config_file}}"
    mode: '640'
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
  notify: restart Kafka Controller
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - configuration
    - privileged

- name: Create Kafka Controller Client Config
  template:
    src: client.properties.j2
    dest: "{{kafka_controller.client_config_file}}"
    mode: '640'
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - configuration
    - privileged

- name: Include Kraft Cluster Data
  include_tasks: get_meta_properties.yml

- name: Create Logs Directory
  file:
    path: "{{kafka_controller_log_dir}}"
    state: directory
    group: "{{kafka_controller_group}}"
    owner: "{{kafka_controller_user}}"
    mode: '770'
  tags:
    - filesystem
    - log
    - privileged

- name: Update Kafka log4j Config for Log Cleanup
  include_role:
    name: common
    tasks_from: update_log4j.yml
  vars:
    log4j_file: "{{kafka_controller.log4j_file}}"
    log4j_max_backup_index: "{{kafka_controller_max_log_files}}"
    log4j_max_file_size: "{{kafka_controller_log_file_size}}"
    log4j_root_logger: "{{kafka_controller_log4j_root_logger}}"
    handler: "restart Kafka Controller"
  when: kafka_controller_custom_log4j|bool
  tags:
    - configuration
    - log

- name: Set Permissions on Log4j Conf
  file:
    path: "{{kafka_controller.log4j_file}}"
    group: "{{kafka_controller_group}}"
    owner: "{{kafka_controller_user}}"
    mode: '640'
  tags:
    - filesystem
    - log
    - privileged

- name: Create logredactor rule file directory
  file:
    path: "{{ logredactor_rule_path | dirname }}"
    state: directory
    mode: '755'
  when: (kafka_controller_custom_log4j|bool) and (logredactor_enabled|bool) and (logredactor_rule_url == '')
  tags:
    - log
    - privileged

- name: Copy logredactor rule file from control node to component node
  copy:
    src: "{{ logredactor_rule_path_local }}"
    dest: "{{ logredactor_rule_path }}"
    mode: '644'
  when: (kafka_controller_custom_log4j|bool) and (logredactor_enabled|bool) and (logredactor_rule_url == '')
  tags:
    - log
    - privileged

- name: Configure logredactor
  include_role:
    name: common
    tasks_from: configure_logredactor.yml
  vars:
    log4j_file: "{{kafka_controller.log4j_file}}"
    logredactor_rule_var: "{% if logredactor_rule_url == '' %}{{logredactor_rule_path}}{% else %}{{logredactor_rule_url}}{% endif %}"
    logredactor_policy_refresh_interval_var: "{{logredactor_policy_refresh_interval}}"
  with_items: "{{ kafka_controller_logredactor_logger_specs_list }}"
  when: (kafka_controller_custom_log4j|bool) and (logredactor_enabled|bool)
  tags:
    - log

- name: Restart kafka Controller
  ansible.builtin.debug:
    msg: "restarting kafka controller"
  notify: restart Kafka Controller
  when: (kafka_controller_custom_log4j|bool) and (logredactor_enabled|bool) and (not kafka_controller_skip_restarts|bool)
  tags:
    - log

- name: Create Kafka Controller Jolokia Config
  template:
    src: kafka_jolokia.properties.j2
    dest: "{{kafka_controller_jolokia_config}}"
    mode: '640'
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
  when: kafka_controller_jolokia_enabled|bool
  notify: restart Kafka Controller
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - configuration
    - privileged

- name: Create Kafka Controller Jaas Config
  template:
    src: kafka_server_jaas.conf.j2
    dest: "{{kafka_controller.jaas_file}}"
    mode: '640'
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
  when:
    - "'GSSAPI' in kafka_controller_sasl_enabled_mechanisms"
  notify: restart Kafka Controller
  tags:
    - configuration
    - privileged

- name: Deploy JMX Exporter Config File
  template:
    src: "{{kafka_controller_jmxexporter_config_source_path}}"
    dest: "{{kafka_controller_jmxexporter_config_path}}"
    mode: '640'
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
  when: kafka_controller_jmxexporter_enabled|bool
  tags:
    - configuration
    - privileged

- name: Create Service Override Directory
  file:
    path: "{{kafka_controller.systemd_override | dirname }}"
    owner: "{{kafka_controller_user}}"
    group: "{{kafka_controller_group}}"
    state: directory
    mode: '640'
  tags:
    - systemd
    - privileged

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{ kafka_controller.systemd_override }}"
    mode: '640'
    owner: root
    group: root
  notify: restart Kafka Controller
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - systemd
    - privileged

- name: Create sysctl directory on Debian distributions
  file:
    path: /usr/lib/sysctl.d
    state: directory
    mode: '755'
  when: ansible_distribution == "Debian"
  tags:
    - sysctl
    - privileged

- name: Tune virtual memory settings
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: "{{ kafka_controller_sysctl_file }}"
    reload: true
  with_dict: "{{ kafka_controller_sysctl }}"
  tags:
    - sysctl
    - privileged

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart Kafka Controller
  when: certs_updated|bool

# We need to start MDS here to proceed with secrets protection
- meta: flush_handlers

# secrets protection for controller works only when remote MDS is already up
- name: Encrypt secrets
  include_tasks: secrets_protection.yml
  when:
    - kafka_controller_secrets_protection_enabled|bool or kafka_controller_client_secrets_protection_enabled|bool
    - ((rbac_enabled|bool and external_mds_enabled|bool) or confluent_cli_version is version('3.0.0', '>='))

- meta: flush_handlers

- name: Kafka Started
  systemd:
    name: "{{kafka_controller_service_name}}"
    enabled: true
    state: started
  tags:
    - systemd

- name: Wait for Controller health checks to complete
  include_tasks: health_check.yml
  when:
    - confluent_server_enabled|bool # metadata-quorum doesn't work on community kafka
    - kafka_controller_health_checks_enabled|bool
    - not ansible_check_mode
  tags: health_check

- name: Delete temporary keys/certs when keystore and trustore is provided
  file:
    path: "{{item}}"
    state: absent
  loop:
    - "{{kafka_controller_ca_cert_path}}"
    - "{{kafka_controller_cert_path}}"
    - "{{kafka_controller_key_path}}"
  when:
    - (ssl_provided_keystore_and_truststore | bool)
    - not ( ( kafka_controller_secrets_protection_enabled|bool or kafka_controller_client_secrets_protection_enabled|bool) and (rbac_enabled|bool and not external_mds_enabled|bool) )
