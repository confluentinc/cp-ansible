---
- name: Decide Where to delegate task of getting superuser token
  set_fact:
    delegation_target: >-
      {%- if mds_ssl_client_authentication == 'none' -%}
        {{ inventory_hostname }}
      {%- elif external_mds_enabled|bool -%}
        localhost
      {%- else -%}
        {{ groups['kafka_broker'][0] }}
      {%- endif -%}

- name: Get Kafka Cluster Id
  import_role:
    name: common
    tasks_from: rbac_setup.yml
  vars:
    copy_certs: false
    delegated_to_localhost: "{{ external_mds_enabled|bool }}"
    erp_client_cert_path: "{{ schema_registry_cert_path }}"
    erp_client_key_path: "{{ schema_registry_key_path }}"
  delegate_to: "{{ delegation_target }}"
  # For single cluster delegating this task to broker as in case of cert based token retrival only broker can get a super user token using its certs
  # For Centralized MDS other clusters can't delegate to MDS cluster as that cluster may not have permissions to ssh into MDS, thus delegate to localhost

- set_fact:
    send_client_cert: "{{ mds_ssl_client_authentication in ['required', 'requested'] }}"

- name: Register Schema Registry Cluster
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/registry/clusters"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ schema_registry_cert_path if send_client_cert else omit }}"
    client_key: "{{schema_registry_key_path if send_client_cert else omit}}"
    body_format: json
    body: >
      [
          {
              "clusterName": "{{schema_registry_cluster_name}}",
              "scope": {
                  "clusters": {
                      "kafka-cluster": "{{kafka_cluster_id}}",
                      "schema-registry-cluster": "{{schema_registry_final_properties['schema.registry.group.id']}}"
                  }
              },
              "hosts": [ {% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{ "host": "{{host}}", "port": {{schema_registry_listener_port}} }{% endfor %}
              ],
              "protocol": '{{schema_registry_http_protocol | upper}}'
          }
      ]
    status_code: 204
  run_once: true
  no_log: "{{mask_secrets|bool}}"
  register: output
  until: output.status == 204
  retries: "{{ mds_retries }}"
  delay: 10
