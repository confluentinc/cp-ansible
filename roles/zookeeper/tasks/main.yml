---
- include_role:
    name: common
  when: not common_role_completed|bool
  tags: common

- name: Gather OS Facts
  setup:
    # Only gathers items in list, filters out the rest
    filter: "{{item}}"
    gather_subset:
      - '!all'
  loop:
    - ansible_os_family
    - ansible_fqdn

- name: Stop Service and Remove Packages on Version Change
  include_role:
    name: common
    tasks_from: remove_packages.yml
  vars:
    service_name: "{{ zookeeper_service_name }}"
  when: installation_method == "package"
  tags:
    - package
    - cp_package

# Install Packages
- name: Install the Zookeeper Packages
  yum:
    name: "{{ zookeeper_packages | product([confluent_package_redhat_suffix]) | map('join') | list }}"
    state: latest
  register: install_zookeeper_package_result
  until: install_zookeeper_package_result is success or ansible_check_mode
  retries: 5
  delay: 90
  when:
    - ansible_os_family == "RedHat"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - package
    - cp_package
  notify: restart zookeeper

- name: Install the Zookeeper Packages
  apt:
    name: "{{ zookeeper_packages | product([confluent_package_debian_suffix]) | map('join') | list }}"
  register: install_zookeeper_package_result
  until: install_zookeeper_package_result is success or ansible_check_mode
  retries: 5
  delay: 90
  when:
    - ansible_os_family == "Debian"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - package
    - cp_package
  notify: restart zookeeper

- name: Create Zookeeper Group
  group:
    name: "{{zookeeper_group}}"
  tags:
    - privileged

- name: Check if Zookeeper User Exists
  # Create user task must be skipped for non-linux users
  getent:
    database: passwd
    key: "{{zookeeper_user}}"
  failed_when: false

- name: Create Zookeeper User
  user:
    name: "{{zookeeper_user}}"
    comment: Confluent Kafka
    system: true
    shell: "{{user_login_shell}}"
    group: "{{zookeeper_group}}"
  when: (getent_passwd|default({}))[zookeeper_user] is not defined
  tags:
    - privileged

# Archive File deployments need to create SystemD service units
# Copy the tarball's systemd service to the system
- name: Copy Zookeeper Service from archive file to system
  copy:
    src: "{{binary_base_path}}/lib/systemd/system/{{zookeeper.systemd_file|basename}}"
    remote_src: true
    dest: "{{zookeeper.systemd_file}}"
    mode: '644'
    force: true
  when: installation_method == "archive"
  tags:
    - systemd

- include_role:
    name: ssl
  vars:
    truststore_storepass: "{{zookeeper_truststore_storepass}}"
    truststore_path: "{{zookeeper_truststore_path}}"
    keystore_path: "{{zookeeper_keystore_path}}"
    keystore_storepass: "{{zookeeper_keystore_storepass}}"
    keystore_keypass: "{{zookeeper_keystore_keypass}}"
    service_name: zookeeper
    user: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host|default(omit), hostname|default(omit)] | unique }}"
    ca_cert_path: "{{zookeeper_ca_cert_path}}"
    cert_path: "{{zookeeper_cert_path}}"
    key_path: "{{zookeeper_key_path}}"
    export_certs: "{{zookeeper_export_certs}}"
  when: zookeeper_ssl_enabled|bool
  tags: ssl

- name: Configure Kerberos
  include_role:
    name: kerberos
  vars:
    kerberos_group: "{{zookeeper_group}}"
    kerberos_user: "{{zookeeper_user}}"
    kerberos_keytab_path: "{{zookeeper_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{zookeeper_keytab_path}}"
    kerberos_handler: "restart zookeeper"
  when: zookeeper_client_authentication_type == 'kerberos'

- name: Copy Custom Zookeeper Files
  include_role:
    name: common
    tasks_from: copy_files.yml
  vars:
    copy_files: "{{zookeeper_copy_files}}"
    user: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  when: zookeeper_copy_files | length > 0
  tags:
    - configuration

- name: Set Zookeeper Data Dir Ownership
  file:
    path: "{{zookeeper_final_properties.dataDir}}"
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
    state: directory
    mode: '750'
  tags:
    - filesystem

- name: Set Ownership of Data Dir Files
  file:
    path: "{{zookeeper_final_properties.dataDir}}"
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
    recurse: true
  tags:
    - filesystem

- name: Set Zookeeper Transaction Log Data Dir Ownership
  file:
    path: "{{zookeeper_final_properties.dataLogDir}}"
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
    state: directory
    mode: '750'
  when: zookeeper_final_properties.dataLogDir is defined
  tags:
    - filesystem

- name: Set Ownership of Transaction Log Data Dir Files
  file:
    path: "{{zookeeper_final_properties.dataLogDir}}"
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
    recurse: true
  when: zookeeper_final_properties.dataLogDir is defined
  tags:
    - filesystem

- name: Create Zookeeper myid File
  template:
    src: myid.j2
    dest: "{{zookeeper_final_properties.dataDir}}/myid"
    mode: '640'
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  tags:
    - configuration

- name: Create Zookeeper Config directory
  file:
    path: "{{ zookeeper.config_file | dirname }}"
    state: directory
    mode: '750'
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  tags:
    - filesystem

- name: Create Zookeeper Config
  template:
    src: zookeeper.properties.j2
    dest: "{{zookeeper.config_file}}"
    mode: '640'
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  register: zookeeper_config
  notify: restart zookeeper
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - configuration

- name: Create Log Directory
  file:
    path: "{{zookeeper_log_dir}}"
    state: directory
    group: "{{zookeeper_group}}"
    owner: "{{zookeeper_user}}"
    mode: '770'
  tags:
    - filesystem
    - log

- name: Create log4j Directory
  file:
    path: "{{zookeeper.log4j_file | dirname}}"
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
    state: directory
    mode: '750'
  tags:
    - filesystem
    - log

- name: Create Zookeeper log4j config
  template:
    src: zookeeper_log4j.properties.j2
    dest: "{{zookeeper.log4j_file}}"
    mode: '640'
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  when: zookeeper_custom_log4j|bool
  notify: restart zookeeper
  tags:
    - configuration
    - log

- name: Create logredactor rule file directory
  file:
    path: "{{ logredactor_rule_path | dirname }}"
    state: directory
    mode: '755'
  when: (zookeeper_custom_log4j|bool) and (logredactor_enabled|bool) and (logredactor_rule_url == '')
  tags:
    - log

- name: Copy logredactor rule file from control node to component node
  copy:
    src: "{{ logredactor_rule_path_local }}"
    dest: "{{ logredactor_rule_path }}"
    mode: '644'
  when: (zookeeper_custom_log4j|bool) and (logredactor_enabled|bool) and (logredactor_rule_url == '')
  tags:
    - log

- name: Configure logredactor
  include_role:
    name: common
    tasks_from: configure_logredactor.yml
  vars:
    log4j_file: "{{zookeeper.log4j_file}}"
    logredactor_rule_var: "{% if logredactor_rule_url == '' %}{{logredactor_rule_path}}{% else %}{{logredactor_rule_url}}{% endif %}"
    logredactor_policy_refresh_interval_var: "{{logredactor_policy_refresh_interval}}"
  with_items: "{{ zookeeper_logredactor_logger_specs_list }}"
  when: (zookeeper_custom_log4j|bool) and (logredactor_enabled|bool)
  tags:
    - log

- name: Restart zookeeper
  ansible.builtin.debug:
    msg: "restarting zookeeper"
  notify: restart zookeeper
  when: (zookeeper_custom_log4j|bool) and (logredactor_enabled|bool) and (not zookeeper_skip_restarts|default(false)|bool)
  tags:
    - log

- name: Create Zookeeper Jolokia Config
  template:
    src: zookeeper_jolokia.properties.j2
    dest: "{{zookeeper_jolokia_config}}"
    mode: '640'
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  when: zookeeper_jolokia_enabled|bool
  notify: restart zookeeper
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - configuration

- name: Create Zookeeper Jaas config
  template:
    src: zookeeper_jaas.conf.j2
    dest: "{{zookeeper.jaas_file}}"
    mode: '640'
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  when: zookeeper_client_authentication_type in ['kerberos', 'digest'] or zookeeper_quorum_authentication_type in ['digest', 'digest_over_tls']
  notify: restart zookeeper
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - configuration

- name: Deploy JMX Exporter Config File
  copy:
    src: "{{zookeeper_jmxexporter_config_source_path}}"
    dest: "{{zookeeper_jmxexporter_config_path}}"
    mode: '640'
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
  when: zookeeper_jmxexporter_enabled|bool
  tags:
    - configuration

- name: Create Service Override Directory
  file:
    path: "{{zookeeper.systemd_override | dirname}}"
    owner: "{{zookeeper_user}}"
    group: "{{zookeeper_group}}"
    state: directory
    mode: '640'
  tags:
    - systemd
    - privileged

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{zookeeper.systemd_override}}"
    mode: '640'
    owner: root
    group: root
  notify: restart zookeeper
  diff: "{{ not mask_sensitive_diff|bool }}"
  tags:
    - systemd
    - privileged

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart zookeeper
  when: certs_updated|bool

- meta: flush_handlers

- name: Zookeeper Service Started
  systemd:
    name: "{{zookeeper_service_name}}"
    enabled: true
    state: started
  tags:
    - systemd

- name: Zookeeper Health Check
  include_tasks: health_check.yml
  when:
    - zookeeper_health_checks_enabled|bool
    - not ansible_check_mode
  tags: health_check

- name: Delete temporary keys/certs when keystore and trustore is provided
  file:
    path: "{{item}}"
    state: absent
  loop:
    - "{{zookeeper_ca_cert_path}}"
    - "{{zookeeper_cert_path}}"
    - "{{zookeeper_key_path}}"
  when: (ssl_provided_keystore_and_truststore | bool)
