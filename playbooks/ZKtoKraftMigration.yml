---
- import_playbook: migration_precheck.yml
  tags: migrate_to_dual_write

- import_playbook: kafka_controller.yml
  tags: migrate_to_dual_write

#todo:should check if we can hit the jolokia endppint or not, if no the fail and print the error message, continue on yes

- name: Validate Jolokia Endpoint Access
  hosts: kafka_controller
  gather_facts: false
  tasks:
    - import_role:
        name: variables

    - name: Test Jolokia Endpoint Access (No Auth)
      uri:
        url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/list"
        validate_certs: false
        return_content: true
        status_code: 200
      register: jolokia_no_auth_result
      failed_when: false

    - name: Test Jolokia Endpoint Access (Basic Auth)
      uri:
        url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/list"
        validate_certs: false
        return_content: true
        force_basic_auth: true
        url_username: "{{ jolokia_user }}"
        url_password: "{{ jolokia_password }}"
        status_code: 200
      register: jolokia_basic_auth_result
      failed_when: false

    - name: Check if Either Auth Method Succeeded
      set_fact:
        jolokia_accessible: >-
          {{
            (jolokia_no_auth_result.status is defined and jolokia_no_auth_result.status == 200) or
            (jolokia_basic_auth_result.status is defined and jolokia_basic_auth_result.status == 200)
          }}

    - name: Fail if Both Auth Methods Failed
      fail:
        msg: |
          ERROR: Unable to access Jolokia endpoint with either authentication method!

          Endpoint: {{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/list

          No Auth Result: {{ jolokia_no_auth_result.status | default('Connection Failed') }}
          Basic Auth Result: {{ jolokia_basic_auth_result.status | default('Connection Failed') }}

          Possible causes:
          1. Jolokia access control XML file is blocking access
          2. Jolokia service is not running properly
          3. Both authentication methods are misconfigured
          4. SSL/TLS configuration issues

          Please check your jolokia_access_control_custom_file_enabled and
          jolokia_access_control_file_src_path configuration.
      when: not jolokia_accessible|bool

    - name: Success - Jolokia Endpoint is Accessible
      debug:
        msg: |
          SUCCESS: Jolokia endpoint is accessible and ready for ZK to KRaft migration
          Endpoint: {{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/list
          No Auth: {{ jolokia_no_auth_result.status | default('Failed') }}
          Basic Auth: {{ jolokia_basic_auth_result.status | default('Failed') }}
          At least one method succeeded!
      when: jolokia_accessible|bool

- import_playbook: kafka_broker.yml
  vars:
    deployment_strategy: 'serial'
  tags: migrate_to_dual_write

- name: Deploy Temporary Migration Jolokia Policy
  hosts: kafka_controller
  gather_facts: false
  tasks:
    - import_role:
        name: variables

    - name: Backup Current Jolokia Access Control XML (if exists)
      copy:
        src: "{{ kafka_controller_jolokia_access_control_dest_path }}"
        dest: "{{ kafka_controller_jolokia_access_control_dest_path }}.backup"
        remote_src: true
      failed_when: false
      when: kafka_controller_jolokia_access_control_enabled|bool

    - name: Deploy Temporary Migration-Specific Jolokia Access Control XML
      template:
        src: jolokia_migration_temp.xml.j2
        dest: "{{ kafka_controller_jolokia_access_control_dest_path }}"
        mode: '640'
        owner: "{{ kafka_controller_user }}"
        group: "{{ kafka_controller_group }}"
      when: kafka_controller_jolokia_access_control_enabled|bool
      notify: restart Kafka Controller

    - meta: flush_handlers

    - name: Wait for Kafka Controller to restart with new policy
      wait_for:
        port: "{{ kafka_controller_jolokia_port }}"
        host: "{{ inventory_hostname }}"
        delay: 10
        timeout: 300
      when: kafka_controller_jolokia_access_control_enabled|bool

- name: Wait for migration to complete
  hosts: kafka_controller
  tags: migrate_to_dual_write
  gather_facts: false
  tasks:
    - import_role:
        name: variables

    - name: Wait for Metadata Migration
      uri:
        url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ZkMigrationState"
        validate_certs: false
        return_content: true
        status_code: 200
      retries: "{{ metadata_migration_retries }}"
      delay: 90
      until: ( jolokia_output.content | from_json ).value.Value == 1
      register: jolokia_output
      when: jolokia_auth_mode == "none"

    - name: Wait for Metadata Migration when Basic Jolokia auth
      uri:
        url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ZkMigrationState"
        validate_certs: false
        return_content: true
        force_basic_auth: true
        url_username: "{{ jolokia_user }}"
        url_password: "{{ jolokia_password }}"
        status_code: 200
      retries: "{{ metadata_migration_retries }}"
      delay: 90
      until: ( jolokia_output.content | from_json ).value.Value == 1
      register: jolokia_output
      when: jolokia_auth_mode == "basic"

- name: Migrate Brokers to Kraft
  hosts: kafka_broker
  tags: migrate_to_kraft
  gather_facts: true
  tasks:
    - import_role:
        name: variables

    - name: Remove Zookeeper configs from Broker
      lineinfile:
        path: "{{ kafka_broker.config_file }}"
        state: absent
        regexp: "^{{ item }}*"
      loop:
        - zookeeper
        - inter.broker.protocol.version

    - name: Reconfigure ZK Brokers as KRaft brokers
      lineinfile:
        path: "{{ kafka_broker.config_file }}"
        line: process.roles=broker

    - name: Check if Cluster has RBAC enabled
      lineinfile:
        path: "{{ kafka_broker.config_file }}"
        regexp: 'confluent.authorizer.access.rule.providers(.*)$'
        state: absent
      register: auth_present
      when: rbac_enabled|bool

    - name: Replace ZK_ACL with KRAFT_ACL
      lineinfile:
        path: "{{ kafka_broker.config_file }}"
        line: confluent.authorizer.access.rule.providers=CONFLUENT,KRAFT_ACL
      when:
        - rbac_enabled|bool
        - auth_present.found

- name: Restart Kafka Broker
  hosts: kafka_broker
  tags: migrate_to_kraft
  gather_facts: true
  serial: '1'
  tasks:
    - include_role:
        name: kafka_broker
        tasks_from: restart_and_wait.yml
    - include_role:
        name: kafka_broker
        tasks_from: health_check.yml
      tags: health_check

- name: Take Controllers out of migration mode
  hosts: kafka_controller
  tags: migrate_to_kraft
  gather_facts: true
  tasks:
    - import_role:
        name: variables

    - name: Remove Zookeeper configs from Controller
      lineinfile:
        path: "{{ kafka_controller.config_file }}"
        state: absent
        regexp: "^{{ item }}*"
      loop:
        - zookeeper

- name: Restart Kafka Controller
  hosts: kafka_controller
  tags: migrate_to_kraft
  gather_facts: true
  serial: '1'
  tasks:
    - include_role:
        name: kafka_controller
        tasks_from: restart_and_wait.yml
    - include_role:
        name: kafka_controller
        tasks_from: health_check.yml
      tags: health_check

- name: Check Cluster State
  hosts: kafka_controller
  tags: migrate_to_kraft
  gather_facts: false
  tasks:
    - import_role:
        name: variables

    - name: Validate Cluster is in Kraft mode
      uri:
        url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ZkMigrationState"
        validate_certs: false
        return_content: true
        status_code: 200
      retries: "{{ metadata_migration_retries }}"
      delay: 90
      until: ( jolokia_output.content | from_json ).value.Value == 3
      register: jolokia_output
      when: jolokia_auth_mode == "none"

    - name: Validate Cluster is in Kraft mode when Basic Jolokia auth
      uri:
        url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ZkMigrationState"
        validate_certs: false
        return_content: true
        force_basic_auth: true
        url_username: "{{ jolokia_user }}"
        url_password: "{{ jolokia_password }}"
        status_code: 200
      retries: "{{ metadata_migration_retries }}"
      delay: 90
      until: ( jolokia_output.content | from_json ).value.Value == 3
      register: jolokia_output
      when: jolokia_auth_mode == "basic"

- name: Restore Original Jolokia Policy
  hosts: kafka_controller
  gather_facts: false
  tasks:
    - import_role:
        name: variables

    - name: Restore Original Jolokia Access Control XML
      copy:
        src: "{{ kafka_controller_jolokia_access_control_dest_path }}.backup"
        dest: "{{ kafka_controller_jolokia_access_control_dest_path }}"
        remote_src: true
        mode: '640'
        owner: "{{ kafka_controller_user }}"
        group: "{{ kafka_controller_group }}"
      when:
        - kafka_controller_jolokia_access_control_enabled|bool
      failed_when: false
      notify: restart Kafka Controller

    - name: Remove Backup File
      file:
        path: "{{ kafka_controller_jolokia_access_control_dest_path }}.backup"
        state: absent
      when: kafka_controller_jolokia_access_control_enabled|bool

    - meta: flush_handlers

    - name: Wait for Kafka Controller to restart with restored policy
      wait_for:
        port: "{{ kafka_controller_jolokia_port }}"
        host: "{{ inventory_hostname }}"
        delay: 10
        timeout: 300
      when: kafka_controller_jolokia_access_control_enabled|bool

- name: Finish Migration
  hosts: kafka_controller
  tags: migrate_to_kraft
  tasks:
    - debug:
        msg: "Migration from Zookeeper to Kraft has completed, you may shut down your Zookeeper. Please remove Zookeeper section and migration flag from your inventory file."
