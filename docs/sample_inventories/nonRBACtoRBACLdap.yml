---
##
## The following is an example inventory file of the configuration required for enabling RBAC in a running CP-Ansible cluster.
## In this example, the non rbac cluster has mtls enabled and the RBAC cluster has ldap
## You can skip step 1 if you already have a running cluster
## steps to run:
## 1. setup non rbac (mtls) cluster with "ansible-playbook -i <inv.yml> confluent.platform.all"
## 2. Uncomment Section 1 to enable authorization on cluster and run command "ansible-playbook -i <inv.yml> confluent.platform.all --skip-tags package --tags kafka_controller,kafka_broker -e deployment_strategy=rolling"
## 3. create ACLs for broker principal as well as user principals of all applications, including cp components. Example acls are provided in mtlsACLs.txt. You might need to add/modify principals according to your cluster.
## 4. Uncomment Section 2 and 3 to create a custom listener, for all kafka-> cp communication and run command "ansible-playbook -i <inv.yml> confluent.platform.all --skip-tags package -e deployment_strategy=rolling"
## 5. Comment out Section 1 and Section 3 and uncomment Section 4 to add rbac with ldap variables
## 6. run command "ansible-playbook -i <inv.yml> confluent.platform.all --skip-tags package -e deployment_strategy=rolling" to enable RBAC on all components

all:
  vars:
    ansible_connection: ssh
    ansible_user: ec2-user
    ansible_become: true
    ansible_ssh_private_key_file: /home/ec2-user/guest.pem
    ansible_python_interpreter: /usr/bin/python3

    ssl_enabled: true
    ssl_mutual_auth_enabled: true

    ## Section 1
    # kafka_broker_custom_properties:
      #   authorizer.class.name: org.apache.kafka.metadata.authorizer.StandardAuthorizer
      #   allow.everyone.if.no.acl.found: "true"
      #   super.users: "User:C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_broker;User:C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_controller"

    # kafka_controller_custom_properties:
      #   authorizer.class.name: org.apache.kafka.metadata.authorizer.StandardAuthorizer
      #   allow.everyone.if.no.acl.found: "true"
      #   super.users: "User:C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_broker;User:C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_controller"


    ## Section 2
    #kafka_broker_custom_listeners:
        #internal_client_listener:
        #  name: CUSTOM_LISTENER
        #  port: 9095
        #  ssl_enabled: true
        #  ssl_client_authentication: required
        #  sasl_protocol: none


    ## Section 3
    # schema_registry_kafka_listener_name: internal_client_listener
    # kafka_connect_kafka_listener_name: internal_client_listener
    # kafka_rest_kafka_listener_name: internal_client_listener
    # ksql_kafka_listener_name: internal_client_listener
    # control_center_kafka_listener_name: internal_client_listener


    ## Section 4

    # rbac_enabled: true
    # mds_super_user: mds
    # mds_super_user_password: password

    # schema_registry_ldap_user: schema-registry1
    # schema_registry_ldap_password: password

    # kafka_connect_ldap_user: kafka-connect1
    # kafka_connect_ldap_password: password

    # ksql_ldap_user: ksql1
    # ksql_ldap_password: password

    # kafka_rest_ldap_user: kafka-rest1
    # kafka_rest_ldap_password: password

    # control_center_ldap_user: control-center1
    # control_center_ldap_password: password


    ## LDAP CONFIGURATION
    ## need to add all broker's and controller's principals in controller's super users for mtls RBAC 
    # kafka_controller_custom_properties:
    #   super.users: "User:mds;User:C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_broker;User:C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_controller"
    # kafka_broker_custom_properties:
    #   ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
    #   ldap.com.sun.jndi.ldap.read.timeout: 3000
    #   ldap.java.naming.provider.url: ldaps://ldap1:636
    #   ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
    #   ldap.java.naming.security.credentials: password
    #   ldap.java.naming.security.authentication: simple
    #   ldap.user.search.base: OU=rbac,DC=example,DC=com
    #   ldap.group.search.base: OU=rbac,DC=example,DC=com
    #   ldap.user.name.attribute: uid
    #   ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
    #   ldap.group.name.attribute: cn
    #   ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
    #   ldap.user.object.class: account



kafka_controller:
  hosts:
    ec2-35-160-193-90.us-west-2.compute.amazonaws.com:
    ec2-35-85-219-150.us-west-2.compute.amazonaws.com:
    ec2-34-219-169-190.us-west-2.compute.amazonaws.com:

kafka_broker:
  hosts:
    ec2-35-91-214-11.us-west-2.compute.amazonaws.com:
    ec2-54-71-228-219.us-west-2.compute.amazonaws.com:
    ec2-54-218-9-145.us-west-2.compute.amazonaws.com:

schema_registry:
  hosts:
    ec2-35-160-193-90.us-west-2.compute.amazonaws.com:

kafka_connect:
  hosts:
    ec2-35-85-219-150.us-west-2.compute.amazonaws.com:

kafka_rest:
  hosts:
    ec2-34-219-169-190.us-west-2.compute.amazonaws.com:

ksql:
  hosts:
    ec2-35-91-214-11.us-west-2.compute.amazonaws.com:

control_center:
  hosts:
    ec2-35-85-219-150.us-west-2.compute.amazonaws.com:
