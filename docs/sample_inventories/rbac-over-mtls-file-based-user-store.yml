---
##
## The following is an example inventory file of the configuration required for setting up Confluent Platform with RBAC over mTLS.
## Principals extracted from certs are given role bindings.
## Using config overrides we can add support for file based human user login via c3/cli

all:
  vars:
    ansible_connection: ssh
    ansible_user: ec2-user
    ansible_become: true
    ansible_ssh_private_key_file: /home/ec2-user/guest.pem
    ansible_python_interpreter: /usr/bin/python3

    ## TLS Configuration
    ssl_enabled: true
    # 3 ways to handle ssl
    # Self Signed Certs (Default) Not recommended for production clusters
    # Custom Certs
    # Set ssl_custom_certs, ssl_ca_cert_filepath, ssl_signed_cert_filepath, ssl_key_filepath, ssl_key_password & ssl_custom_certs_remote_src(optional)
    # Provided Keystore Truststore
    # Set ssl_provided_keystore_and_truststore, ssl_keystore_and_truststore_custom_password, ssl_keystore_filepath, ssl_keystore_key_password, ssl_keystore_store_password, ssl_keystore_alias, ssl_truststore_filepath, ssl_truststore_password, ssl_truststore_ca_cert_alias and ssl_provided_keystore_and_truststore_remote_src (optional)

    rbac_enabled: true
    auth_mode: mtls # MDS server will use mtls certs for authentication, no user store like ldap/oauth will be setup on server

    # ssl_mutual_auth_enabled: true  Deprecated in 7.8.x
    ssl_client_authentication: required  # <required/requested/none>
    # Sets mtls on kafka broker listeners
    # Also sets the mds_ssl_client_authentication, erp_ssl_client_authentication to required for greenfield and requested for brownfield scenarios if not set explicitly

    mds_ssl_client_authentication: requested  # <required/requested/none>
    # Sets mtls on MDS server
    # Must be defined in all section as all components need to know its value for assigning role bindings

    # When set to required clients must send certs to server
    # When set to requested sending certs is optional given there is another mechanism like ldap/oauth which is sending principal
    # requested mode is used for upgrade scenarios where all clients might not be sending certs to server
    # Once all clients start sending certs to server this requested should be changed to required

    principal_mapping_rules:
      - "RULE:.*CN=([a-zA-Z0-9.-_]*).*$/$1/"
      - "DEFAULT"

    # List of super user principals who can get an impersonation token on behalf of other users
    # Needed for principal propogation for Rest Proxy.
    # To extract dn from cert check use openssl x509 -in <cert> -noout -subject -nameopt RFC2253
    # using this the dn would be something like 'C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_broker'
    # Then applying the principal mapping rules it would give the principal kafka_broker
    impersonation_super_users:
      - 'kafka_broker'
      - 'kafka_rest'
      - 'schema_registry'
      - 'kafka_connect'

    # These users cant be impersonated by impersonation_super_users. Typically one might want to add super users here to stop any other user from impersonating it
    impersonation_protected_users:
      - 'super_user'

    # Ignore these below configs to keep user store to none and use SSO
    kafka_broker_custom_properties:
        confluent.metadata.server.user.store: FILE
        confluent.metadata.server.user.store.file.path: /tmp/credentials
        # file set in below config should be a valid credentials file.
        # These files should be present on all brokers running MDS and should be consistent
        # file format newline seperated users. Each line having username: password
        # user1: password1
        # user2: password2

kafka_controller:
  hosts:
    ec2-34-219-110-48.us-west-2.compute.amazonaws.com:
    ec2-18-237-72-224.us-west-2.compute.amazonaws.com:
    ec2-35-161-39-212.us-west-2.compute.amazonaws.com:

kafka_broker:
  hosts:
    ec2-34-211-33-32.us-west-2.compute.amazonaws.com:
    ec2-35-89-77-112.us-west-2.compute.amazonaws.com:
    ec2-35-163-80-4.us-west-2.compute.amazonaws.com:

schema_registry:
  hosts:
    ec2-34-212-49-238.us-west-2.compute.amazonaws.com:

kafka_connect:
  hosts:
    ec2-35-93-21-143.us-west-2.compute.amazonaws.com:

kafka_rest:
  hosts:
    ec2-34-222-41-249.us-west-2.compute.amazonaws.com:

control_center:
  hosts:
    ec2-35-87-151-33.us-west-2.compute.amazonaws.com:
