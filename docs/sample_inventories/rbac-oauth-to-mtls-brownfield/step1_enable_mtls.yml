---
##
## The following is an example inventory file of the configuration required for setting up Confluent Platform with RBAC over OAuth. And then migrating to mTLS
## Principals extracted from certs and OAuth credentials are given role bindings.
## Extra configs added to keep cp service to service communication over certs only and not use OAuth credentials there.
## External clients of kafka or other services can use OAuth credentials to communicate with the cluster
## Control Center is running on SSO since beginning

all:
  vars:
    ansible_connection: ssh
    ansible_user: ec2-user
    ansible_become: true
    ansible_ssh_private_key_file: /home/ec2-user/guest.pem
    ansible_python_interpreter: /usr/bin/python3

    deployment_strategy: rolling

    ## TLS Configuration
    ssl_enabled: true
    # 3 ways to handle ssl
    # Self Signed Certs (Default) Not recommended for production clusters
    # Custom Certs
    # Set ssl_custom_certs, ssl_ca_cert_filepath, ssl_signed_cert_filepath, ssl_key_filepath, ssl_key_password & ssl_custom_certs_remote_src(optional)
    # Provided Keystore Truststore
    # Set ssl_provided_keystore_and_truststore, ssl_keystore_and_truststore_custom_password, ssl_keystore_filepath, ssl_keystore_key_password, ssl_keystore_store_password, ssl_keystore_alias, ssl_truststore_filepath, ssl_truststore_password, ssl_truststore_ca_cert_alias and ssl_provided_keystore_and_truststore_remote_src (optional)

    rbac_enabled: true
    auth_mode: oauth

    # OAuth users
    oauth_superuser_client_id: superuser
    oauth_superuser_client_password: my-secret
    schema_registry_oauth_user: schema_registry
    schema_registry_oauth_password: my-secret
    kafka_rest_oauth_user: kafka_rest
    kafka_rest_oauth_password: my-secret
    kafka_connect_oauth_user: kafka_connect
    kafka_connect_oauth_password: my-secret
    ksql_oauth_user: ksql
    ksql_oauth_password: my-secret
    control_center_oauth_user: control_center
    control_center_oauth_password: my-secret

    # OAuth configs
    oauth_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/oauthcertfile.pem"
    oauth_sub_claim: client_id
    oauth_groups_claim: groups
    oauth_token_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/token
    oauth_issuer_url: https://oauth1:8443/realms/cp-ansible-realm
    oauth_jwks_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/certs
    oauth_expected_audience: Confluent,account,api://default

    sso_mode: oidc
    sso_groups_claim: groups
    sso_sub_claim: sub
    sso_groups_scope: groups # scope is optional, depending on the Idp
    sso_issuer_url: <sso-idp-url>
    sso_jwks_uri: <sso-idp-jkws-url>
    sso_authorize_uri: <sso_authorize_uri>
    sso_token_uri: <sso_token_uri>
    sso_client_id: <sso_client_id>
    sso_client_password: <sso_client_password>
    sso_idp_cert_path: my-idp-cert.pem

    ######################################################
    ####################### STEP 1 #######################
    ######################################################

    # Enable mTLS on MDS, Kafka Listeners and CP components
    mds_ssl_client_authentication: requested  # <required/requested/none>
    # Must be defined in all section as all components need to know its value for assigning role bindings
    # While upgrades we should not go to required directly as all CP components talking to MDS will starting failing.
    # Thus we go to requested mode. Now when ansible playbook updates all CP components they know MDS has mTLS and thus send certs.

    ssl_mutual_auth_enabled: true
    ssl_client_authentication: requested  # <required/requested/none>
    # Sets mtls on kafka broker listeners, and also acts as default value for other components kafka_controller_ssl_client_authentication, schema_registry_ssl_client_authentication, kafka_rest_ssl_client_authentication, kafka_connect_ssl_client_authentication, kafka_connect_replicator_ssl_client_authentication
    kafka_controller_ssl_mutual_auth_enabled: true
    kafka_controller_ssl_client_authentication: requested
    schema_registry_ssl_mutual_auth_enabled: true
    schema_registry_ssl_client_authentication: requested
    kafka_rest_ssl_mutual_auth_enabled: true
    kafka_rest_ssl_client_authentication: requested
    kafka_connect_ssl_mutual_auth_enabled: true
    kafka_connect_ssl_client_authentication: requested
    kafka_connect_replicator_ssl_mutual_auth_enabled: true
    kafka_connect_replicator_ssl_client_authentication: requested
    # These will all turn on due ssl_client_authentication. So we can set any of them to none and false if we dont want that component to enforce ssl client authentication(mTLS) on its clients.
    # For example to turn off mTLS on kafka connect we can use
    # kafka_connect_ssl_mutual_auth_enabled: false
    # kafka_connect_ssl_client_authentication: none

    zookeeper_ssl_mutual_auth_enabled: false
    # Be CAREFUL HERE. This can alter zookeeper-kafka communication.
    # So if before upgrade there is no mTLS between zookeeper and kafka this should be set to false EXPLICITLY
    # If there is mTLS between zookeeper and kafka then this should be set to true.
    # Objective is to keep the communication between zookeeper and kafka same as it was.

    kafka_broker_custom_listeners:
      broker:
        name: BROKER
        port: 9093
        ssl_enabled: true
        ssl_mutual_auth_enabled: true
        ssl_client_authentication: required
        sasl_protocol: none
      external1: # here we are not defining mTLS related vars thus it takes from ssl_client_authentication, ssl_mutual_auth_enabled and turns it on in requested mode
        name: EXTERNAL1
        port: 9093
        ssl_enabled: true
        sasl_protocol: scram
      external2: # here we are explicitly setting mtls false by defining both ssl_mutual_auth_enabled, ssl_client_authentication
        name: EXTERNAL2
        port: 9094
        ssl_enabled: true
        sasl_protocol: plain
        ssl_mutual_auth_enabled: false
        ssl_client_authentication: none
      mtls: # creating a new mTLS only listener
        name: MTLS
        port: 9095
        ssl_enabled: true
        ssl_mutual_auth_enabled: true
        ssl_client_authentication: required
        sasl_protocol: none

    # This defines principal mapping rules. Optional to define.
    # But if we want the certificate CN to get modified while defining the principal then we should define them now.
    # In step0 file we had principal mapping rule added via overrides. Since this principal_mapping_rules was not a first class support earlier.
    # Now since we have it as first class support we should use it, this gets propogated to kafka listeners and all other CP components.
    # Be careful to not accidentally change the Principal mapping rules getting used in interbroker communication before this upgrade.
    # They should remain the same for inter broker communication to work seamlessly
    principal_mapping_rules:
      - "RULE:.*CN=([a-zA-Z0-9.-_]*).*$/$1/"
      - "DEFAULT"

    # These variables will make CP component to MDS communication over mTLS. If not set then CP component to MDS communication would be running over OAuth+mTLS. It is our choice to enable them
    kafka_broker_rest_proxy_mds_cert_auth_only: true
    schema_registry_mds_cert_auth_only: true
    kafka_connect_mds_cert_auth_only: true
    kafka_rest_mds_cert_auth_only: true
    control_center_mds_cert_auth_only: true

    # List of super user principals who can get an impersonation token on behalf of other users. We should add broker, rest proxy, schema registry and connect principals here.
    # The Principal which is used for CP component to talk to MDS. Here that is cert principal.
    # Needed for principal propogation for Rest Proxy and Control Center to work.
    # To extract dn from cert check use openssl x509 -noout -subject -nameopt RFC2253 -in <cert>
    # using this the dn would be something like 'C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_broker'
    # Then applying the principal mapping rules it would give the principal kafka_broker
    impersonation_super_users:
      - 'kafka_broker'
      - 'kafka_rest'
      - 'schema_registry'
      - 'kafka_connect'
    # In case CP component to MDS communication is happening over OAuth+mTLS (can happen if the above _cert_auth_only vars are not set to true) then we should add OAuth principals here

    # Optional Config
    # These users cant be impersonated by impersonation_super_users. Typically one might want to add super users here to stop any other user from impersonating it
    impersonation_protected_users:
      - 'super_user'

    # The following variables are to switch CP component to Kafka communication from internal listener(running oauthbearer+mtls) to mtls only.
    # Not a mandatory step
    schema_registry_kafka_listener_name: mtls
    kafka_connect_kafka_listener_name: mtls
    kafka_rest_kafka_listener_name: mtls
    control_center_kafka_listener_name: mtls


# Either zookeeper
zookeeper:
  hosts:
    ec2-34-219-110-48.us-west-2.compute.amazonaws.com:
    ec2-18-237-72-224.us-west-2.compute.amazonaws.com:
    ec2-35-161-39-212.us-west-2.compute.amazonaws.com:

# Or kafka_controller (kraft controller)
kafka_controller:
  hosts:
    ec2-34-219-110-48.us-west-2.compute.amazonaws.com:
    ec2-18-237-72-224.us-west-2.compute.amazonaws.com:
    ec2-35-161-39-212.us-west-2.compute.amazonaws.com:

kafka_broker:
  hosts:
    ec2-34-211-33-32.us-west-2.compute.amazonaws.com:
    ec2-35-89-77-112.us-west-2.compute.amazonaws.com:
    ec2-35-163-80-4.us-west-2.compute.amazonaws.com:

schema_registry:
  hosts:
    ec2-34-212-49-238.us-west-2.compute.amazonaws.com:

kafka_connect:
  hosts:
    ec2-35-93-21-143.us-west-2.compute.amazonaws.com:

kafka_rest:
  hosts:
    ec2-34-222-41-249.us-west-2.compute.amazonaws.com:

control_center:
  hosts:
    ec2-35-87-151-33.us-west-2.compute.amazonaws.com:
