---
##
## The following is an example inventory file of the configuration required for setting up Confluent Platform with RBAC over OAuth. And then migrating to mTLS
## Principals extracted from certs and OAuth credentials are given role bindings.
## Extra configs added to keep cp service to service communication over certs only and not use OAuth credentials there.
## External clients of kafka or other services can use OAuth credentials to communicate with the cluster
## Control Center is running on SSO since beginning

all:
  vars:
    ansible_connection: ssh
    ansible_user: ec2-user
    ansible_become: true
    ansible_ssh_private_key_file: /home/ec2-user/guest.pem
    ansible_python_interpreter: /usr/bin/python3

    ## TLS Configuration
    ssl_enabled: true
    # 3 ways to handle ssl
    # Self Signed Certs (Default) Not recommended for production clusters
    # Custom Certs
    # Set ssl_custom_certs, ssl_ca_cert_filepath, ssl_signed_cert_filepath, ssl_key_filepath, ssl_key_password & ssl_custom_certs_remote_src(optional)
    # Provided Keystore Truststore
    # Set ssl_provided_keystore_and_truststore, ssl_keystore_and_truststore_custom_password, ssl_keystore_filepath, ssl_keystore_key_password, ssl_keystore_store_password, ssl_keystore_alias, ssl_truststore_filepath, ssl_truststore_password, ssl_truststore_ca_cert_alias and ssl_provided_keystore_and_truststore_remote_src (optional)

    rbac_enabled: true
    auth_mode: oauth

    # OAuth users
    oauth_superuser_client_id: superuser
    oauth_superuser_client_password: my-secret
    schema_registry_oauth_user: schema_registry
    schema_registry_oauth_password: my-secret
    kafka_rest_oauth_user: kafka_rest
    kafka_rest_oauth_password: my-secret
    kafka_connect_oauth_user: kafka_connect
    kafka_connect_oauth_password: my-secret
    ksql_oauth_user: ksql
    ksql_oauth_password: my-secret
    control_center_oauth_user: control_center
    control_center_oauth_password: my-secret

    # OAuth configs
    oauth_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/oauthcertfile.pem"
    oauth_sub_claim: client_id
    oauth_groups_claim: groups
    oauth_token_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/token
    oauth_issuer_url: https://oauth1:8443/realms/cp-ansible-realm
    oauth_jwks_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/certs
    oauth_expected_audience: Confluent,account,api://default

    kafka_broker_custom_listeners:
      broker:
        name: BROKER
        port: 9093
        ssl_enabled: true
        ssl_mutual_auth_enabled: true
        ssl_client_authentication: required
        sasl_protocol: none
      external1:
        name: EXTERNAL1
        port: 9093
        ssl_enabled: true
        sasl_protocol: scram
      external2:
        name: EXTERNAL2
        port: 9094
        ssl_enabled: true
        sasl_protocol: plain

    sso_mode: oidc
    sso_groups_claim: groups
    sso_sub_claim: sub
    sso_groups_scope: groups # scope is optional, depending on the Idp
    sso_issuer_url: <sso-idp-url>
    sso_jwks_uri: <sso-idp-jkws-url>
    sso_authorize_uri: <sso_authorize_uri>
    sso_token_uri: <sso_token_uri>
    sso_client_id: <sso_client_id>
    sso_client_password: <sso_client_password>
    sso_idp_cert_path: my-idp-cert.pem

kafka_controller:
  hosts:
    ec2-34-219-110-48.us-west-2.compute.amazonaws.com:
    ec2-18-237-72-224.us-west-2.compute.amazonaws.com:
    ec2-35-161-39-212.us-west-2.compute.amazonaws.com:

kafka_broker:
  hosts:
    ec2-34-211-33-32.us-west-2.compute.amazonaws.com:
    ec2-35-89-77-112.us-west-2.compute.amazonaws.com:
    ec2-35-163-80-4.us-west-2.compute.amazonaws.com:

schema_registry:
  hosts:
    ec2-34-212-49-238.us-west-2.compute.amazonaws.com:

kafka_connect:
  hosts:
    ec2-35-93-21-143.us-west-2.compute.amazonaws.com:

kafka_rest:
  hosts:
    ec2-34-222-41-249.us-west-2.compute.amazonaws.com:

control_center_next_gen:
  hosts:
    ec2-35-87-151-33.us-west-2.compute.amazonaws.com:
