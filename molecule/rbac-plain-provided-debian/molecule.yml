---
### Installs Confluent Platform Cluster on Debian9.
### RBAC enabled.
### SASL PLAIN enabled.
### TLS with custom certs enabled.
### Kafka Broker Customer Listener.
### Secrets protection enabled.
### Control Center disabled, metrics reporters enabled.
### LdapAuthenticateCallbackHandler for AuthN

driver:
  name: docker
platforms:
  - name: ldap1
    hostname: ldap1.confluent
    groups:
      - ldap_server
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ${KRAFT_CONTROLLER:-zookeeper}2
    hostname: ${KRAFT_CONTROLLER:-zookeeper}2.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ${KRAFT_CONTROLLER:-zookeeper}3
    hostname: ${KRAFT_CONTROLLER:-zookeeper}3.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # Testing metrics reporter logic when c3 not in inventory
  # - name: control-center1
  #   hostname: control-center1.confluent
  #   groups:
  #     - control_center
  #   image: geerlingguy/docker-debian9-ansible
  #   dockerfile: ../Dockerfile-debian.j2
  #   command: ""
  #   volumes:
  #     - /sys/fs/cgroup:/sys/fs/cgroup:ro
  #   privileged: true
  #   published_ports:
  #     - "9021:9021"
  #   networks:
  #     - name: confluent
provisioner:
  inventory:
    group_vars:
      all:
        scenario_name: rbac-plain-provided-debian

        sasl_protocol: plain

        ssl_enabled: true

        ssl_provided_keystore_and_truststore: true
        ssl_keystore_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}.keystore.jks"
        ssl_keystore_key_password: keystorepass
        ssl_keystore_store_password: keystorepass
        ssl_truststore_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/truststore.jks"
        ssl_truststore_password: truststorepass
        ssl_truststore_ca_cert_alias: CARoot

        rbac_enabled: true
        custom_java_path: /opt/jdk17 # Use custom Java 17

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093
            ssl_enabed: true
            sasl_protocol: plain

        mds_super_user: mds
        mds_super_user_password: password

        schema_registry_ldap_user: schema_registry
        schema_registry_ldap_password: password

        kafka_connect_ldap_user: kafka_connect
        kafka_connect_ldap_password: password

        ksql_ldap_user: ksql
        ksql_ldap_password: password

        kafka_rest_ldap_user: kafka_rest
        kafka_rest_ldap_password: password

        control_center_ldap_user: control_center
        control_center_ldap_password: password

        rbac_component_additional_system_admins:
          - User:user1

        kafka_broker_custom_properties:
          ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
          ldap.com.sun.jndi.ldap.read.timeout: 3000
          ldap.java.naming.provider.url: ldap://ldap1:389
          ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
          ldap.java.naming.security.credentials: password
          ldap.java.naming.security.authentication: simple
          ldap.user.search.base: OU=rbac,DC=example,DC=com
          ldap.group.search.base: OU=rbac,DC=example,DC=com
          ldap.user.name.attribute: uid
          ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.group.name.attribute: cn
          ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.user.object.class: account

          # interbroker listener need to include user/password in this jaasconfig
          listener.name.client.plain.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required;
          listener.name.client.plain.sasl.server.callback.handler.class: io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler

        kafka_broker_metrics_reporter_enabled: true
        monitoring_interceptors_enabled: true

        secrets_protection_enabled: true
        kafka_broker_secrets_protection_encrypt_properties: [ldap.java.naming.security.credentials, kafka.rest.confluent.metadata.basic.auth.user.info]
        # control_center_secrets_protection_encrypt_properties: [confluent.metadata.basic.auth.user.info]
        schema_registry_secrets_protection_encrypt_properties: [confluent.metadata.basic.auth.user.info]
        ksql_secrets_protection_encrypt_properties: [ksql.schema.registry.basic.auth.user.info, confluent.metadata.basic.auth.user.info]
        kafka_rest_secrets_protection_encrypt_properties: [confluent.metadata.basic.auth.user.info]
        kafka_connect_secrets_protection_encrypt_properties: [confluent.metadata.basic.auth.user.info]

      ldap_server:
        ldaps_enabled: false

        ldap_admin_password: ldppassword

        ldap_rbac_group: rbac
        ldap_dc: example
        ldap_dc_extension: com

        ldap_users:
          - username: "{{schema_registry_ldap_user}}"
            password: "{{schema_registry_ldap_password}}"
            uid: 9998
            guid: 98
          - username: "{{kafka_connect_ldap_user}}"
            password: "{{kafka_connect_ldap_password}}"
            uid: 9997
            guid: 97
          - username: "{{ksql_ldap_user}}"
            password: "{{ksql_ldap_password}}"
            uid: 9996
            guid: 96
          - username: "{{control_center_ldap_user}}"
            password: "{{control_center_ldap_password}}"
            uid: 9995
            guid: 95
          - username: "{{kafka_rest_ldap_user}}"
            password: "{{kafka_rest_ldap_password}}"
            uid: 9994
            guid: 94
          - username: "{{mds_super_user}}"
            password: "{{mds_super_user_password}}"
            uid: 9993
            guid: 93
          - username: user1
            password: user1p
            uid: 9992
            guid: 92
