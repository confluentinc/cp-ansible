---
### Installs Confluent Platform Cluster on Oracle Linux 9.
### RBAC enabled.
### MTLS enabled.
### Secrets protection enabled
### FIPS enabled.
### Kafka Broker Customer Listener.
### RBAC Additional System Admin.
### Provided SSL Principal Mapping rule
### Creates two unique Connectors in Connect cluster.
### Zookeeper, Broker and Kraft Controller co-located while Migration
### Kafka broker has custom listener at port 9093
### Kraft Controller is running at port 9095

driver:
  name: docker
platforms:
  - name: ldap1
    hostname: ldap1.confluent
    groups:
      - ldap_server
    image: centos:centos8
    dockerfile: ../Dockerfile-centos8-base.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
      - kafka_broker_migration
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - ${CONTROLLER_HOSTGROUP:-zookeeper}_migration
      - kafka_controller_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
      - kafka_broker_migration
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - ${CONTROLLER_HOSTGROUP:-zookeeper}_migration
      - kafka_controller_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
      - kafka_broker_migration
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - ${CONTROLLER_HOSTGROUP:-zookeeper}_migration
      - kafka_controller_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
      - schema_registry_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
      - kafka_rest_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
      - kafka_connect_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
      - ksql_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center1
    hostname: control-center1.confluent
    groups:
      - control_center
      - control_center_migration
    image: oraclelinux:9-slim
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9021:9021"
    networks:
      - name: confluent
provisioner:
  playbooks:
    converge: ${MIGRATION_CONVERGE:-../collections_converge.yml}
  inventory:
    group_vars:
      all:
        scenario_name: rbac-mtls-rhel-fips
        redhat_java_package_name: java-11-openjdk
        ssl_enabled: true
        fips_enabled: true
        ssl_mutual_auth_enabled: true
        kafka_controller_port: 9095
        secrets_protection_enabled: true
        rbac_enabled: true

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        mds_super_user: mds
        mds_super_user_password: password

        schema_registry_ldap_user: schema-registry1
        schema_registry_ldap_password: password

        kafka_connect_ldap_user: kafka-connect1
        kafka_connect_ldap_password: password

        ksql_ldap_user: ksql1
        ksql_ldap_password: password

        kafka_rest_ldap_user: kafka-rest1
        kafka_rest_ldap_password: password

        control_center_ldap_user: control-center1
        control_center_ldap_password: password

        principal_mapping_rules:
          - "RULE:.*O=(.*?),OU=TEST.*$$/$$1/"
          - "DEFAULT"

        kafka_broker_custom_properties:
          super.users: User:dom;User:jeff
        # kafka_controller_custom_properties:
          # ssl.principal.mapping.rules: "RULE:.*O=(.*?),OU=TEST.*$$/$$1/"  #since we are providing mapping.rules to broker and have mTLS between broker and controller #}

        # To run the FileStream connector, you must add the filestream-connectors path in the plugin.path
        kafka_connect_custom_properties:
          plugin.path: "/usr/share/filestream-connectors,/usr/share/java/connect_plugins"

      kafka_broker:
        kafka_broker_cluster_name: Test-Broker
        # Testing old way of passing ldap configs
        ldap_config: |
          ldap.java.naming.factory.initial=com.sun.jndi.ldap.LdapCtxFactory
          ldap.com.sun.jndi.ldap.read.timeout=3000
          ldap.java.naming.provider.url=ldap://{{ groups['ldap_server'][0] }}:389
          ldap.java.naming.security.principal=uid=mds,OU=rbac,DC=example,DC=com
          ldap.java.naming.security.credentials=password
          ldap.java.naming.security.authentication=simple
          ldap.user.search.base=OU=rbac,DC=example,DC=com
          ldap.group.search.base=OU=rbac,DC=example,DC=com
          ldap.user.name.attribute=uid
          ldap.user.memberof.attribute.pattern=CN=(.*),OU=rbac,DC=example,DC=com
          ldap.group.name.attribute=cn
          ldap.group.member.attribute.pattern=CN=(.*),OU=rbac,DC=example,DC=com
          ldap.user.object.class=account

      schema_registry:
        schema_registry_cluster_name: Test-Schema

      kafka_connect:
        kafka_connect_cluster_name: Test-Connect
        kafka_connect_connector_white_list: "test_topic1,test_topic2"
        kafka_connect_connectors:
          - name: sample-connector-1
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "1"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic1"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"
          - name: sample-connector-2
            config:
              connector.class: "FileStreamSourceConnector"
              tasks.max: "1"
              file: "/etc/kafka/connect-distributed.properties"
              topic: "test_topic2"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"
      ksql:
        ksql_cluster_name: Test-Ksql

      ldap_server:
        ldaps_enabled: true
        ldaps_custom_certs: true
        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"

        ldap_admin_password: ldppassword

        ldap_rbac_group: rbac
        ldap_dc: example
        ldap_dc_extension: com

        ldap_users:
          - username: "{{schema_registry_ldap_user}}"
            password: "{{schema_registry_ldap_password}}"
            uid: 9998
            guid: 98
          - username: "{{kafka_connect_ldap_user}}"
            password: "{{kafka_connect_ldap_password}}"
            uid: 9997
            guid: 97
          - username: "{{ksql_ldap_user}}"
            password: "{{ksql_ldap_password}}"
            uid: 9996
            guid: 96
          - username: "{{control_center_ldap_user}}"
            password: "{{control_center_ldap_password}}"
            uid: 9995
            guid: 95
          - username: "{{kafka_rest_ldap_user}}"
            password: "{{kafka_rest_ldap_password}}"
            uid: 9994
            guid: 94
          - username: "{{mds_super_user}}"
            password: "{{mds_super_user_password}}"
            uid: 9993
            guid: 93
