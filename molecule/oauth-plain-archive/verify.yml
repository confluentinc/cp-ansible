---
### Validates that custom log4j appenders are present on each component.
### Validates that Service Description has been overridden.
### Validates that SASL Plaintext protocol is set across components.
### Validates that Connectors are present on Kafka Connect.

- name: Verify - kafka_controller
  hosts: kafka_controller
  gather_facts: true
  tasks:
    - import_role:
        name: variables
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/controller/server.properties
        property: controller.quorum.voters
        expected_value: "{{ kafka_controller_quorum_voters }}"

    - name: Check Updated Service Description
      shell: systemctl status confluent-kcontroller
      register: systemctl_status
      failed_when: "'Custom Controller description' not in systemctl_status.stdout_lines[0]"
      changed_when: false

    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/controller/server.properties
        property: listener.name.controller.sasl.enabled.mechanisms
        expected_value: PLAIN

    - import_role:
        name: variables

    - name: Slurp log4j2.yaml
      slurp:
        src: "{{ kafka_controller.log4j_file }}"
      register: log4j2_yaml_raw

    - name: Parse log4j2.yaml
      set_fact:
        log4j2_yaml: "{{ log4j2_yaml_raw.content | b64decode | from_yaml }}"

    - name: Assert root logger level is INFO
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['level'] == 'DEBUG'
        fail_msg: "Root logger level is not DEBUG!"

    - name: Assert root logger has correct appenders
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['AppenderRef'] | map(attribute='ref') | list is superset(['KafkaAppender'])
        fail_msg: "Root logger does not have kafka appender!"

- name: Verify - kafka_broker
  hosts: kafka_broker
  gather_facts: true
  tasks:
    - set_fact:
        kraft_mode: "{{ ('kafka_controller' in groups.keys() and groups['kafka_controller'] | length > 0) }}"

    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/kafka/server.properties
        property: listener.name.internal.sasl.enabled.mechanisms
        expected_value: OAUTHBEARER

    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/kafka/server.properties
        property: transaction.state.log.min.isr
        expected_value: "2"

    - name: Check Updated Service Description
      shell: systemctl status confluent-server
      register: systemctl_status
      failed_when: "'Custom Kafka description' not in systemctl_status.stdout_lines[0]"
      changed_when: false

    - import_role:
        name: confluent.test
        tasks_from: check_log4j.yml

    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/kafka/client.properties
        property: default.api.timeout.ms
        expected_value: "40000"

    - import_role:
        name: variables

    - name: Slurp log4j2.yaml
      slurp:
        src: "{{ kafka_broker.log4j_file }}"
      register: log4j2_yaml_raw

    - name: Parse log4j2.yaml
      set_fact:
        log4j2_yaml: "{{ log4j2_yaml_raw.content | b64decode | from_yaml }}"

    - name: Assert root logger level is INFO
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['level'] == 'DEBUG'
        fail_msg: "Root logger level is not INFO!"

    - name: Assert root logger has correct appenders
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['AppenderRef'] | map(attribute='ref') | list is superset(['KafkaAppender'])
        fail_msg: "Root logger does not have kafka appender!"

- name: Verify - schema_registry
  hosts: schema_registry
  gather_facts: true
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/schema-registry/schema-registry.properties
        property: kafkastore.security.protocol
        expected_value: SASL_SSL

    - name: Check Original Service Description
      shell: systemctl status confluent-schema-registry
      register: systemctl_status
      failed_when: "'RESTful Avro schema registry for Apache Kafka' not in systemctl_status.stdout_lines[0]"
      changed_when: false

    - import_role:
        name: confluent.test
        tasks_from: check_log4j.yml
    - import_role:
        name: variables

    - name: Slurp log4j2.yaml
      slurp:
        src: "{{ schema_registry.log4j_file }}"
      register: log4j2_yaml_raw

    - name: Parse log4j2.yaml
      set_fact:
        log4j2_yaml: "{{ log4j2_yaml_raw.content | b64decode | from_yaml }}"

    - name: Assert root logger level is INFO
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['level'] == 'INFO'
        fail_msg: "Root logger level is not INFO!"

    - name: Assert root logger has correct appenders
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['AppenderRef'] | map(attribute='ref') | list is superset(['file'])
        fail_msg: "Root logger does not have file appender!"

- name: Verify - kafka_rest
  hosts: kafka_rest
  gather_facts: true
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/kafka-rest/kafka-rest.properties
        property: client.security.protocol
        expected_value: SASL_SSL

    - name: Check Updated Service Description
      shell: systemctl status confluent-kafka-rest
      register: systemctl_status
      failed_when: "'Custom Rest Proxy description' not in systemctl_status.stdout_lines[0]"
      changed_when: false

    - import_role:
        name: confluent.test
        tasks_from: check_log4j.yml
    - import_role:
        name: variables

    - name: Slurp log4j2.yaml
      slurp:
        src: "{{ kafka_rest.log4j_file }}"
      register: log4j2_yaml_raw

    - name: Parse log4j2.yaml
      set_fact:
        log4j2_yaml: "{{ log4j2_yaml_raw.content | b64decode | from_yaml }}"

    - name: Assert root logger level is INFO
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['level'] == 'INFO'
        fail_msg: "Root logger level is not INFO!"

    - name: Assert root logger has correct appenders
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['AppenderRef'] | map(attribute='ref') | list is superset(['file'])
        fail_msg: "Root logger does not have file appender!"

- name: Verify - kafka_connect
  hosts: kafka_connect
  gather_facts: true
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/kafka/connect-distributed.properties
        property: security.protocol
        expected_value: SASL_SSL

    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/kafka/connect-distributed.properties
        property: producer.sasl.jaas.config
        expected_value: 'org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId="kafka_connect" clientSecret="my-secret" ssl.truststore.location="/var/ssl/private/kafka_connect.truststore.jks" ssl.truststore.password="confluenttruststorepass";'

    - name: Check Updated Service Description
      shell: systemctl status confluent-kafka-connect
      register: systemctl_status
      failed_when: "'Custom Connect description' not in systemctl_status.stdout_lines[0]"
      changed_when: false

    - import_role:
        name: variables

    - name: Slurp log4j2.yaml
      slurp:
        src: "{{ kafka_connect.log4j_file }}"
      register: log4j2_yaml_raw

    - name: Parse log4j2.yaml
      set_fact:
        log4j2_yaml: "{{ log4j2_yaml_raw.content | b64decode | from_yaml }}"

    - name: Assert root logger level is INFO
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['level'] == 'INFO'
        fail_msg: "Root logger level is not INFO!"

    - name: Assert root logger has correct appenders
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['AppenderRef'] | map(attribute='ref') | list is superset(['ConnectAppender'])
        fail_msg: "Root logger does not have connect appender!"

- name: Verify - ksql
  hosts: ksql
  gather_facts: true
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/ksqldb/ksql-server.properties
        property: security.protocol
        expected_value: SASL_SSL

    - name: Check Updated Service Description
      shell: systemctl status confluent-ksqldb
      register: systemctl_status
      failed_when: "'Custom KSQLDB description' not in systemctl_status.stdout_lines[0]"
      changed_when: false

    - import_role:
        name: confluent.test
        tasks_from: check_log4j.yml
    - import_role:
        name: variables

    - name: Slurp log4j2.yaml
      slurp:
        src: "{{ ksql.log4j_file }}"
      register: log4j2_yaml_raw

    - name: Parse log4j2.yaml
      set_fact:
        log4j2_yaml: "{{ log4j2_yaml_raw.content | b64decode | from_yaml }}"

    - name: Assert root logger level is INFO
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['level'] == 'INFO'
        fail_msg: "Root logger level is not INFO!"

    - name: Assert root logger has correct appenders
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['AppenderRef'] | map(attribute='ref') | list is superset(['main'])
        fail_msg: "Root logger does not have main appender!"

- name: Verify - control_center_next_gen
  hosts: control_center_next_gen
  gather_facts: true
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /opt/confluent/etc/confluent-control-center/control-center-production.properties
        property: confluent.controlcenter.streams.security.protocol
        expected_value: SASL_SSL

    - name: Check Updated Service Description
      shell: systemctl status confluent-control-center
      register: systemctl_status
      failed_when: "'Custom C3 description' not in systemctl_status.stdout_lines[0]"
      changed_when: false

    - import_role:
        name: confluent.test
        tasks_from: check_log4j.yml

    - import_role:
        name: variables

    - name: Slurp log4j2.yaml
      slurp:
        src: "{{ control_center_next_gen.log4j_file }}"
      register: log4j2_yaml_raw

    - name: Parse log4j2.yaml
      set_fact:
        log4j2_yaml: "{{ log4j2_yaml_raw.content | b64decode | from_yaml }}"

    - name: Assert root logger level is INFO
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['level'] == 'INFO'
        fail_msg: "Root logger level is not INFO!"

    - name: Assert root logger has correct appenders
      assert:
        that:
          - log4j2_yaml['Configuration']['Loggers']['Root']['AppenderRef'] | map(attribute='ref') | list is superset(['Streams', 'Main'])
        fail_msg: "Root logger does not have correct appenders!"

- name: Verify - USM Agent Functionality
  import_playbook: ../verify_usm_agent.yml
