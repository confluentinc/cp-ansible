---
### SR Automation Workflow Verification - LDAP/RBAC + mTLS
### Includes base verification and adds LDAP + mTLS specific checks

- name: Load Variables for SR Automation Verification
  hosts: all
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.platform.variables

- name: Verify Schema Registry Automation Configuration
  hosts: schema_registry
  gather_facts: false
  vars:

  tasks:
    - name: Check core automation properties are configured
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: kafkastore.update.handlers
        expected_value: io.confluent.schema.exporter.storage.SchemaExporterUpdateHandler
      tags: config

    - name: Check password encoder secret is configured
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: password.encoder.secret
        expected_value: "{{ password_encoder_secret }}"
      tags: config

    - name: Check USM remote endpoint configuration
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: usm.schema.registry.remote.endpoint
        expected_value: "{{ unified_stream_manager.schema_registry_endpoint }}"
      when: unified_stream_manager.schema_registry_endpoint != 'none'
      tags: config

    - name: Check resource extension classes for automation
      shell: |
        grep "schema.registry.resource.extension.class.*SchemaExporterResourceExtension" /etc/schema-registry/schema-registry.properties
      register: extension_check
      changed_when: false
      failed_when: extension_check.rc != 0
      tags: config

- name: Verify Schema Registry API Functionality
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Wait for Schema Registry to be ready
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        expected_status: 200
        result_var: sr_ready_check
        operation_name: "Schema Registry API Readiness Check"
        request_retries: 10
        request_delay: 5
      tags: api

    - name: Get subjects list for validation
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        expected_status: 200
        result_var: subjects_list
        operation_name: "Get Subjects List"
      tags: api

    - name: Verify test schemas exist
      assert:
        that:
          - "'test.user-value' in subjects_list.json"
          - "'automation.workflow-value' in subjects_list.json"
        fail_msg: "Test schemas were not created successfully"
      tags: api

- name: Verify Schema Automation Extensions Loaded (Cluster-wide)
  hosts: schema_registry  # Verify automation extensions on all SR instances
  gather_facts: false
  tasks:
    - name: Verify automation extensions are loaded
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters"
        method: GET
        expected_status: 200
        result_var: automation_extensions_check
        operation_name: "Verify Automation Extensions on {{ inventory_hostname }}"
      tags: automation

- name: Verify Schema Automation Features (Primary Only)
  hosts: schema_registry:!mock-cc-schema-registry  # Only verify active management on primary SR
  gather_facts: false
  tasks:
    - name: Check exporters endpoint accessibility
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters"
        method: GET
        expected_status: 200
        result_var: exporters_list
        operation_name: "Get Exporters List"
      tags: automation

    - name: Check importers endpoint accessibility
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers"
        method: GET
        expected_status: 200
        result_var: importers_list
        operation_name: "Get Importers List"
      tags: automation

    - name: Check if test exporter was created
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}"
        method: GET
        expected_status: [200, 404]
        result_var: exporter_check
        operation_name: "Check Test Exporter"
        ignore_errors: true
      when: sr_switch_over_exporter_name is defined
      tags: automation

    - name: Verify exporter configuration if it exists
      block:
        - name: Check exporter status
          import_role:
            name: confluent.platform.common
            tasks_from: schema_registry_operations.yml
          vars:
            request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}/status"
            method: GET
            expected_status: 200
            result_var: exporter_status
            operation_name: "Check Exporter Status"
          
        - name: Verify exporter is in expected state
          assert:
            that:
              - exporter_status.json.state in ['RUNNING', 'PAUSED']
            fail_msg: "Exporter is not in expected state: {{ exporter_status.json.state }}"

        - name: Check exporter configuration
          import_role:
            name: confluent.platform.common
            tasks_from: schema_registry_operations.yml
          vars:
            request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}/config"
            method: GET
            expected_status: 200
            result_var: exporter_config
            operation_name: "Check Exporter Configuration"
          
        - name: Verify exporter target endpoint
          assert:
            that:
              - exporter_config.json['schema.registry.url'] == unified_stream_manager.schema_registry_endpoint
            fail_msg: "Exporter endpoint mismatch: {{ exporter_config.json['schema.registry.url'] }}"
      when: 
        - exporter_check.status == 200
        - sr_switch_over_exporter_name is defined
      tags: automation

- name: Verify Security Configuration
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Check Schema Registry mode
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/mode"
        method: GET
        expected_status: 200
        result_var: sr_mode_check
        operation_name: "Check Schema Registry Mode"
      tags: security

    - name: Verify Schema Registry is in correct mode
      assert:
        that:
          - sr_mode_check.json.mode in ['READWRITE', 'READONLY', 'IMPORT', 'FORWARD']
        fail_msg: "Schema Registry is in unexpected mode: {{ sr_mode_check.json.mode }}"
      tags: security

    - name: Display automation workflow test summary
      debug:
        msg: |
          SR Automation Workflow Test Results ({{ scenario_name | default('unknown') }}):
          ✓ Schema Registry Mode: {{ sr_mode_check.json.mode }}
          ✓ Security Configuration: {{ 'mTLS' if ssl_mutual_auth_enabled | default(false) else ('OAuth' if oauth_enabled | default(false) else ('LDAP' if ldap_enabled | default(false) else 'Plaintext')) }}
          ✓ Available Exporters: {{ exporters_list.json | length }}
          ✓ Available Importers: {{ importers_list.json | length }}
          ✓ Test Schemas Created: {{ subjects_list.json | select('match', '(test|automation)\..*') | list | length }}
          ✓ Automation Features: {{ 'ENABLED' if (exporters_list.json | length > 0 or importers_list.json | length > 0) else 'DISABLED' }}
      tags: summary

- name: LDAP + mTLS Specific Verification
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Check LDAP authentication properties
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: authentication.method
        expected_value: LDAP
      tags: ldap

    - name: Check LDAP URL configuration
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: ldap.java.naming.provider.url
        expected_value: "{{ ldap_url }}"
      tags: ldap

    - name: Check RBAC authorizer configuration
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: confluent.schema.registry.authorizer.class
        expected_value: io.confluent.kafka.schemaregistry.security.authorizer.rbac.RbacAuthorizer
      tags: rbac

    - name: Verify mTLS certificate files exist
      stat:
        path: "{{ item }}"
      register: cert_files_check
      loop:
        - "{{ ssl_file_dir_final }}/schema_registry.crt"
        - "{{ ssl_file_dir_final }}/schema_registry.key"
        - "{{ ssl_file_dir_final }}/ca.crt"
      when: ssl_mutual_auth_enabled | default(false)
      tags: mtls

    - name: Verify all certificate files present
      assert:
        that:
          - item.stat.exists
        fail_msg: "Required mTLS certificate file missing: {{ item.item }}"
      loop: "{{ cert_files_check.results }}"
      when:
        - ssl_mutual_auth_enabled | default(false)
        - cert_files_check is defined
      tags: mtls

    - name: Test HTTPS with client certificate
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        validate_certs: false
        client_cert: "{{ ssl_file_dir_final }}/schema_registry.crt"
        client_key: "{{ ssl_file_dir_final }}/schema_registry.key"
        status_code: 200
      register: mtls_access_test
      when: ssl_mutual_auth_enabled | default(false)
      tags: mtls

    - name: Test LDAP user authentication (if possible)
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        validate_certs: false
        client_cert: "{{ ssl_file_dir_final }}/schema_registry.crt"
        client_key: "{{ ssl_file_dir_final }}/schema_registry.key"
        user: "sr-admin"
        password: "admin-password"
        force_basic_auth: true
        status_code: [200, 401, 403]
      register: ldap_auth_test
      ignore_errors: true
      when: ssl_mutual_auth_enabled | default(false)
      tags: ldap

    - name: Display LDAP + mTLS verification summary
      debug:
        msg: |
          ✓ LDAP + mTLS SR Automation Verification Complete:
          - LDAP authentication: {{ 'CONFIGURED' }}
          - LDAP server: {{ ldap_url }}
          - LDAP users provisioned: sr-admin, sr-user, sr-exporter, sr-importer, mds-user
          - mTLS certificates: {{ 'PRESENT' if cert_files_check.results | selectattr('stat.exists') | list | length == 3 else 'MISSING' }}
          - RBAC authorization: {{ 'ENABLED' }}
          - Client cert access: {{ 'WORKING' if mtls_access_test is succeeded else 'FAILED' }}
          - LDAP auth test: {{ 'ATTEMPTED' if ldap_auth_test is defined else 'SKIPPED' }}
          - Security level: Enterprise-grade LDAP + mTLS
          - Automation features: Ready for secure directory-based authentication
      tags: summary
