---
### Installs two Confluent Platform Clusters on Debian10.
### RBAC enabled.
### Remote MDS from Cluster2 to Cluster1 (MDS).
### Custom TLS certificates.
### Kafka Broker Customer Listener
### RBAC Additional System Admin.
### SSO authentication using OIDC in Control center using Azure IdP

driver:
  name: docker
platforms:
  - name: oauth1
    hostname: oauth1.confluent
    groups:
      - oauth_server
    image: quay.io/keycloak/keycloak:latest
    env:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: oauth1
      KC_HTTPS_CERTIFICATE_FILE: /idp-cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /idp-key.pem
      KEYCLOAK_HTTP_PORT: "8080"
      KEYCLOAK_HTTPS_PORT: "8443"
    dockerfile: ../Dockerfile-oauth.j2
    published_ports:
      - "8080:8080"
      - "8443:8443"
    command: start-dev
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kerberos1
    hostname: mds-kerberos1.confluent
    groups:
      - kerberos_server
    image: centos:centos8
    dockerfile: ../Dockerfile-centos8-base.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # MDS Kafka Controller and Kafka
  - name: mds-controller1
    hostname: mds-controller1.confluent
    groups:
      - kafka_controller
      - mds
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker1
    hostname: mds-kafka-broker1.confluent
    groups:
      - kafka_broker
      - mds
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker2
    hostname: mds-kafka-broker2.confluent
    groups:
      - kafka_broker
      - mds
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # Cluster 2 goups, groupnames will be changed during converge phase
  - name: controller1
    hostname: controller1.confluent
    groups:
      - kafka_controller2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center-next-gen
    hostname: control-center-next-gen.confluent
    groups:
      - control_center_next_gen2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9022:9022"
    networks:
      - name: confluent
  - name: usm-agent
    hostname: usm-agent1.confluent
    groups:
      - usm_agent2
      - cluster2
    image: debian:12
    dockerfile: ../Dockerfile-debian12-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ccloud-mock-service
    hostname: ccloud-mock-service.confluent
    groups:
      - ccloud_mock
    image: usmagent-mock-ccloud:latest
    command: ""
    networks:
      - name: confluent
provisioner:
  playbooks:
    converge: ../multi_rbac_converge.yml
  inventory:
    group_vars:
      # Shared properties among mds cluster and cluster2 groups (as well as kerberos and ldap)
      all:
        control_center_next_gen_port: 9022
        control_center_next_gen_dependency_prometheus_basic_auth_enabled: true
        control_center_next_gen_dependency_alertmanager_basic_auth_enabled: true
        scenario_name: oauth-rbac-mds-kerberos-debian
        keycloak_oauth_server_port: 8443
        keycloak_http_protocol: https
        ssl_enabled: false
        sasl_protocol: kerberos
        debian_java_package_name: openjdk-17-jdk
        rbac_enabled: true

        rbac_component_additional_system_admins:
          - user1

        kerberos_kafka_broker_primary: kafka
        kerberos:
          realm: realm.example.com
          kdc_hostname: mds-kerberos1
          admin_hostname: mds-kerberos1

        kafka_broker_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_broker_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_broker-{{inventory_hostname}}.keytab"
        kafka_controller_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_controller_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_controller-{{inventory_hostname}}.keytab"

      # USM Agent CCloud Configuration
        usm_agent_ccloud_credential:
          username: "ccloud-user"
          password: "ccloud-secret"
        usm_agent_ccloud_host: "http://ccloud-mock-service:8081"
        usm_agent_ccloud_environment_id: "env-123456"

        # USM Agent Authentication Configuration - BASIC AUTHENTICATION
        usm_agent_basic_auth_enabled: true
        usm_agent_ssl_enabled: false
        usm_agent_ssl_mutual_auth_enabled: false
        # USM Agent Basic Users Configuration
        usm_agent_basic_users:
          admin:
            principal: admin
            password: admin-secret
          user1:
            principal: user1
            password: user1-secret
          user2:
            principal: user2
            password: user2-secret

        # Client credentials for USM Agent (required for basic auth)
        usm_agent_client_username: "user1"
        usm_agent_client_password: "user1-secret"

        auth_mode: oauth
        oauth_superuser_client_id: superuser
        oauth_superuser_client_password: my-secret

        oauth_superuser_principal: superuser_sub
        schema_registry_oauth_principal: schema_registry_sub
        kafka_rest_oauth_principal: kafka_rest_sub
        kafka_connect_oauth_principal: kafka_connect_sub
        #oauth_sub_claim: client_id
        oauth_groups_claim: groups
        oauth_token_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/token
        oauth_issuer_url: https://oauth1:8443/realms/cp-ansible-realm
        oauth_jwks_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/certs
        oauth_expected_audience: Confluent,account,api://default
        oauth_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/oauthcertfile.pem"

        schema_registry_oauth_user: schema_registry
        schema_registry_oauth_password: my-secret
        kafka_rest_oauth_user: kafka_rest
        kafka_rest_oauth_password: my-secret
        kafka_connect_oauth_user: kafka_connect
        kafka_connect_oauth_password: my-secret
        control_center_next_gen_oauth_user: control_center_next_gen
        control_center_next_gen_oauth_password: my-secret
        control_center_next_gen_oauth_principal: control_center_next_gen_sub
        ksql_oauth_user: ksql
        ksql_oauth_password: my-secret
        ksql_oauth_principal: ksql_sub

        sso_mode: oidc
        sso_groups_claim: groups
        sso_sub_claim: sub
        sso_issuer_url: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7
        sso_jwks_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/keys
        sso_authorize_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/authorize
        sso_token_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/token
        sso_device_authorization_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/device/authorize
        sso_cli: true
        sso_client_id: ${OKTA_CLIENT:-user}
        sso_client_password: ${OKTA_PASSWORD:-pass}
        sso_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/ssocertfile.pem"

        # setups /etc/hosts on ec2 to allow delegate_to: localhost to make requests to MDS url by making the url resolvable
        docker_containers:
          - oauth1
          - mds-kafka-broker1
          - mds-kafka-broker2
          - kafka-broker1
          - kafka-broker2

      mds:
        kafka_broker_cluster_name: mds

      cluster2:
        external_mds_enabled: true
        kafka_broker_cluster_name: kafka-cluster
        schema_registry_cluster_name: Test-Schema
        mds_broker_bootstrap_servers: mds-kafka-broker1:9092,mds-kafka-broker2:9092
        mds_bootstrap_server_urls: http://mds-kafka-broker1:8090,http://mds-kafka-broker2:8090
        mds_broker_listener:
          ssl_enabled: false
          ssl_mutual_auth_enabled: false
          sasl_protocol: oauth

      kerberos_server:
        realm_name: "{{ kerberos.realm | upper }}"

        keytab_output_directory: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs"

        # Creates kerberos principals for both mds cluster and cluster2
        kerberos_principals:
          - principal: "{{kerberos_kafka_broker_primary}}/mds-controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-mds-controller1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/mds-kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-mds-kafka-broker1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/mds-kafka-broker2.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-mds-kafka-broker2.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-controller1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker2.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker2.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker3.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker3.keytab"
