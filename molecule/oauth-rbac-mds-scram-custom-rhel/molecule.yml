---
### Installs two Confluent Platform Clusters on Rocky Linux 9.
### RBAC enabled.
### Remote MDS from Cluster2 to Cluster1 (MDS).
### Custom TLS certificates.
### SASL SCRAM enabled on both clusters.
### Kafka Broker Customer Listener.
### RBAC Additional System Admin.

driver:
  name: docker
platforms:
  - name: mds-ldap1
    hostname: mds-ldap1.confluent
    groups:
      - ldap_server
    image: centos:centos8
    dockerfile: ../Dockerfile-centos8-base.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: oauth1
    hostname: oauth1.confluent
    groups:
      - oauth_server
    image: quay.io/keycloak/keycloak:latest
    env:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: oauth1
      KC_HTTPS_CERTIFICATE_FILE: /idp-cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /idp-key.pem
      KEYCLOAK_HTTP_PORT: "8080"
      KEYCLOAK_HTTPS_PORT: "8443"
    dockerfile: ../Dockerfile-oauth.j2
    published_ports:
      - "8080:8080"
      - "8443:8443"
    command: start-dev
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # MDS Controller, Zookeeper and Kafka
  - name: mds-${KRAFT_CONTROLLER:-zookeeper}1
    hostname: mds-${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - mds
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker1
    hostname: mds-kafka-broker1.confluent
    groups:
      - kafka_broker
      - mds
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker2
    hostname: mds-kafka-broker2.confluent
    groups:
      - kafka_broker
      - mds
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # Cluster 2 goups, groupnames will be changed during converge phase
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${KRAFT_CONTROLLER:-zookeeper}2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center1
    hostname: control-center1.confluent
    groups:
      - control_center2
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9021:9021"
    networks:
      - name: confluent

provisioner:
  playbooks:
    converge: ../multi_rbac_converge.yml
  inventory:
    group_vars:
      all:
        scenario_name: oauth-rbac-mds-scram-custom-rhel

        ssl_enabled: true
        sasl_protocol: scram
        kafka_controller_sasl_protocol: plain

        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass

        rbac_enabled: true

        create_mds_certs: false
        token_services_public_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/public.pem"
        token_services_private_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/tokenKeypair.pem"

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        mds_super_user: mds
        mds_super_user_password: password

        kafka_broker_ldap_user: kafka_broker
        kafka_broker_ldap_password: password

        kafka_controller_ldap_user: kafka_controller
        kafka_controller_ldap_password: password

        schema_registry_ldap_user: schema_registry
        schema_registry_ldap_password: password

        kafka_connect_ldap_user: kafka_connect
        kafka_connect_ldap_password: password

        ksql_ldap_user: ksql
        ksql_ldap_password: password

        kafka_rest_ldap_user: kafka_rest
        kafka_rest_ldap_password: password

        control_center_ldap_user: control_center
        control_center_ldap_password: password

        rbac_component_additional_system_admins:
          - User:user1

        auth_mode: ldap_with_oauth
        oauth_superuser_client_id: superuser
        oauth_superuser_client_password: my-secret

        oauth_sub_claim: client_id
        oauth_groups_claim: groups
        oauth_token_uri: http://oauth1:8080/realms/cp-ansible-realm/protocol/openid-connect/token
        oauth_issuer_url: http://oauth1:8080/realms/cp-ansible-realm
        oauth_jwks_uri: http://oauth1:8080/realms/cp-ansible-realm/protocol/openid-connect/certs
        oauth_expected_audience: Confluent,account,api://default

        # needed for sr health checks
        schema_registry_oauth_user: schema_registry
        schema_registry_oauth_password: my-secret

        kafka_rest_oauth_user: kafka_rest
        kafka_rest_oauth_password: my-secret

        kafka_connect_auth_mode: ldap # no oauth server on connect
        kafka_connect_oauth_user: kafka_connect
        kafka_connect_oauth_password: my-secret

        control_center_oauth_user: control_center
        control_center_oauth_password: my-secret

        ksql_oauth_user: ksql
        ksql_oauth_password: my-secret

      schema-registry: # sr to remain ldap client instead of oauth client
        auth_mode: ldap

      mds:
        kafka_broker_custom_properties:
          ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
          ldap.com.sun.jndi.ldap.read.timeout: 3000
          ldap.java.naming.provider.url: ldaps://mds-ldap1:636
          ldap.java.naming.security.protocol: SSL
          ldap.ssl.truststore.location: /var/ssl/private/kafka_broker.truststore.jks
          ldap.ssl.truststore.password: confluenttruststorepass
          ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
          ldap.java.naming.security.credentials: password
          ldap.java.naming.security.authentication: simple
          ldap.user.search.base: OU=rbac,DC=example,DC=com
          ldap.group.search.base: OU=rbac,DC=example,DC=com
          ldap.user.name.attribute: uid
          ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.group.name.attribute: cn
          ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.user.object.class: account

      cluster2:
        external_mds_enabled: true

        mds_broker_bootstrap_servers: mds-kafka-broker1:9092,mds-kafka-broker2:9092
        mds_bootstrap_server_urls: https://mds-kafka-broker1:8090,https://mds-kafka-broker2:8090
        mds_broker_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: oauth

      ldap_server:
        ldaps_enabled: true
        ldaps_custom_certs: true
        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"

        ldap_admin_password: ldppassword

        ldap_rbac_group: rbac
        ldap_dc: example
        ldap_dc_extension: com

        ldap_users:
          - username: "{{kafka_broker_ldap_user}}"
            password: "{{kafka_broker_ldap_password}}"
            uid: 9999
            guid: 99
          - username: "{{schema_registry_ldap_user}}"
            password: "{{schema_registry_ldap_password}}"
            uid: 9998
            guid: 98
          - username: "{{kafka_connect_ldap_user}}"
            password: "{{kafka_connect_ldap_password}}"
            uid: 9997
            guid: 97
          - username: "{{ksql_ldap_user}}"
            password: "{{ksql_ldap_password}}"
            uid: 9996
            guid: 96
          - username: "{{control_center_ldap_user}}"
            password: "{{control_center_ldap_password}}"
            uid: 9995
            guid: 95
          - username: "{{kafka_rest_ldap_user}}"
            password: "{{kafka_rest_ldap_password}}"
            uid: 9994
            guid: 94
          - username: "{{mds_super_user}}"
            password: "{{mds_super_user_password}}"
            uid: 9993
            guid: 93
          - username: user1
            password: user1p
            uid: 9992
            guid: 92
          - username: "{{kafka_controller_ldap_user}}"
            password: "{{kafka_controller_ldap_password}}"
            uid: 9991
            guid: 91
