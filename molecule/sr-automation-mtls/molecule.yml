---
### Schema Registry Automation Workflow Testing Configuration
### Tests SR automation features including exporters, importers, and switchover workflow
### Uses multiple SR instances to simulate CP SR -> CC SR automation

name: sr_automation_mtls
platforms:
  - name: controller1
    hostname: controller1.confluent
    groups:
      - kafka_controller
    image: geerlingguy/docker-ubuntu2404-ansible
    dockerfile: Dockerfile-ubuntu-java21.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent

  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-ubuntu2404-ansible
    dockerfile: Dockerfile-ubuntu-java21.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent

  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-ubuntu2404-ansible
    dockerfile: Dockerfile-ubuntu-java21.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent

  # Primary Schema Registry (simulates CP SR)
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: geerlingguy/docker-ubuntu2404-ansible
    dockerfile: Dockerfile-ubuntu-java21.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent

  # Mock Confluent Cloud Schema Registry (simulates CC SR target)
  - name: mock-cc-schema-registry
    hostname: mock-cc-schema-registry.confluent
    groups:
      - mock_cc_schema_registry
    image: geerlingguy/docker-ubuntu2404-ansible
    dockerfile: Dockerfile-ubuntu-java21.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent

provisioner:
  playbooks:
    prepare: sr_automation_prepare.yml
    converge: sr_automation_converge.yml
    verify: sr_automation_verify.yml
  inventory:
    group_vars:
      all:
        scenario_name: sr_automation_mtls
        # SR Automation specific variables (applies to both CP and mock CC)
        password_encoder_secret: "test-secret-123"
        
        # SR Automation components (global - applies to all hosts for workflow)
        unified_stream_manager:
          schema_registry_endpoint: "https://mock-cc-schema-registry:8081"
          authentication_type: basic
          basic_username: "cc-api-key"
          basic_password: "cc-api-secret"
          remote_context: ""
        
        # Schema Exporters for testing - Basic auth to mock CC SR
        schema_exporters:
          - name: "test-schema-exporter"
            subjects: ["test.*", "automation.*"]
            context_type: "AUTO"
            config:
              schema_registry_endpoint: "https://mock-cc-schema-registry:8081"
              authentication_type: basic
              basic_username: "exporter-api-key"
              basic_password: "client-secret"
        
        # Schema Importers for reverse sync testing - Basic auth from mock CC SR
        schema_importers:
          - name: "test-schema-importer"
            subjects: ["*"]
            config:
              schema_registry_endpoint: "https://mock-cc-schema-registry:8081"
              authentication_type: basic
              basic_username: "importer-api-key"
              basic_password: "client-secret"
        
        # Specify exporter for switchover testing
        sr_switch_over_exporter_name: "test-schema-exporter"
        
      # CP Schema Registry configuration (only applies to CP components)
      schema_registry:
        # SSL/TLS configuration
        ssl_enabled: true
        ssl_mutual_auth_enabled: true
        schema_registry_authentication_type: mtls
        schema_registry_ssl_mutual_auth_enabled: true

      # Kafka configuration
      kafka_broker:
        ssl_enabled: true
        ssl_mutual_auth_enabled: true

      kafka_controller:
        ssl_enabled: true
        ssl_mutual_auth_enabled: true

      # Primary Schema Registry (CP SR simulation)
      schema_registry:
        schema_registry_custom_properties:
          # Enable automation features
          usm.schema.registry.remote.endpoint.validation.enabled: false
          # Additional test properties
          schema.registry.inter.instance.protocol: "https"

    host_vars:
      # Mock CC Schema Registry configuration - Basic Auth (like real CC)
      mock-cc-schema-registry:
        schema_registry_listener_port: 8081
        schema_registry_http_protocol: https
        schema_registry_authentication_type: basic
        # CC uses regular TLS, not mutual TLS
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        schema_registry_ssl_mutual_auth_enabled: false
        schema_registry_authentication_type: basic
        schema_registry_basic_users:
          client:
            principal: client
            password: client-secret
            roles: client,developer,admin

verifier:
  name: ansible