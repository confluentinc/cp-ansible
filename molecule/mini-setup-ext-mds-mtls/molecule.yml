---
### Installs Confluent Platform Cluster on ubi9.
### RBAC over mTLS enabled.
### Centralized MDS.
### File based login to C3 using overrides.
### USM Agent Authentication Configuration - MTLS AUTHENTICATION with custom certs.
driver:
  name: docker
platforms:
  - name: mds-controller1
    hostname: mds-controller1.confluent
    groups:
      - kafka_controller
      - mds
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker1
    hostname: mds-kafka-broker1.confluent
    groups:
      - kafka_broker
      - mds
    image: redhat/ubi9-minimal
    published_ports:
      - "8090:8090"
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller1
    hostname: controller1.confluent
    groups:
      - kafka_controller2
      - cluster2
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry2
      - cluster2
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest2
      - cluster2
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect2
      - cluster2
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql2
      - cluster2
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center-next-gen
    hostname: control-center-next-gen.confluent
    groups:
      - control_center_next_gen2
      - cluster2
    image: redhat/ubi9-minimal
    published_ports:
      - "9022:9022"
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: usm-agent
    hostname: usm-agent1.confluent
    groups:
      - usm_agent
      - cluster2
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ccloud-mock-service
    hostname: ccloud-mock-service.confluent
    groups:
      - ccloud_mock
    image: usmagent-mock-ccloud:latest
    pre_build_image: true
    command: ""
    published_ports:
      - "8081:8081"
    networks:
      - name: confluent
    env:
      MOCK_SERVER_HOST: "0.0.0.0"
      MOCK_SERVER_PORT: "8081"
      MOCK_SERVER_USE_TLS: "false"
      MOCK_SERVER_REQUIRE_BASIC_AUTH: "true"
      MOCK_SERVER_USERNAME: "ccloud-user"
      MOCK_SERVER_PASSWORD: "ccloud-secret"
      MOCK_SERVER_REQUIRE_MTLS: "false"
provisioner:
  playbooks:
    converge: ../multi_rbac_converge.yml
  inventory:
    host_vars:
      ccloud-mock-service:
        ansible_connection: local
        gather_facts: false
      usm-agent1:
        usm_agent_custom_properties:
          confluent.usm-agent.ccloud.ssl.enabled: "false"
        usm_agent_health_check_enabled: false
    group_vars:
      all:
        control_center_next_gen_port: 9022
        control_center_next_gen_dependency_prometheus_ssl_enabled: true
        control_center_next_gen_dependency_prometheus_basic_auth_enabled: true
        control_center_next_gen_dependency_alertmanager_ssl_enabled: true
        control_center_next_gen_dependency_alertmanager_basic_auth_enabled: true
        mask_secrets: false

        rbac_enabled: true
        auth_mode: mtls

        kafka_broker_custom_listeners:
          external_listener:
            name: EXTERNAL
            port: 9093
            ssl_enabled: true
            ssl_client_authentication: required

        ssl_enabled: true
        ssl_client_authentication: required
        mds_ssl_client_authentication: required

        mds_file_based_user_store_enabled: true
        mds_file_based_user_store_src_path: /tmp/credentials
        mds_file_based_user_store_dest_path: /etc/kafka/credentials
        mds_file_based_user_store_remote_src: true # credentials file already on target node

        create_mds_certs: false
        token_services_public_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/public.pem"
        token_services_private_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/tokenKeypair.pem"

        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass

        impersonation_super_users:
          - 'CN=kafka-broker1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'
          - 'CN=schema-registry1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'
          - 'CN=kafka-connect1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'
          - 'CN=kafka-rest1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'

        rbac_component_additional_system_admins:
          - user1
          - Group:group1

        # setups /etc/hosts on ec2 to allow delegate_to: localhost to make requests to MDS url by making the url resolvable
        docker_containers:
          - mds-controller1
          - mds-kafka-broker1
          - controller1
          - kafka-broker1
          - schema-registry1

        usm_agent_basic_auth_enabled: false
        usm_agent_ssl_enabled: true
        usm_agent_ssl_mutual_auth_enabled: true

        # USM Agent Configuration - CCloud Mock Server
        ccloud_endpoint: http://ccloud-mock-service:8081
        ccloud_environment_id: env-mock-123
        ccloud_credential:
          username: ccloud-user
          password: ccloud-secret

      mds:
        kafka_broker_cluster_name: 'mds'

      cluster2:
        kafka_broker_cluster_name: 'second-cluster'
        external_mds_enabled: true
        mds_broker_bootstrap_servers: mds-kafka-broker1:9093
        mds_bootstrap_server_urls: https://mds-kafka-broker1:8090

        mds_broker_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: none

        ssl_enabled: true
        ssl_mutual_auth_enabled: true
        ssl_client_authentication: required

        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass

        mds_super_user_external_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/mds-kafka-broker1-ca1-signed.crt"
        mds_super_user_external_key_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/mds-kafka-broker1-key.pem"
