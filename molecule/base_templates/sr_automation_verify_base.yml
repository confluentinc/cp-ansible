---
### SR Automation Workflow Verification Playbook - Base Template
### This template can be imported by scenario-specific verify playbooks
### Validates SR automation workflow functionality across different security configurations

- name: Verify Schema Registry Automation Configuration
  hosts: schema_registry
  gather_facts: false
  vars:
    # Dynamic auth headers based on scenario
    sr_auth_headers: "{{ 
      {'Authorization': 'Bearer ' + oauth_token} if schema_registry_oauth_enabled | default(false)
      else {} 
    }}"
    sr_client_cert: "{{ ssl_file_dir_final }}/schema_registry.crt if ssl_mutual_auth_enabled | default(false) else omit }}"
    sr_client_key: "{{ ssl_file_dir_final }}/schema_registry.key if ssl_mutual_auth_enabled | default(false) else omit }}"
    
  tasks:
    - name: Check core automation properties are configured
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: kafkastore.update.handlers
        expected_value: io.confluent.schema.exporter.storage.SchemaExporterUpdateHandler
      tags: config

    - name: Check password encoder secret is configured
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: password.encoder.secret
        expected_value: "{{ password_encoder_secret }}"
      tags: config

    - name: Check USM remote endpoint configuration
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: usm.schema.registry.remote.endpoint
        expected_value: "{{ unified_stream_manager.schema_registry_endpoint }}"
      when: unified_stream_manager.schema_registry_endpoint != 'none'
      tags: config

    - name: Check resource extension classes for automation
      shell: |
        grep "schema.registry.resource.extension.class.*SchemaExporterResourceExtension" /etc/schema-registry/schema-registry.properties
      register: extension_check
      changed_when: false
      failed_when: extension_check.rc != 0
      tags: config

- name: Verify Schema Registry API Functionality
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Wait for Schema Registry to be ready
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        validate_certs: false
        client_cert: "{{ sr_client_cert }}"
        client_key: "{{ sr_client_key }}"
        headers: "{{ sr_auth_headers }}"
        status_code: 200
      retries: 10
      delay: 5
      tags: api

    - name: Get subjects list for validation
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        validate_certs: false
        client_cert: "{{ sr_client_cert }}"
        client_key: "{{ sr_client_key }}"
        headers: "{{ sr_auth_headers }}"
        status_code: 200
      register: subjects_list
      tags: api

    - name: Verify test schemas exist
      assert:
        that:
          - "'test.user-value' in subjects_list.json"
          - "'automation.workflow-value' in subjects_list.json"
        fail_msg: "Test schemas were not created successfully"
      tags: api

- name: Verify Schema Automation Features
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Check exporters endpoint accessibility
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters"
        method: GET
        validate_certs: false
        client_cert: "{{ sr_client_cert }}"
        client_key: "{{ sr_client_key }}"
        headers: "{{ sr_auth_headers }}"
        status_code: 200
      register: exporters_list
      tags: automation

    - name: Check importers endpoint accessibility
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers"
        method: GET
        validate_certs: false
        client_cert: "{{ sr_client_cert }}"
        client_key: "{{ sr_client_key }}"
        headers: "{{ sr_auth_headers }}"
        status_code: 200
      register: importers_list
      tags: automation

    - name: Check if test exporter was created
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}"
        method: GET
        validate_certs: false
        client_cert: "{{ sr_client_cert }}"
        client_key: "{{ sr_client_key }}"
        headers: "{{ sr_auth_headers }}"
        status_code: [200, 404]
      register: exporter_check
      ignore_errors: true
      when: sr_switch_over_exporter_name is defined
      tags: automation

    - name: Verify exporter configuration if it exists
      block:
        - name: Check exporter status
          uri:
            url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}/status"
            method: GET
            validate_certs: false
            client_cert: "{{ sr_client_cert }}"
            client_key: "{{ sr_client_key }}"
            headers: "{{ sr_auth_headers }}"
            status_code: 200
          register: exporter_status
          
        - name: Verify exporter is in expected state
          assert:
            that:
              - exporter_status.json.state in ['RUNNING', 'PAUSED']
            fail_msg: "Exporter is not in expected state: {{ exporter_status.json.state }}"

        - name: Check exporter configuration
          uri:
            url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}/config"
            method: GET
            validate_certs: false
            client_cert: "{{ sr_client_cert }}"
            client_key: "{{ sr_client_key }}"
            headers: "{{ sr_auth_headers }}"
            status_code: 200
          register: exporter_config
          
        - name: Verify exporter target endpoint
          assert:
            that:
              - exporter_config.json['schema.registry.url'] == unified_stream_manager.schema_registry_endpoint
            fail_msg: "Exporter endpoint mismatch: {{ exporter_config.json['schema.registry.url'] }}"
      when: 
        - exporter_check.status == 200
        - sr_switch_over_exporter_name is defined
      tags: automation

- name: Verify Security Configuration
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Check Schema Registry mode
      uri:
        url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/mode"
        method: GET
        validate_certs: false
        client_cert: "{{ sr_client_cert }}"
        client_key: "{{ sr_client_key }}"
        headers: "{{ sr_auth_headers }}"
        status_code: 200
      register: sr_mode_check
      tags: security

    - name: Verify Schema Registry is in correct mode
      assert:
        that:
          - sr_mode_check.json.mode in ['READWRITE', 'READONLY', 'IMPORT', 'FORWARD']
        fail_msg: "Schema Registry is in unexpected mode: {{ sr_mode_check.json.mode }}"
      tags: security

    - name: Display automation workflow test summary
      debug:
        msg: |
          SR Automation Workflow Test Results ({{ scenario_name | default('unknown') }}):
          ✓ Schema Registry Mode: {{ sr_mode_check.json.mode }}
          ✓ Security Configuration: {{ 'mTLS' if ssl_mutual_auth_enabled | default(false) else ('OAuth' if oauth_enabled | default(false) else ('LDAP' if ldap_enabled | default(false) else 'Plaintext')) }}
          ✓ Available Exporters: {{ exporters_list.json | length }}
          ✓ Available Importers: {{ importers_list.json | length }}
          ✓ Test Schemas Created: {{ subjects_list.json | select('match', '(test|automation)\..*') | list | length }}
          ✓ Automation Features: {{ 'ENABLED' if (exporters_list.json | length > 0 or importers_list.json | length > 0) else 'DISABLED' }}
      tags: summary