---
- name: Install OpenSSL Rsync and Java
  hosts: kafka_broker[0]
  tasks:
    - name: Install OpenSSL Rsync and Java
      yum:
        name:
          - openssl
          - rsync
          - java-17-openjdk
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install OpenSSL Rsync and Java
      apt:
        name:
          - openssl
          - rsync
          - openjdk-11-jdk
        state: present
      when: ansible_os_family == "Debian"

    - name: Get Java Path
      shell: dirname $(dirname $(readlink -f $(which java)))
      register: java_path
      when:
        - fips_enabled|default(false) | bool
        - ansible_os_family == "RedHat" and ansible_distribution_major_version in ['8', '9']

    - name: Disable JVM level FIPS
      lineinfile:
        path: "{{java_path.stdout}}/conf/security/java.security"
        search_string: 'security.useSystemPropertiesFile=true'
        line: security.useSystemPropertiesFile=false
        owner: root
        group: root
        mode: '0644'
      when:
        - fips_enabled|default(false) | bool
        - ansible_os_family == "RedHat" and ansible_distribution_major_version in ['8', '9']

    - name: Configure crypto policies
      shell: update-crypto-policies --set FIPS
      when:
        - fips_enabled|default(false) | bool
        - ansible_os_family == "RedHat" and ansible_distribution_major_version in ['8', '9']

    - name: Create SSL Certificate Generation Directory
      file:
        path: /var/ssl/private/generation
        state: directory
        mode: '755'

    - name: Copy in cert generation files in
      copy:
        src: "{{item}}"
        dest: "/var/ssl/private/generation/{{item|basename}}"
        mode: '777'
      loop:
        - certs-create.sh

    - name: Create certificate hosts file
      block:
        - name: Copy certificate hosts file
          copy:
            src: "{{item}}"
            dest: "/var/ssl/private/generation/{{item|basename}}"
            mode: '777'
          loop:
            - "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/certificate-hosts"
      rescue:
        - shell: touch /var/ssl/private/generation/certificate-hosts

        - name: Write zookeeper hostnames for cert creation
          lineinfile:
            line: "zookeeper:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['zookeeper']}}"
          when: groups['zookeeper'] is defined

        - name: Write Kraft Controller hostnames for cert creation
          lineinfile:
            line: "kafka_controller:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['kafka_controller']}}"
          when: groups['kafka_controller'] is defined

        - name: Write kafka hostnames for cert creation
          lineinfile:
            line: "kafka_broker:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['kafka_broker']}}"
          when: groups['kafka_broker'] is defined

        - name: Write sr hostnames for cert creation
          lineinfile:
            line: "schema_registry:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['schema_registry']}}"
          when: groups['schema_registry'] is defined

        - name: Write kafka_connect hostnames for cert creation
          lineinfile:
            line: "kafka_connect:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['kafka_connect']}}"
          when: groups['kafka_connect'] is defined

        - name: Write kafka_rest hostnames for cert creation
          lineinfile:
            line: "kafka_rest:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['kafka_rest']}}"
          when: groups['kafka_rest'] is defined

        - name: Write ksql hostnames for cert creation
          lineinfile:
            line: "ksql:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['ksql']}}"
          when: groups['ksql'] is defined

        - name: Write control_center hostnames for cert creation
          lineinfile:
            line: "control_center:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['control_center']}}"
          when: groups['control_center'] is defined

        - name: Write ldap hostnames for cert creation
          lineinfile:
            line: "openldap:{{item}}"
            path: /var/ssl/private/generation/certificate-hosts
          loop: "{{groups['ldap_server']}}"
          when: groups['ldap_server'] is defined

    - name: Install bind utils
      yum:
        name:
          - bind-utils
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install bind utils
      apt:
        name:
          - dnsutils
        state: present
      when: ansible_os_family == "Debian"

    - name: Run
      shell: |
        ./certs-create.sh {{molecule_certs_format|default('PKCS12')|lower}}{% if molecule_add_extra_cert|default(False)|bool %} true{% endif %}
      args:
        chdir: /var/ssl/private/generation/

    - name: Copy Generated SSL Files Back to Ansible Host
      synchronize:
        src: /var/ssl/private/generation/
        dest: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files"
        mode: pull

    - name: Delete SSL Certificate Generation Directory
      file:
        path: /var/ssl/private/generation
        state: absent

- name: Copy certs on remote src
  hosts: all
  tasks:
    - name: Create the directory on Remote Hosts
      file:
        path: "{{ ssl_ca_cert_filepath | dirname }}"
        state: directory
        mode: 0755
      when: ssl_custom_certs_remote_src | default(false)
    - name: Copy CA Cert Filepath to remote Host
      copy:
        src: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        dest: "{{ ssl_ca_cert_filepath }}"
      when: ssl_custom_certs_remote_src | default(false)
    - name: Copy Signed Cert Files to remote Host
      copy:
        src: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        dest: "{{ ssl_signed_cert_filepath }}"
      when: ssl_custom_certs_remote_src | default(false)
    - name: Copy Key filepath to remote Host
      copy:
        src: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        dest: "{{ ssl_key_filepath }}"
      when: ssl_custom_certs_remote_src | default(false)
    - name: Remove CA Cert file from Local Host
      file:
        path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        state: absent
      delegate_to: localhost
      when: ssl_custom_certs_remote_src | default(false)
    - name: Remove Signed Cert Files from Local Host
      file:
        path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        state: absent
      delegate_to: localhost
      when: ssl_custom_certs_remote_src | default(false)
    - name: Remove Key filepath from Local Host
      file:
        path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        state: absent
      delegate_to: localhost
      when: ssl_custom_certs_remote_src | default(false)
