---
### Installation of Confluent Platform on RHEL8.
### MTLS enabled.
### Installs Three unique Kafka Connect Clusters with unique connectors.
### Installs two unique KSQL Clusters.

driver:
  name: docker
platforms:
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
      - syslog
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect2
    hostname: kafka-connect2.confluent
    groups:
      - kafka_connect
      - elastic
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect3
    hostname: kafka-connect3.confluent
    groups:
      - kafka_connect
      - ssl
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
      - ks1
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql2
    hostname: ksql2.confluent
    groups:
      - ksql
      - ks2
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql3
    hostname: ksql3.confluent
    groups:
      - ksql
      - ks2
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center1
    hostname: control-center1.confluent
    groups:
      - control_center
    image: redhat/ubi8-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9021:9021"
    networks:
      - name: confluent
provisioner:
  inventory:
    host_vars:
      # ksql1 will not have an advertised listener, validating the defaulting logic
      ksql2:
        ksql_advertised_listener_hostname: ksql2.confluent
      ksql3:
        ksql_advertised_listener_hostname: ksql3.confluent

    group_vars:
      all:
        ssl_enabled: true
        ssl_mutual_auth_enabled: true
        kafka_connect_deploy_connector_timeout: 30
        # To run the FileStream connector, you must add the filestream-connectors path in the plugin.path
        kafka_connect_custom_properties:
          plugin.path: "/usr/share/filestream-connectors,/usr/share/java/connect_plugins"
      # connect clusters
      ssl:
        kafka_connect_group_id: connect-ssl
      syslog:
        kafka_connect_group_id: connect-syslog
        # Create Connector without ssl
        kafka_connect_ssl_enabled: false
        kafka_connect_ssl_mutual_auth_enabled: false
        kafka_connect_connectors:
          - name: sample-connector-1
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "1"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"
      elastic:
        kafka_connect_group_id: connect-elastic
        kafka_connect_ssl_enabled: true
        kafka_connect_ssl_mutual_auth_enabled: true
        kafka_connect_connectors:
          - name: sample-connector-2
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "1"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"

      # ksql clusters
      ks1:
        ksql_service_id: ksql1_
      ks2:
        ksql_service_id: ksql2_
        ksql_ssl_enabled: false

      control_center:
        ksql_cluster_ansible_group_names:
          - ks1
          - ks2
        kafka_connect_cluster_ansible_group_names:
          - syslog
          - elastic
          - ssl
