### connect-scale-up
## Tests Scale up of kafka Connect cluster
## Brings up a connect cluster with 3 nodes in Create/Prepare phase, then in converge phase it adds 2 more nodes of connect to the clusters.
##
---
platforms:
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
      - cluster1
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect2
    hostname: kafka-connect2.confluent
    groups:
      - kafka_connect
      - cluster2
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect3
    hostname: kafka-connect3.confluent
    groups:
      - kafka_connect
      - ssl
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect4
    hostname: kafka-connect4.confluent
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect5
    hostname: kafka-connect5.confluent
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center1
    hostname: control-center1.confluent
    groups:
      - control_center
    image: rockylinux:9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9021:9021"
    networks:
      - name: confluent
provisioner:
  ansible_args:
    - --skip-tags=validate_memory_usage
  playbooks:
    converge: converge.yml
  inventory:
    group_vars:
      all:
        ssl_enabled: true
        ssl_mutual_auth_enabled: true
        redhat_java_package_name: java-11-openjdk
        # To run the FileStream connector, you must add the filestream-connectors path in the plugin.path
        kafka_connect_custom_properties:
          plugin.path: "/usr/share/filestream-connectors,/usr/share/java/connect_plugins"
      # connect clusters
      ssl:
        kafka_connect_group_id: connect-ssl
        # Create Connectors with ssl
        kafka_connect_ssl_enabled: true
        kafka_connect_ssl_mutual_auth_enabled: true
        kafka_connect_connectors:
          - name: sample-connector-3
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "5"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"
      cluster1:
        kafka_connect_group_id: connect-cluster1
        # Create Connectors without ssl
        kafka_connect_ssl_enabled: false
        kafka_connect_ssl_mutual_auth_enabled: false
        kafka_connect_connectors:
          - name: sample-connector-1
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "5"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"
      cluster2:
        kafka_connect_group_id: connect-cluster2
        # Create Connectors without ssl
        kafka_connect_ssl_enabled: false
        kafka_connect_ssl_mutual_auth_enabled: false
        kafka_connect_connectors:
          - name: sample-connector-2
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "5"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"

      control_center:
        kafka_connect_cluster_ansible_group_names:
          - cluster1
          - cluster2
          - ssl
scenario:
  create_sequence:
    - create
    - prepare
  converge_sequence:
    - converge
