---
### Installs Confluent Platform Cluster on RHEL8.
### SCRAM enabled.

driver:
  name: docker
platforms:
  - name: kerberos1
    hostname: kerberos1.confluent
    groups:
      - kerberos_server
    image: centos:centos8
    dockerfile: ../Dockerfile-centos8-base.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller1
    hostname: controller1.confluent
    groups:
      - kafka_controller
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller2
    hostname: controller2.confluent
    groups:
      - kafka_controller
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller3
    hostname: controller3.confluent
    groups:
      - kafka_controller
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center-next-gen
    hostname: control-center-next-gen.confluent
    groups:
      - control_center_next_gen
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9022:9022"
    networks:
      - name: confluent
  - name: usm-agent1
    hostname: usm-agent1.confluent
    groups:
      - usm_agent
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ccloud-mock-service
    hostname: ccloud-mock-service.confluent
    groups:
      - ccloud_mock
    image: usmagent-mock-ccloud:latest
    pre_build_image: true
    command: ""
    networks:
      - name: confluent
    env:
      MOCK_SERVER_HOST: "0.0.0.0"
      MOCK_SERVER_PORT: "8081"
      MOCK_SERVER_USE_TLS: "false"
      MOCK_SERVER_REQUIRE_BASIC_AUTH: "true"
      MOCK_SERVER_USERNAME: "ccloud-user"
      MOCK_SERVER_PASSWORD: "ccloud-secret"
      MOCK_SERVER_REQUIRE_MTLS: "false"
provisioner:
  playbooks:
    converge: ../collections_converge.yml
  inventory:
    host_vars:
      ccloud-mock-service:
        ansible_connection: local
        gather_facts: false
      usm-agent1:
        usm_agent_custom_properties:
          confluent.usm-agent.ccloud.ssl.enabled: false
          usm_agent_health_check_enabled: false
    group_vars:
      all:
        control_center_next_gen_port: 9022
        control_center_next_gen_dependency_prometheus_basic_auth_enabled: true
        control_center_next_gen_dependency_alertmanager_basic_auth_enabled: true
        sasl_protocol: scram,scram256
        kafka_controller_sasl_protocol: kerberos
        mask_secrets: false

        # USM Agent CCloud Configuration
        ccloud_credential:
          username: "ccloud-user"
          password: "ccloud-secret"
        ccloud_endpoint: "http://ccloud-mock-service:8081"
        ccloud_environment_id: "env-123"

        # USM Agent Authentication Configuration - BASIC AUTHENTICATION
        usm_agent_basic_auth_enabled: true
        usm_agent_ssl_enabled: false
        usm_agent_ssl_mutual_auth_enabled: false
        # USM Agent Basic Users Configuration
        usm_agent_basic_users:
          admin:
            principal: admin
            password: admin-secret
          user1:
            principal: user1
            password: user1-secret
          user2:
            principal: user2
            password: user2-secret

        # Client credentials for USM Agent (required for basic auth)
        usm_agent_client_username: "user1"
        usm_agent_client_password: "user1-secret"

        kafka_broker_configure_control_plane_listener: true

        kerberos:
          realm: realm.example.com
          kdc_hostname: kerberos1
          admin_hostname: kerberos1

          kerberos_client_config_file_dest: /krb/krb5.conf

      kafka_controller:
        kafka_controller_kerberos_principal: "kafka-a/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_controller_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_controller-{{inventory_hostname}}.keytab"

      kafka_broker:
        kafka_broker_kerberos_principal: "kafka-a/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_broker_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_broker-{{inventory_hostname}}.keytab"

      kerberos_server:
        realm_name: "{{ kerberos.realm | upper }}"

        keytab_output_directory: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs"

        kerberos_principals:
          - principal: "kafka-a/controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-controller1.keytab"

          - principal: "kafka-a/controller2.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-controller2.keytab"

          - principal: "kafka-a/controller3.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-controller3.keytab"

          - principal: "kafka-a/kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker1.keytab"
