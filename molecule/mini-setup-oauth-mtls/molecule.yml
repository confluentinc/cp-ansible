---
### Installs Confluent Platform Cluster on ubi9.
### RBAC over mTLS+OAuth enabled.
### SSO authentication using OIDC in Control center using Okta IdP.

driver:
  name: docker
platforms:
  - name: oauth1
    hostname: oauth1.confluent
    groups:
      - oauth_server
    image: quay.io/keycloak/keycloak:latest
    env:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: oauth1
      KC_HTTPS_CERTIFICATE_FILE: /idp-cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /idp-key.pem
      KEYCLOAK_HTTP_PORT: "8080"
      KEYCLOAK_HTTPS_PORT: "8443"
    dockerfile: ../Dockerfile-oauth.j2
    published_ports:
      - "8080:8080"
      - "8443:8443"
    command: start-dev
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller1
    hostname: controller1.confluent
    groups:
      - kafka_controller
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center-next-gen1
    hostname: control-center-next-gen1.confluent
    groups:
      - control_center_next_gen
    image: redhat/ubi9-minimal
    published_ports:
      - "9022:9022"
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: usm-agent1
    hostname: usm-agent1.confluent
    groups:
      - usm_agent
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ccloud-mock-service
    hostname: ccloud-mock-service.confluent
    groups:
      - ccloud_mock
    image: usmagent-mock-ccloud:latest
    pre_build_image: true
    command: ""
    published_ports:
      - "8081:8081"
    networks:
      - name: confluent
    env:
      MOCK_SERVER_HOST: "0.0.0.0"
      MOCK_SERVER_PORT: "8081"
      MOCK_SERVER_USE_TLS: "false"
      MOCK_SERVER_REQUIRE_BASIC_AUTH: "true"
      MOCK_SERVER_USERNAME: "ccloud-user"
      MOCK_SERVER_PASSWORD: "ccloud-secret"
      MOCK_SERVER_REQUIRE_MTLS: "false"
provisioner:
  playbooks:
    converge: ../collections_converge.yml
  inventory:
    host_vars:
      ccloud-mock-service:
        ansible_connection: local
        gather_facts: false
      usm-agent1:
        usm_agent_custom_properties:
          confluent.usm-agent.ccloud.ssl.enabled: "false"
        usm_agent_health_check_enabled: false
    group_vars:
      all:
        control_center_next_gen_port: 9022
        control_center_next_gen_dependency_prometheus_ssl_enabled: true
        control_center_next_gen_dependency_prometheus_mtls_enabled: false
        control_center_next_gen_dependency_prometheus_basic_auth_enabled: true
        control_center_next_gen_dependency_alertmanager_ssl_enabled: true
        control_center_next_gen_dependency_alertmanager_mtls_enabled: false
        control_center_next_gen_dependency_alertmanager_basic_auth_enabled: true
        mask_secrets: false
        ssl_enabled: true
        ssl_client_authentication: required
        mds_ssl_client_authentication: required

        ssl_provided_keystore_and_truststore: true
        ssl_provided_keystore_and_truststore_remote_src: true


        ssl_keystore_key_password: keystorepass
        ssl_keystore_store_password: keystorepass
        ssl_truststore_password: truststorepass
        ssl_truststore_ca_cert_alias: CARoot

        token_services_public_pem_file: "/var/ssl/private/public.pem"
        token_services_private_pem_file: "/var/ssl/private/tokenKeypair.pem"

        rbac_enabled: true
        auth_mode: oauth

        impersonation_super_users:
          - 'CN=kafka-broker1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'
          - 'CN=schema-registry1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'
          - 'CN=kafka-connect1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'
          - 'CN=kafka-rest1.confluent,OU=QEIT,O=CONFLUENT,L=PaloAlto,ST=Ca,C=US'

        rbac_component_additional_system_admins:
          - user1
          - Group:group1

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        keycloak_oauth_server_port: 8443
        keycloak_http_protocol: https

        oauth_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/oauthcertfile.pem"
        oauth_superuser_client_id: superuser
        oauth_superuser_client_password: my-secret

        oauth_sub_claim: client_id
        oauth_groups_claim: groups
        oauth_token_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/token
        oauth_issuer_url: https://oauth1:8443/realms/cp-ansible-realm
        oauth_jwks_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/certs
        oauth_expected_audience: Confluent,account,api://default

        schema_registry_oauth_user: schema_registry
        schema_registry_oauth_password: my-secret

        kafka_rest_oauth_user: kafka_rest
        kafka_rest_oauth_password: my-secret

        kafka_connect_oauth_user: kafka_connect
        kafka_connect_oauth_password: my-secret

        ksql_oauth_user: ksql
        ksql_oauth_password: my-secret

        control_center_next_gen_oauth_user: control_center_next_gen
        control_center_next_gen_oauth_password: my-secret

        sso_mode: oidc
        sso_groups_claim: groups
        sso_sub_claim: sub
        sso_groups_scope: groups
        sso_issuer_url: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7
        sso_jwks_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/keys
        sso_authorize_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/authorize
        sso_token_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/token
        sso_device_authorization_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/device/authorize
        sso_cli: true
        sso_client_id: ${OKTA_CLIENT:-user}
        sso_client_password: ${OKTA_PASSWORD:-pass}
        sso_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/ssocertfile.pem"

        # USM Agent Configuration - mTLS
        usm_agent_basic_auth_enabled: false
        usm_agent_ssl_enabled: true
        usm_agent_ssl_mutual_auth_enabled: true

        # USM Agent Configuration - CCloud Mock Server
        ccloud_endpoint: http://ccloud-mock-service:8081
        ccloud_environment_id: env-mock-123
        ccloud_credential:
          username: ccloud-user
          password: ccloud-secret

      usm_agent:
        ssl_keystore_filepath: "/var/ssl/private/usm_agent.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/usm_agent.truststore.jks"

      kafka_controller:
        ssl_keystore_filepath: "/var/ssl/private/controller.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/controller.truststore.jks"

      kafka_broker:
        ssl_keystore_filepath: "/var/ssl/private/kafka_broker.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/kafka_broker.truststore.jks"

      schema_registry:
        ssl_keystore_filepath: "/var/ssl/private/schema_registry.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/schema_registry.truststore.jks"

      kafka_rest:
        ssl_keystore_filepath: "/var/ssl/private/kafka_rest.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/kafka_rest.truststore.jks"

      kafka_connect:
        ssl_keystore_filepath: "/var/ssl/private/kafka_connect.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/kafka_connect.truststore.jks"

        kafka_connect_custom_properties:
          plugin.path: "/usr/share/filestream-connectors,/usr/share/java/connect_plugins"

        kafka_connect_connector_white_list: "test_topic"
        kafka_connect_connectors:
          - name: sample-connector-1
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "1"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic"
              key.converter: "org.apache.kafka.connect.json.JsonConverter"
              value.converter: "org.apache.kafka.connect.json.JsonConverter"

      ksql:
        ssl_keystore_filepath: "/var/ssl/private/ksql.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/ksql.truststore.jks"

      control_center_next_gen:
        ssl_keystore_filepath: "/var/ssl/private/control_center_next_gen.keystore.jks"
        ssl_truststore_filepath: "/var/ssl/private/control_center_next_gen.truststore.jks"

      cluster2:
        # keystore and truststore should be present on the Kraft controller node for migration
        ssl_keystore_filepath: "/var/ssl/private/controller1_mi.keystore.jks"
        ssl_keystore_key_password: keystorepass
        ssl_keystore_store_password: keystorepass
        ssl_truststore_filepath: "/var/ssl/private/controller1_mi.truststore.jks"
        ssl_truststore_password: truststorepass
        ssl_truststore_ca_cert_alias: CARoot
        token_services_public_pem_file: "/var/ssl/private/public.pem"
        token_services_private_pem_file: "/var/ssl/private/tokenKeypair.pem"
