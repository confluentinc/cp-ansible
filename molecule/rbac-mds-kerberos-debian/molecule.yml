---
### Installs two Confluent Platform Clusters on Debian9.
### RBAC enabled.
### Remote MDS from Cluster2 to Cluster1 (MDS).
### Custom TLS certificates.
### Kafka Broker Customer Listener
### RBAC Additional System Admin.

driver:
  name: docker
platforms:
  # LDAP and kerberos on centos, rest on debian
  - name: mds-ldap1
    hostname: mds-ldap1.confluent
    groups:
      - ldap_server
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kerberos1
    hostname: mds-kerberos1.confluent
    groups:
      - kerberos_server
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # MDS Zookeeper and Kafka
  - name: mds-${KRAFT_CONTROLLER:-zookeeper}1
    hostname: mds-${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - mds
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker1
    hostname: mds-kafka-broker1.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker2
    hostname: mds-kafka-broker2.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # Cluster 2 goups, groupnames will be changed during converge phase
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center1
    hostname: control-center1.confluent
    groups:
      - control_center2
      - cluster2
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9021:9021"
    networks:
      - name: confluent

provisioner:
  playbooks:
    converge: ../multi_rbac_converge.yml
  inventory:
    group_vars:
      # Shared properties among mds cluster and cluster2 groups (as well as kerberos and ldap)
      all:
        scenario_name: rbac-mds-kerberos-debian

        ssl_enabled: false
        sasl_protocol: kerberos

        rbac_enabled: true

        create_mds_certs: false
        token_services_public_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/public.pem"
        token_services_private_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/tokenKeypair.pem"

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        mds_super_user: mds
        mds_super_user_password: password

        kafka_controller_ldap_user: kafka_controller
        kafka_controller_ldap_password: password

        kafka_broker_ldap_user: kafka_broker
        kafka_broker_ldap_password: password

        schema_registry_ldap_user: schema_registry
        schema_registry_ldap_password: password

        kafka_connect_ldap_user: kafka_connect
        kafka_connect_ldap_password: password

        ksql_ldap_user: ksql
        ksql_ldap_password: password

        kafka_rest_ldap_user: kafka_rest
        kafka_rest_ldap_password: password

        control_center_ldap_user: control_center
        control_center_ldap_password: password

        rbac_component_additional_system_admins:
          - user1

        kerberos_kafka_broker_primary: kafka
        kerberos:
          realm: realm.example.com
          kdc_hostname: mds-kerberos1
          admin_hostname: mds-kerberos1

        zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        zookeeper_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/zookeeper-{{inventory_hostname}}.keytab"
        kafka_broker_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_broker_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_broker-{{inventory_hostname}}.keytab"
        kafka_controller_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_controller_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_controller-{{inventory_hostname}}.keytab"

        custom_java_path: /opt/jdk17 # Use custom Java 17

      mds:
        kafka_broker_custom_properties:
          ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
          ldap.com.sun.jndi.ldap.read.timeout: 3000
          ldap.java.naming.provider.url: ldap://mds-ldap1:389
          ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
          ldap.java.naming.security.credentials: password
          ldap.java.naming.security.authentication: simple
          ldap.user.search.base: OU=rbac,DC=example,DC=com
          ldap.group.search.base: OU=rbac,DC=example,DC=com
          ldap.user.name.attribute: uid
          ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.group.name.attribute: cn
          ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.user.object.class: account

      cluster2:
        external_mds_enabled: true

        mds_broker_bootstrap_servers: mds-kafka-broker1:9093,mds-kafka-broker2:9093
        mds_bootstrap_server_urls: http://mds-kafka-broker1:8090,http://mds-kafka-broker2:8090
        mds_broker_listener:
          ssl_enabled: false
          ssl_mutual_auth_enabled: false
          sasl_protocol: kerberos

      kerberos_server:
        realm_name: "{{ kerberos.realm | upper }}"

        keytab_output_directory: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs"

        # Creates kerberos principals for both mds cluster and cluster2
        kerberos_principals:
          - principal: "zookeeper/mds-zookeeper1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/zookeeper-mds-zookeeper1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/mds-controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-mds-controller1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/mds-kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-mds-kafka-broker1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/mds-kafka-broker2.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-mds-kafka-broker2.keytab"
          - principal: "zookeeper/zookeeper1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/zookeeper-zookeeper1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-controller1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker2.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker2.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker3.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker3.keytab"

      ldap_server:
        ldaps_enabled: false
        ldaps_custom_certs: false
        ldap_admin_password: ldppassword
        ldap_rbac_group: rbac
        ldap_dc: example
        ldap_dc_extension: com

        ldap_users:
          - username: "{{kafka_broker_ldap_user}}"
            password: "{{kafka_broker_ldap_password}}"
            uid: 9999
            guid: 99
          - username: "{{schema_registry_ldap_user}}"
            password: "{{schema_registry_ldap_password}}"
            uid: 9998
            guid: 98
          - username: "{{kafka_connect_ldap_user}}"
            password: "{{kafka_connect_ldap_password}}"
            uid: 9997
            guid: 97
          - username: "{{ksql_ldap_user}}"
            password: "{{ksql_ldap_password}}"
            uid: 9996
            guid: 96
          - username: "{{control_center_ldap_user}}"
            password: "{{control_center_ldap_password}}"
            uid: 9995
            guid: 95
          - username: "{{kafka_rest_ldap_user}}"
            password: "{{kafka_rest_ldap_password}}"
            uid: 9994
            guid: 94
          - username: "{{mds_super_user}}"
            password: "{{mds_super_user_password}}"
            uid: 9993
            guid: 93
          - username: "{{kafka_controller_ldap_user}}"
            password: "{{kafka_controller_ldap_password}}"
            uid: 9992
            guid: 92
