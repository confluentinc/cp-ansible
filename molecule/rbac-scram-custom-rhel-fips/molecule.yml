---
### Installs Confluent Platform Cluster on centos8.
### RBAC enabled.
### SCRAM enabled.
### TLS with custom certs enabled.
### Additional System Admins added.
### Additional Scram Users added.
### Kafka Connect Custom arguments.
### SSO authentication using OIDC in Control center using Azure IdP
### FIPS enabled

driver:
  name: docker
platforms:
  - name: ldap1${BUILD_NUMBER}
    hostname: ldap1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - ldap_server
    image: geerlingguy/docker-centos7-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: ${KRAFT_CONTROLLER:-zookeeper}1${BUILD_NUMBER}
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: ${KRAFT_CONTROLLER:-zookeeper}2${BUILD_NUMBER}
    hostname: ${KRAFT_CONTROLLER:-zookeeper}2${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: ${KRAFT_CONTROLLER:-zookeeper}3${BUILD_NUMBER}
    hostname: ${KRAFT_CONTROLLER:-zookeeper}3${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: kafka-broker1${BUILD_NUMBER}
    hostname: kafka-broker1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - kafka_broker
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: kafka-broker2${BUILD_NUMBER}
    hostname: kafka-broker2${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - kafka_broker
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: kafka-broker3${BUILD_NUMBER}
    hostname: kafka-broker3${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - kafka_broker
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: schema-registry1${BUILD_NUMBER}
    hostname: schema-registry1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - schema_registry
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: kafka-rest1${BUILD_NUMBER}
    hostname: kafka-rest1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - kafka_rest
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: kafka-connect1${BUILD_NUMBER}
    hostname: kafka-connect1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - kafka_connect
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: ksql1${BUILD_NUMBER}
    hostname: ksql1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - ksql
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent${BUILD_NUMBER}
  - name: control-center1${BUILD_NUMBER}
    hostname: control-center1${BUILD_NUMBER}.confluent${BUILD_NUMBER}
    groups:
      - control_center
    image: geerlingguy/docker-centos8-ansible
    # dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    ## Commenting below to avoid port collision on jenkins server
    ## Uncomment to view c3 in browser at localhost:9021
    #  published_ports:
    #    - "9021:9021"
    networks:
      - name: confluent${BUILD_NUMBER}
provisioner:
  inventory:
    group_vars:
      all:
        scenario_name: rbac-scram-custom-rhel-fips
        fips_enabled: true
        # Test additional scram user
        sasl_scram_users:
          client:
            principal: test
            password: test123

        ssl_enabled: true
        sasl_protocol: scram
        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass

        rbac_enabled: true
        sso_mode: oidc

        create_mds_certs: false
        token_services_public_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/public.pem"
        token_services_private_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/tokenKeypair.pem"

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        mds_super_user: mds
        mds_super_user_password: password

        schema_registry_ldap_user: schema_registry
        schema_registry_ldap_password: password

        kafka_connect_ldap_user: kafka_connect
        kafka_connect_ldap_password: password

        ksql_ldap_user: ksql
        ksql_ldap_password: password

        kafka_rest_ldap_user: kafka_rest
        kafka_rest_ldap_password: password

        control_center_ldap_user: control_center
        control_center_ldap_password: password

        rbac_component_additional_system_admins:
          - User:user1

        kafka_broker_additional_system_admins:
          - User:user2

        # necessary configs in MDS server for sso in C3
        sso_groups_claim: groups
        #sso_sub_claim: sub
        sso_issuer_url: https://login.microsoftonline.com/0893715b-959b-4906-a185-2789e1ead045/v2.0
        sso_jwks_uri: https://login.microsoftonline.com/0893715b-959b-4906-a185-2789e1ead045/discovery/v2.0/keys
        sso_authorize_uri: https://login.microsoftonline.com/0893715b-959b-4906-a185-2789e1ead045/oauth2/v2.0/authorize
        sso_token_uri: https://login.microsoftonline.com/0893715b-959b-4906-a185-2789e1ead045/oauth2/v2.0/token
        sso_client_id: ${AZURE_CLIENT:-user}
        sso_client_password: ${AZURE_PASSWORD:-pass}

        kafka_broker_custom_properties:
          ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
          ldap.com.sun.jndi.ldap.read.timeout: 3000
          ldap.java.naming.provider.url: "ldaps://{{ groups['ldap_server'][0] }}:636"
          ldap.java.naming.security.protocol: SSL
          ldap.ssl.truststore.location: /var/ssl/private/kafka_broker.truststore.jks
          ldap.ssl.truststore.password: confluenttruststorepass
          ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
          ldap.java.naming.security.credentials: password
          ldap.java.naming.security.authentication: simple
          ldap.user.search.base: OU=rbac,DC=example,DC=com
          ldap.group.search.base: OU=rbac,DC=example,DC=com
          ldap.user.name.attribute: uid
          ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.group.name.attribute: cn
          ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.user.object.class: account
          confluent.balancer.enable: "true"

        kafka_connect_service_environment_overrides:
          CLASSPATH: /usr/share/java/kafka-connect-replicator/*
        kafka_connect_custom_rest_extension_classes:
          - io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
        kafka_connect_custom_java_args: "-Djavax.net.ssl.trustStore={{kafka_connect_truststore_path}} -Djavax.net.ssl.trustStorePassword={{kafka_connect_truststore_storepass}}"

      ldap_server:
        ldaps_enabled: true
        ldaps_custom_certs: true
        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"

        ldap_admin_password: ldppassword

        ldap_rbac_group: rbac
        ldap_dc: example
        ldap_dc_extension: com

        ldap_users:
          - username: "{{schema_registry_ldap_user}}"
            password: "{{schema_registry_ldap_password}}"
            uid: 9998
            guid: 98
          - username: "{{kafka_connect_ldap_user}}"
            password: "{{kafka_connect_ldap_password}}"
            uid: 9997
            guid: 97
          - username: "{{ksql_ldap_user}}"
            password: "{{ksql_ldap_password}}"
            uid: 9996
            guid: 96
          - username: "{{control_center_ldap_user}}"
            password: "{{control_center_ldap_password}}"
            uid: 9995
            guid: 95
          - username: "{{kafka_rest_ldap_user}}"
            password: "{{kafka_rest_ldap_password}}"
            uid: 9994
            guid: 94
          - username: "{{mds_super_user}}"
            password: "{{mds_super_user_password}}"
            uid: 9993
            guid: 93
          - username: user1
            password: user1p
            uid: 9992
            guid: 92
          - username: user2
            password: user2p
            uid: 9991
            guid: 91
