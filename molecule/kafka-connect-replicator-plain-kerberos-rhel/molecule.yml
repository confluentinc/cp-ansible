---
### Installation of Confluent Platform on centos8 with two distinct clusters.
### Installation of Confluent Replicator.
### Cluster1 (MDS) is running SASL Plain with Custom Certs.
### Cluster2 is running Kerberos with TLS enabled.
### Replicator consumes from Cluster1 (MDS) using SASL Plain with Custom Certs for TLS.
### Replicator Produces to Cluster2 using Kerberos with Custom Certs for TLS.
### Tests custom client IDs for Replicator.

driver:
  name: docker
platforms:
  - name: mds-kerberos1
    hostname: mds-kerberos1.confluent
    groups:
      - kerberos_server
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-${KRAFT_CONTROLLER:-zookeeper}1
    hostname: mds-${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - mds
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker1
    hostname: mds-kafka-broker1.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker2
    hostname: mds-kafka-broker2.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker3
    hostname: mds-kafka-broker3.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # Cluster 2 goups, groupnames will be changed during converge phase
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}2
      - cluster2
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect-replicator1
    hostname: kafka_connect_replicator1.confluent
    groups:
      - kafka_connect_replicator2
      - cluster2
    image: geerlingguy/docker-centos8-ansible
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
provisioner:
  playbooks:
    converge: converge.yml
  inventory:
    group_vars:
      all:
        scenario_name: kafka-connect-replicator-plain-kerberos-rhel
        kerberos_kafka_broker_primary: kafka

        kerberos:
          realm: realm.example.com
          kdc_hostname: mds-kerberos1
          admin_hostname: mds-kerberos1

        kafka_broker_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_broker_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_broker-{{inventory_hostname}}.keytab"

      mds:
        _sasl_plain_users:
          admin:
            principal: admin
            password: admin-secret
          client:
            principal: client
            password: client-secret
          kafka_connect_replicator:
            principal: kafka_connect_replicator
            password: kafka_connect_replicator-secret
        sasl_protocol: plain
        ssl_enabled: true
        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass
        zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        zookeeper_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/zookeeper-{{inventory_hostname}}.keytab"
        kafka_controller_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_controller_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_controller-{{inventory_hostname}}.keytab"

      cluster2:
        ssl_enabled: true
        ssl_custom_certs: true
        sasl_protocol: kerberos

        external_mds_enabled: true

        mds_broker_bootstrap_servers: mds-kafka-broker1:9093,mds-kafka-broker2:9093
        mds_bootstrap_server_urls: https://mds-kafka-broker1:8090,https://mds-kafka-broker2:8090

        mds_broker_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: false
          sasl_protocol: plain

        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass

        zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        zookeeper_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/zookeeper-{{inventory_hostname}}.keytab"

        kafka_controller_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_controller_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka_controller-{{inventory_hostname}}.keytab"

      kafka_connect_replicator:

        installation_method: archive

        kafka_connect_replicator_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: false
          sasl_protocol: kerberos

        kafka_connect_replicator_white_list: test-replicator-source
        kafka_connect_replicator_bootstrap_servers: kafka-broker1:9092
        kafka_connect_replicator_kerberos_principal: "replicator/kafka-connect-replicator1.confluent@{{kerberos.realm | upper}}"
        kafka_connect_replicator_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka-connect-replicator1.keytab"
        kafka_connect_replicator_ssl_ca_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        kafka_connect_replicator_ssl_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        kafka_connect_replicator_ssl_key_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        kafka_connect_replicator_ssl_key_password: keypass
        kafka_connect_replicator_truststore_storepass: confluenttruststorepass
        kafka_connect_replicator_keystore_storepass: confluentkeystorestorepass

        kafka_connect_replicator_consumer_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: false
          sasl_protocol: plain

        kafka_connect_replicator_consumer_bootstrap_servers: mds-kafka-broker1:9092
        kafka_connect_replicator_consumer_ssl_ca_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        kafka_connect_replicator_consumer_ssl_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        kafka_connect_replicator_consumer_ssl_key_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        kafka_connect_replicator_consumer_ssl_key_password: keypass
        kafka_connect_replicator_consumer_custom_properties:
          client.id: consumer-test

        kafka_connect_replicator_producer_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: false
          sasl_protocol: kerberos

        kafka_connect_replicator_producer_bootstrap_servers: kafka-broker1:9092
        kafka_connect_replicator_producer_kerberos_principal: "replicator/kafka-connect-replicator1.confluent@{{kerberos.realm | upper}}"
        kafka_connect_replicator_producer_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka-connect-replicator1.keytab"
        kafka_connect_replicator_producer_ssl_ca_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        kafka_connect_replicator_producer_ssl_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        kafka_connect_replicator_producer_ssl_key_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        kafka_connect_replicator_producer_ssl_key_password: keypass
        kafka_connect_replicator_producer_custom_properties:
          client.id: producer-test

        kafka_connect_replicator_monitoring_interceptor_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: false
          sasl_protocol: kerberos

        kafka_connect_replicator_monitoring_interceptor_bootstrap_servers: kafka-broker1:9092
        kafka_connect_replicator_monitoring_interceptor_kerberos_principal: "replicator/kafka-connect-replicator1.confluent@{{kerberos.realm | upper}}"
        kafka_connect_replicator_monitoring_interceptor_kerberos_keytab_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs/kafka-connect-replicator1.keytab"
        kafka_connect_replicator_monitoring_interceptor_ssl_ca_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        kafka_connect_replicator_monitoring_interceptor_ssl_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        kafka_connect_replicator_monitoring_interceptor_ssl_key_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        kafka_connect_replicator_monitoring_interceptor_ssl_key_password: keypass

      kerberos_server:
        realm_name: "{{ kerberos.realm | upper }}"

        keytab_output_directory: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs"

        # Creates kerberos principals for both mds cluster and cluster2
        kerberos_principals:
          - principal: "zookeeper/zookeeper1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/zookeeper-zookeeper1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-controller1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker2.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker2.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker3.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker3.keytab"
          - principal: "replicator/kafka-connect-replicator1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka-connect-replicator1.keytab"
