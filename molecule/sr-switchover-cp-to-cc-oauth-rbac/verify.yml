---
### SR Automation Workflow Verification - OAuth + RBAC
### Includes base verification and adds OAuth + RBAC specific checks

- name: Verify mock CC Schema Registry Automation Configuration
  hosts: schema_registry
  gather_facts: false
  vars:

  tasks:
    - name: Check core automation properties are configured
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: kafkastore.update.handlers
        expected_value: io.confluent.schema.exporter.storage.SchemaExporterUpdateHandler,io.confluent.schema.manager.SchemaCacheManagerUpdateHandler

    - name: check mode of context test-context
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/mode/:.test-context:"
        method: GET
        result_var: mode_check
        operation_name: "Check Mode of Context"

    - name: verify context is in IMPORT mode
      assert:
        that:
          - mode_check.json.error_code == '42205'
        fail_msg: "Context is in READWRITE mode when it should be in IMPORT mode"
    
    - name: Create new test schema in CC SR for import testing
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects/test.test-value2/versions"
        method: POST
        expected_status: 200
        result_var: cc_new_schema_creation
        operation_name: "Create New Schema in CC SR for Import Test"
        request_body_format: json
        request_body:
          schema: |
            {
              "type": "record",
              "name": "ImportTest",
              "namespace": "import.test",
              "fields": [
                {"name": "test_id", "type": "string"},
                {"name": "test_data", "type": "string"},
                {"name": "created_at", "type": "long"},
                {"name": "import_flag", "type": "boolean", "default": true}
              ]
            }

- name: Rename Groups After CC Deployment
  hosts: cc_cluster
  gather_facts: false
  tasks:
    - name: "Rename CC Groups to Avoid Conflicts with CP Deployment"
      lineinfile:
        path: "{{inventory_dir}}/ansible_inventory.yml"
        regexp: "{{item}}:"
        line: "{{item}}_cc:"
      delegate_to: 127.0.0.1
      run_once: true
      loop:
        - kafka_controller
        - kafka_broker
        - schema_registry

- name: Rename Groups After CC Deployment
  hosts: all:!cc_cluster
  gather_facts: false
  tasks:
    - name: "Rename CP Groups to Standard Names for Deployment"
      lineinfile:
        path: "{{inventory_dir}}/ansible_inventory.yml"
        regexp: "{{item}}_cp:"
        line: "{{item}}:"
      delegate_to: 127.0.0.1
      run_once: true
      loop:
        - kafka_controller
        - kafka_broker
        - schema_registry

    - name: Refresh Inventory
      meta: refresh_inventory

- name: Load Variables for SR Automation Verification
  hosts: all
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.platform.variables

- name: Verify Schema Registry Automation Configuration
  hosts: schema_registry
  gather_facts: false
  vars:

  tasks:

    - name: Check password encoder secret is configured
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: password.encoder.secret
        expected_value: "{{ password_encoder_secret }}"
      tags: config

    - name: Check USM remote endpoint configuration
      import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: usm.schema.registry.remote.endpoint
        expected_value: "{{ unified_stream_manager.schema_registry_endpoint }}"
      when: unified_stream_manager.schema_registry_endpoint != 'none'
      tags: config

    - name: Check resource extension classes for automation
      shell: |
        grep "schema.registry.resource.extension.class.*SchemaExporterResourceExtension" /etc/schema-registry/schema-registry.properties
      register: extension_check
      changed_when: false
      failed_when: extension_check.rc != 0
      tags: config

- name: Verify Schema Registry API Functionality
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Wait for Schema Registry to be ready
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        expected_status: 200
        result_var: sr_ready_check
        operation_name: "Schema Registry API Readiness Check"
        request_retries: 10
        request_delay: 5
      tags: api

    - name: Get subjects list for validation
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        expected_status: 200
        result_var: subjects_list
        operation_name: "Get Subjects List"
      tags: api

    - name: Verify test schemas exist
      assert:
        that:
          - "'test.user-value' in subjects_list.json"
          - "'automation.workflow-value' in subjects_list.json"
          - "'test.test-value2' in subjects_list.json"
        fail_msg: "Test schemas were not created successfully"
      tags: api

- name: Verify Schema Automation Extensions Loaded (Cluster-wide)
  hosts: schema_registry  # Verify automation extensions on all SR instances
  gather_facts: false
  tasks:
    - name: Verify automation extensions are loaded
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters"
        method: GET
        expected_status: 200
        result_var: automation_extensions_check
        operation_name: "Verify Automation Extensions on {{ inventory_hostname }}"
      tags: automation

- name: Verify Schema Automation Features (Primary Only)
  hosts: schema_registry:!mock-cc-schema-registry  # Only verify active management on primary SR
  gather_facts: false
  tasks:
    - name: Check exporters endpoint accessibility
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters"
        method: GET
        expected_status: 200
        result_var: exporters_list
        operation_name: "Get Exporters List"
      tags: automation

    - name: Check importers endpoint accessibility
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/importers"
        method: GET
        expected_status: 200
        result_var: importers_list
        operation_name: "Get Importers List"
      tags: automation

    - name: Check if test exporter was created
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}"
        method: GET
        expected_status: [200, 404]
        result_var: exporter_check
        operation_name: "Check Test Exporter"
        ignore_errors: true
      when: sr_switch_over_exporter_name is defined
      tags: automation

    - name: Verify exporter configuration if it exists
      block:
        - name: Check exporter status
          import_role:
            name: confluent.platform.common
            tasks_from: schema_registry_operations.yml
          vars:
            request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}/status"
            method: GET
            expected_status: 200
            result_var: exporter_status
            operation_name: "Check Exporter Status"
          
        - name: Verify exporter is in expected state
          assert:
            that:
              - exporter_status.json.state in ['RUNNING', 'PAUSED']
            fail_msg: "Exporter is not in expected state: {{ exporter_status.json.state }}"

        - name: Check exporter configuration
          import_role:
            name: confluent.platform.common
            tasks_from: schema_registry_operations.yml
          vars:
            request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/exporters/{{ sr_switch_over_exporter_name }}/config"
            method: GET
            expected_status: 200
            result_var: exporter_config
            operation_name: "Check Exporter Configuration"
          
        - name: Verify exporter target endpoint
          assert:
            that:
              - exporter_config.json['schema.registry.url'] == unified_stream_manager.schema_registry_endpoint
            fail_msg: "Exporter endpoint mismatch: {{ exporter_config.json['schema.registry.url'] }}"
      when: 
        - exporter_check.status == 200
        - sr_switch_over_exporter_name is defined
      tags: automation

- name: Verify Security Configuration
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Check Schema Registry mode
      import_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/mode"
        method: GET
        expected_status: 200
        result_var: sr_mode_check
        operation_name: "Check Schema Registry Mode"
      tags: security

    - name: Verify Schema Registry is in correct mode
      assert:
        that:
          - sr_mode_check.json.mode in ['IMPORT']
        fail_msg: "Schema Registry is in unexpected mode: {{ sr_mode_check.json.mode }}"
      tags: security
