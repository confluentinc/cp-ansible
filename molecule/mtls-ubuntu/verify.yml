---
### Validates that protocol is set to SSl across all components.

- name: Verify - kafka_controller
  hosts: kafka_controller
  gather_facts: false
  tasks:
    - import_role:
        name: variables
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/controller/server.properties
        property: controller.quorum.voters
        expected_value: "{{ kafka_controller_quorum_voters }}"
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/controller/server.properties
        property: listener.security.protocol.map
        expected_value: CONTROLLER:SSL,BROKER:SSL

- name: Verify - kafka_broker
  hosts: kafka_broker
  gather_facts: false
  tasks:
    - set_fact:
        kraft_mode: "{{ ('kafka_controller' in groups.keys() and groups['kafka_controller'] | length > 0) }}"

    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/kafka/server.properties
        property: listener.security.protocol.map
        expected_value: INTERNAL:SSL,BROKER:SSL
      when: not kraft_mode|bool
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/kafka/server.properties
        property: listener.security.protocol.map
        expected_value: CONTROLLER:SSL,INTERNAL:SSL,BROKER:SSL
      when: kraft_mode|bool

- name: Verify - schema_registry
  hosts: schema_registry
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/schema-registry/schema-registry.properties
        property: kafkastore.security.protocol
        expected_value: SSL

- name: Verify - kafka_connect
  hosts: kafka_connect
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/kafka/connect-distributed.properties
        property: security.protocol
        expected_value: SSL

- name: Verify - kafka_rest
  hosts: kafka_rest
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/kafka-rest/kafka-rest.properties
        property: client.security.protocol
        expected_value: SSL

- name: Verify - ksql
  hosts: ksql
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/ksqldb/ksql-server.properties
        property: security.protocol
        expected_value: SSL

- name: Verify - control_center
  hosts: control_center
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/confluent-control-center/control-center-production.properties
        property: confluent.controlcenter.streams.security.protocol
        expected_value: SSL

- name: Test Jolokia Migration Endpoint Access
  uri:
    url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|default(false)|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port|default(8778)}}/jolokia/read/kafka.controller:type=KafkaController,name=ZkMigrationState"
    validate_certs: false
    return_content: true
    status_code: 200
    force_basic_auth: "{{ item.auth }}"
    url_username: "{{ item.username | default(omit) }}"
    url_password: "{{ item.password | default(omit) }}"
  register: jolokia_auth_results
  failed_when: false
  loop:
    - { name: "no_auth", auth: false }
    - { name: "basic_auth", auth: true, username: "{{ jolokia_user|default('') }}", password: "{{ jolokia_password|default('') }}" }

- name: Check if Either Auth Method Succeeded
  set_fact:
    jolokia_accessible: >-
      {{
        jolokia_auth_results.results | selectattr('status', 'defined') | selectattr('status', 'equalto', 200) | list | length > 0
      }}

- name: Fail if Both Auth Methods Failed
  fail:
    msg: |
      ERROR: Unable to access Jolokia ZkMigrationState endpoint with either authentication method!
      Endpoint: {{ 'https' if kafka_controller_jolokia_ssl_enabled|default(false)|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port|default(8778)}}/jolokia/read/kafka.controller:type=KafkaController,name=ZkMigrationState
      No Auth Result: {{ (jolokia_auth_results.results | selectattr('item.name', 'equalto', 'no_auth') | first).status | default('Connection Failed') }}
      Basic Auth Result: {{ (jolokia_auth_results.results | selectattr('item.name', 'equalto', 'basic_auth') | first).status | default('Connection Failed') }}
      Please check your jolokia_access_control_custom_file_enabled and
      jolokia_access_control_file_src_path configuration.
      Note: This validation tests the actual endpoint required for migration monitoring.
  when: not jolokia_accessible|bool

- name: Success - Jolokia Endpoint is Accessible
  debug:
    msg: |
      SUCCESS: Jolokia ZkMigrationState endpoint is accessible and ready for ZK to KRaft migration!
      Endpoint: {{ 'https' if kafka_controller_jolokia_ssl_enabled|default(false)|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port|default(8778)}}/jolokia/read/kafka.controller:type=KafkaController,name=ZkMigrationState
      No Auth: {{ (jolokia_auth_results.results | selectattr('item.name', 'equalto', 'no_auth') | first).status | default('Failed') }}
      Basic Auth: {{ (jolokia_auth_results.results | selectattr('item.name', 'equalto', 'basic_auth') | first).status | default('Failed') }}
      At least one method succeeded!
  when: jolokia_accessible|bool

- name: Test Jolokia Restricted Endpoint Access (Should be Blocked)
  uri:
    url: "{{ 'https' if kafka_controller_jolokia_ssl_enabled|default(false)|bool else 'http' }}://localhost:{{kafka_controller_jolokia_port|default(8778)}}/jolokia/{{ item.endpoint }}"
    validate_certs: false
    return_content: true
    force_basic_auth: "{{ item.auth }}"
    url_username: "{{ item.username | default(omit) }}"
    url_password: "{{ item.password | default(omit) }}"
  register: jolokia_restricted_results
  failed_when: false
  loop:
    - { name: "list_no_auth", endpoint: "list", auth: false }
    - { name: "list_basic_auth", endpoint: "list", auth: true, username: "{{ jolokia_user|default('') }}", password: "{{ jolokia_password|default('') }}" }
    - { name: "memory_no_auth", endpoint: "read/java.lang:type=Memory", auth: false }
    - { name: "memory_basic_auth", endpoint: "read/java.lang:type=Memory", auth: true, username: "{{ jolokia_user|default('') }}", password: "{{ jolokia_password|default('') }}" }

- name: Check if Restricted Endpoints are Properly Blocked
  set_fact:
    jolokia_access_control_working: >-
      {{
        jolokia_restricted_results.results | selectattr('status', 'defined') | selectattr('status', 'equalto', 403) | list | length > 0
      }}

- name: Verify Access Control is Working - Some Endpoints Blocked
  debug:
    msg: |
      SUCCESS: Jolokia access control is working! Some restricted endpoints are properly blocked.
      Test Results:
      {% for result in jolokia_restricted_results.results %}
      - {{ result.item.name }}: HTTP {{ result.status | default('Connection Failed') }}
      {% endfor %}
      Expected: At least one endpoint should return HTTP 403 (Forbidden)
  when: jolokia_access_control_working|bool

- name: Warning - Access Control May Not Be Working
  debug:
    msg: |
      WARNING: Jolokia access control may not be working as expected!
      None of the restricted endpoints returned HTTP 403 (Forbidden).
      Test Results:
      {% for result in jolokia_restricted_results.results %}
      - {{ result.item.name }}: HTTP {{ result.status | default('Connection Failed') }}
      {% endfor %}
      Please check your jolokia_access_control_custom_file_enabled and jolokia_access_control_file_src_path configuration.
      Note: If all endpoints return HTTP 200, access control might be disabled or misconfigured.
  when: not jolokia_access_control_working|bool
