---
### Installs Confluent Platform Cluster on Oracle Linux 8.
### RBAC enabled.
### Kafka Broker Custom Listener.
### OAuth using keycloak idp on all cp components
### SSO authentication using OIDC in Control center using Okta IdP

driver:
  name: docker
platforms:
  - name: oauth1
    hostname: oauth1.confluent
    groups:
      - oauth_server
    image: quay.io/keycloak/keycloak:latest
    env:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: oauth1
      KC_HTTPS_CERTIFICATE_FILE: /idp-cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /idp-key.pem
      KEYCLOAK_HTTP_PORT: "8080"
      KEYCLOAK_HTTPS_PORT: "8443"
    dockerfile: ../Dockerfile-oauth.j2
    published_ports:
      - "8080:8080"
      - "8443:8443"
    command: start-dev
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller1
    hostname: controller1.confluent
    groups:
      - kafka_controller
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller2
    hostname: controller2.confluent
    groups:
      - kafka_controller
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller3
    hostname: controller3.confluent
    groups:
      - kafka_controller
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center-next-gen
    hostname: control-center-next-gen.confluent
    groups:
      - control_center_next_gen
    image: oraclelinux:8-slim
    dockerfile: ../Dockerfile-rhel-python39.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9022:9022"
    networks:
      - name: confluent
provisioner:
  playbooks:
    converge: ../collections_converge.yml
  inventory:
    group_vars:
      all:
        control_center_next_gen_port: 9022
        control_center_next_gen_dependency_prometheus_basic_auth_enabled: true
        control_center_next_gen_dependency_alertmanager_basic_auth_enabled: true
        sasl_protocol: plain
        kafka_broker_cluster_name: kafka-cluster
        schema_registry_cluster_name: Test-Schema
        kafka_connect_cluster_name: Test-Connect
        ksql_cluster_name: Test-Ksql
        rbac_enabled: true
        rbac_component_additional_system_admins:
          - user1

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        keycloak_oauth_server_port: 8443
        keycloak_http_protocol: https

        oauth_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/oauthcertfile.pem"
        auth_mode: oauth
        oauth_superuser_client_id: superuser
        # oauth_superuser_client_password: my-secret

        client_assertion_enabled: true
        mask_secrets: false

        oauth_sub_claim: client_id
        oauth_groups_claim: groups
        oauth_token_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/token
        oauth_issuer_url: https://oauth1:8443/realms/cp-ansible-realm
        oauth_jwks_uri: https://oauth1:8443/realms/cp-ansible-realm/protocol/openid-connect/certs
        oauth_expected_audience: Confluent,account,api://default

        confluent_common_repository_baseurl: "https://staging-confluent-packages-654654529379-us-west-2.s3.us-west-2.amazonaws.com"
        confluent_package_version: "8.0.0"
        confluent_control_center_next_gen_independent_repository_baseurl: "https://dev-control-center-packages-654654529379-us-west-2.s3.us-west-2.amazonaws.com/confluent-control-center-next-gen/master/99"
        confluent_control_center_next_gen_package_version: "2.2.0-0"
        confluent_control_center_next_gen_full_package_version: "2.2.0-0.1.0"
        confluent_control_center_next_gen_package_redhat_suffix: "-2.2.0-0.1.0"
        confluent_control_center_next_gen_package_debian_suffix: "=2.2.0~0-1"

        ksql_oauth_client_assertion_enabled: true
        ksql_oauth_client_assertion_issuer: ksql
        ksql_oauth_client_assertion_audience: https://oauth1:8443/realms/cp-ansible-realm
        ksql_oauth_client_assertion_private_key_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keycloak-tokenKeypair.pem"
        ksql_oauth_client_assertion_sub: ksql
        ksql_oauth_client_assertion_id: ksql
        ksql_oauth_client_assertion_jti_include: true



        kafka_connect_oauth_client_assertion_enabled: true
        kafka_connect_oauth_client_assertion_issuer: kafka_connect
        kafka_connect_oauth_client_assertion_audience: https://oauth1:8443/realms/cp-ansible-realm
        kafka_connect_oauth_client_assertion_private_key_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/private_key_pkcs8.pem"
        kafka_connect_oauth_client_assertion_sub: kafka_connect
        kafka_connect_oauth_client_assertion_id: kafka_connect
        kafka_connect_oauth_client_assertion_jti_include: true
        kafka_connect_oauth_client_assertion_private_key_passphrase: mypassphrase


        kafka_rest_oauth_client_assertion_enabled: true
        kafka_rest_oauth_client_assertion_issuer: kafka_rest
        kafka_rest_oauth_client_assertion_audience: https://oauth1:8443/realms/cp-ansible-realm
        kafka_rest_oauth_client_assertion_private_key_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/private_key_pkcs8.pem"
        kafka_rest_oauth_client_assertion_sub: kafka_rest
        kafka_rest_oauth_client_assertion_id: kafka_rest
        kafka_rest_oauth_client_assertion_private_key_passphrase: mypassphrase
        kafka_rest_oauth_client_assertion_jti_include: true

        oauth_superuser_client_assertion_enabled: true
        oauth_superuser_client_assertion_file_base_path: "/tmp"

        schema_registry_oauth_client_assertion_enabled: true
        schema_registry_oauth_client_assertion_file_base_path: "/tmp"


        schema_registry_oauth_user: schema_registry

        kafka_rest_oauth_user: kafka_rest

        kafka_connect_oauth_user: kafka_connect

        ksql_oauth_user: ksql

        control_center_next_gen_oauth_user: control_center_next_gen
        control_center_next_gen_oauth_password: my-secret

        kafka_connect_custom_properties:
          plugin.path: "/usr/share/filestream-connectors,/usr/share/java/connect_plugins"

        kafka_connect_connector_white_list: "test_topic"
        kafka_connect_connectors:
          - name: sample-connector-1
            config:
              connector.class: "FileStreamSinkConnector"
              tasks.max: "1"
              file: "/etc/kafka/connect-distributed.properties"
              topics: "test_topic"

        # SSO in C3 vars
        sso_mode: oidc
        sso_groups_claim: groups
        sso_sub_claim: sub
        sso_groups_scope: groups
        sso_issuer_url: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7
        sso_jwks_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/keys
        sso_authorize_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/authorize
        sso_token_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/token
        sso_device_authorization_uri: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/device/authorize
        sso_cli: true
        sso_client_id: ${OKTA_CLIENT:-user}
        sso_client_password: ${OKTA_PASSWORD:-pass}
        sso_idp_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/ssocertfile.pem"
