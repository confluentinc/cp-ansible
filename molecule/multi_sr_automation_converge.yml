---
### Multi-Cluster SR Automation Converge Playbook
### CC first with standard groups, then rename CP groups and deploy CP, then automation

- name: Add Automation Properties to Mock CC Schema Registry
  hosts: schema_registry:&cc_cluster
  gather_facts: true
  tasks:
    - import_role:
        name: variables
    - name: Add automation properties to mock CC Schema Registry
  # Required for bulk API functionality (importers need SchemaCacheManagerResourceExtension)
      lineinfile:
        path: "{{ schema_registry.config_file }}"
        regexp: "^{{ item.property | regex_escape }}="
        line: "{{ item.property }}={{ item.value }}"
        backup: yes
      loop:
        - property: "kafkastore.update.handlers"
          value: "io.confluent.schema.exporter.storage.SchemaExporterUpdateHandler,io.confluent.schema.manager.SchemaCacheManagerUpdateHandler"
        - property: "password.encoder.secret"
          value: "{{ password_encoder_secret }}"
        - property: "schema.registry.resource.extension.class"
          value: "io.confluent.schema.exporter.SchemaExporterResourceExtension,io.confluent.schema.importer.SchemaImporterResourceExtension,io.confluent.dekregistry.DekRegistryResourceExtension,io.confluent.schema.manager.SchemaCacheManagerResourceExtension"
        - property: "dek.registry.update.handlers"
          value: "io.confluent.schema.manager.SchemaCacheManagerDekUpdateHandler"
      register: mock_cc_automation_config

    - name: Restart Mock CC Schema Registry to load automation extensions
      systemd:
        name: confluent-schema-registry
        state: restarted
      when: mock_cc_automation_config.changed

    - name: Wait for Mock CC Schema Registry to be ready after restart
      include_tasks: ../roles/common/tasks/schema_registry_operations.yml
      vars:
        operation_name: "Wait for Mock CC Schema Registry to be ready after restart"
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects"
        method: GET
        expected_status: 200
        result_var: mock_cc_sr_ready_check
        username: "{{ schema_registry_basic_users_final.admin.principal | default(omit) }}"
        password: "{{ schema_registry_basic_users_final.admin.password | default(omit) }}"
        request_retries: 15
        request_delay: 3
        ignore_errors: true
      when: mock_cc_automation_config.changed

- name: Rename Groups After CC Deployment
  hosts: cc_cluster
  gather_facts: false
  tasks:
    - name: "Rename CC Groups to Avoid Conflicts with CP Deployment"
      lineinfile:
        path: "{{inventory_dir}}/ansible_inventory.yml"
        regexp: "{{item}}:"
        line: "{{item}}_cc:"
      delegate_to: 127.0.0.1
      run_once: true
      loop:
        - kafka_controller
        - kafka_broker
        - schema_registry

- name: Rename Groups After CC Deployment
  hosts: all:!cc_cluster
  gather_facts: false
  tasks:
    - name: "Rename CP Groups to Standard Names for Deployment"
      lineinfile:
        path: "{{inventory_dir}}/ansible_inventory.yml"
        regexp: "{{item}}_cp:"
        line: "{{item}}:"
      delegate_to: 127.0.0.1
      run_once: true
      loop:
        - kafka_controller
        - kafka_broker
        - schema_registry

    - name: Refresh Inventory
      meta: refresh_inventory


- name: Setup CP Cluster Second (Automation Platform)
  import_playbook: confluent.platform.all

- name: Setup SR Automation Workflow (CP to CC)
  hosts: schema_registry:!cc_cluster  # CP Schema Registry only (exclude CC SR)
  gather_facts: true
  vars:
    # Common test configuration
    test_scenario: "{{ scenario_name | default('sr_automation') }}"

  tasks:
    - name: Create test schemas for automation workflow
      include_role:
        name: confluent.platform.common
        tasks_from: schema_registry_operations.yml
      vars:
        request_url: "{{ schema_registry_http_protocol }}://{{ inventory_hostname }}:{{ schema_registry_listener_port }}/subjects/{{ item.subject }}/versions"
        method: POST
        expected_status: 200
        result_var: "test_schema_creation_{{ item.subject | replace('.', '_') | replace('-', '_') | replace(':', '_') }}"
        operation_name: "Create Schema {{ item.subject }}"
        request_body_format: json
        request_body:
          schema: "{{ item.schema | to_json }}"
        ignore_errors: true
      loop:
        - subject: "test.user-value"
          schema:
            type: "record"
            name: "User"
            namespace: "test"
            fields:
              - name: "id"
                type: "long"
              - name: "username"
                type: "string"
              - name: "email"
                type: "string"
        - subject: "automation.workflow-value"
          schema:
            type: "record"
            name: "AutomationWorkflow"
            namespace: "automation"
            fields:
              - name: "workflow_id"
                type: "string"
              - name: "step"
                type: "string"
              - name: "timestamp"
                type: "long"
              - name: "status"
                type:
                  type: "enum"
                  name: "Status"
                  symbols: ["STARTED", "RUNNING", "COMPLETED", "FAILED"]
        - subject: ":.test-context:test-workflow-value"
          schema:
            type: "record"
            name: "TestAutomationWorkflow"
            namespace: "automation"
            fields:
              - name: "workflow_id"
                type: "string"
              - name: "step"
                type: "string"
              - name: "timestamp"
                type: "long"
              - name: "status"
                type:
                  type: "enum"
                  name: "Status"
                  symbols: ["STARTED", "RUNNING", "COMPLETED", "FAILED"]
        - subject: ":.test-context2:test-workflow-value"
          schema:
            type: "record"
            name: "Test2AutomationWorkflow"
            namespace: "automation"
            fields:
              - name: "workflow_id"
                type: "string"
              - name: "step"
                type: "string"
              - name: "timestamp"
                type: "long"
              - name: "status"
                type:
                  type: "enum"
                  name: "Status"
                  symbols: ["STARTED", "RUNNING", "COMPLETED", "FAILED"]
      run_once: true
      register: test_schema_creation

- name: Test Schema Registry Automation Workflow
  import_playbook: confluent.platform.primary_sr_switchover_cp_to_cc