---
- name: Verify USM Agent Functionality
  hosts: usm_agent
  gather_facts: true
  vars:
    # USM Agent configuration
    usm_agent_host: "{{ inventory_hostname }}"
    usm_agent_log_file: "/var/log/confluent/usm-agent/usm-agent_access.log"

    # CCloud Mock Service configuration
    ccloud_mock_host: "ccloud-mock-service"
    ccloud_mock_port: 8081
    ccloud_mock_user: "ccloud-user"
    ccloud_mock_password: "ccloud-secret"

  tasks:
    # USM Agent Health Check
    - name: Check USM Agent health
      uri:
        url: "http://{{ usm_agent_host }}:{{ usm_agent_controlplane_port }}/healthz"
        method: GET
        status_code: 200
        timeout: 10
      register: usm_healthz_check
      retries: 5
      delay: 10
      until: usm_healthz_check.status == 200

    # Get baseline events count
    - name: Get baseline events count
      uri:
        url: "http://{{ ccloud_mock_host }}:{{ ccloud_mock_port }}/events_count"
        method: GET
        user: "{{ ccloud_mock_user }}"
        password: "{{ ccloud_mock_password }}"
        force_basic_auth: true
        status_code: 200
        timeout: 10
      register: baseline_events_count

    # Check USM Agent logs
    - name: Check USM Agent access logs
      stat:
        path: "{{ usm_agent_log_file }}"
      register: log_file_stat

    - name: Search for v1/events endpoint in logs (204)
      shell: "grep -c 'POST.*v1/events.*204' {{ usm_agent_log_file }} || true"
      register: events_grep_result
      when: log_file_stat.stat.exists

    - name: Search for v1/metrics endpoint in logs (200)
      shell: "grep -c 'POST.*v1/metrics.*200' {{ usm_agent_log_file }} || true"
      register: metrics_grep_result
      when: log_file_stat.stat.exists

    - name: Set events endpoint found fact
      set_fact:
        events_endpoint_found: "{{ (events_grep_result.stdout | int) > 0 }}"
      when: log_file_stat.stat.exists

    - name: Set metrics endpoint found fact
      set_fact:
        metrics_endpoint_found: "{{ (metrics_grep_result.stdout | int) > 0 }}"
      when: log_file_stat.stat.exists

    # Verification assertions
    - name: Assert USM Agent log file exists
      assert:
        that:
          - log_file_stat.stat.exists
        fail_msg: "USM Agent access log file does not exist at {{ usm_agent_log_file }}"

    - name: Assert v1/events endpoint is working
      assert:
        that:
          - events_endpoint_found | default(false)
        fail_msg: "USM Agent v1/events endpoint not found in logs or not returning 204 status"
      when: log_file_stat.stat.exists

    - name: Assert v1/metrics endpoint is working
      assert:
        that:
          - metrics_endpoint_found | default(false)
        fail_msg: "USM Agent v1/metrics endpoint not found in logs or not returning 200 status"
      when: log_file_stat.stat.exists
