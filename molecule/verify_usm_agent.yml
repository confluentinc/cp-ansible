---
- name: Verify USM Agent Functionality
  hosts: usm_agent
  gather_facts: true
  vars:
    # USM Agent configuration
    usm_agent_port: 9999
    usm_agent_host: "{{ inventory_hostname }}"
    usm_agent_log_file: "/var/log/confluent/usm-agent/usm-agent_access.log"

    # CCloud Mock Service configuration
    ccloud_mock_host: "ccloud-mock-service"
    ccloud_mock_port: 8081
    ccloud_mock_user: "ccloud-user"
    ccloud_mock_password: "ccloud-secret"

    # Test configuration
    test_topic_name: "usm-test-topic-{{ ansible_date_time.epoch }}"
    test_connector_name: "usm-test-connector-{{ ansible_date_time.epoch }}"

  tasks:
    # USM Agent Health Check
    - name: Check USM Agent health
      uri:
        url: "http://{{ usm_agent_host }}:{{ usm_agent_port }}/healthz"
        method: GET
        status_code: 200
        timeout: 10
      register: usm_healthz_check
      retries: 5
      delay: 10
      until: usm_healthz_check.status == 200

    # Get baseline events count
    - name: Get baseline events count
      uri:
        url: "http://{{ ccloud_mock_host }}:{{ ccloud_mock_port }}/events_count"
        method: GET
        user: "{{ ccloud_mock_user }}"
        password: "{{ ccloud_mock_password }}"
        force_basic_auth: true
        status_code: 200
      register: baseline_events_count

    # Check USM Agent logs
    - name: Check USM Agent access logs
      stat:
        path: "{{ usm_agent_log_file }}"
      register: log_file_stat

    - name: Read recent USM Agent logs
      shell: "tail -n 100 {{ usm_agent_log_file }}"
      register: usm_agent_logs
      when: log_file_stat.stat.exists

    - name: Verify v1/events endpoint in logs (204)
      set_fact:
        events_endpoint_found: "{{ usm_agent_logs.stdout | regex_search('POST.*v1/events.*204') is not none }}"
      when: log_file_stat.stat.exists

    - name: Verify v1/metrics endpoint in logs (200)
      set_fact:
        metrics_endpoint_found: "{{ usm_agent_logs.stdout | regex_search('POST.*v1/metrics.*200') is not none }}"
      when: log_file_stat.stat.exists

    # - name: Create Kafka topic
    #   shell: |
    #     kafka-topics --create --topic {{ test_topic_name }} \
    #       --bootstrap-server kafka-broker1:9092 --command-config /etc/kafka/client_scram.properties \
    #       --replication-factor 1 --partitions 3
    #   run_once: true
    #   delegate_to: kafka-broker1
    #   register: topic_creation
    #   failed_when: topic_creation.rc != 0 and 'already exists' not in topic_creation.stderr

    # - name: Wait for USM Agent to process topic creation
    #   pause:
    #     seconds: 10

    # - name: Get events count after topic creation
    #   uri:
    #     url: "http://{{ ccloud_mock_host }}:{{ ccloud_mock_port }}/events_count"
    #     method: GET
    #     user: "{{ ccloud_mock_user }}"
    #     password: "{{ ccloud_mock_password }}"
    #     force_basic_auth: true
    #     status_code: 200
    #   register: post_topic_events_count

    # - name: Verify events count increased after topic creation
    #   assert:
    #     that:
    #       - post_topic_events_count.json.events_count > baseline_events_count.json.events_count

    # - name: Download datagen connector
    #   shell: |
    #     confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:latest
    #   run_once: true
    #   delegate_to: kafka-connect1
    #   register: datagen_install
    #   ignore_errors: true

    # - name: Restart Kafka Connect service to load new plugins
    #   systemd:
    #     name: confluent-kafka-connect
    #     state: restarted
    #   delegate_to: kafka-connect1
    #   when: datagen_install.rc == 0

    # - name: Wait for Kafka Connect to be ready after restart
    #   uri:
    #     url: "http://kafka-connect1:8083/"
    #     method: GET
    #     status_code: 200
    #   register: connect_ready
    #   retries: 12
    #   delay: 10
    #   until: connect_ready.status == 200

    # - name: Verify datagen connector plugin is available
    #   uri:
    #     url: "http://kafka-connect1:8083/connector-plugins"
    #     method: GET
    #     status_code: 200
    #   register: available_plugins

    # - name: Debug available connector plugins
    #   debug:
    #     msg: "Available connectors: {{ available_plugins.json | map(attribute='class') | list }}"

    # - name: Check if datagen connector is available
    #   set_fact:
    #     datagen_available: "{{ 'io.confluent.kafka.connect.datagen.DatagenConnector' in (available_plugins.json | map(attribute='class') | list) }}"

    # - name: Create datagen connector
    #   uri:
    #     url: "http://kafka-connect1:8083/connectors"
    #     method: POST
    #     body_format: json
    #     body:
    #       name: "{{ test_connector_name }}"
    #       config:
    #         connector.class: "io.confluent.kafka.connect.datagen.DatagenConnector"
    #         tasks.max: "1"
    #         kafka.topic: "{{ test_topic_name }}"
    #         quickstart: "users"
    #         max.interval: "1000"
    #         iterations: "10"
    #     status_code: [201, 409]
    #   register: connector_creation
    #   when: datagen_available | bool

    # - name: Skip connector creation if datagen is not available
    #   debug:
    #     msg: "Skipping connector creation - datagen plugin not found. Available plugins: {{ available_plugins.json | map(attribute='class') | list }}"
    #   when: not (datagen_available | bool)

    # - name: Wait for USM Agent to process connector creation
    #   pause:
    #     seconds: 10

    # - name: Get events count after connector creation
    #   uri:
    #     url: "http://{{ ccloud_mock_host }}:{{ ccloud_mock_port }}/events_count"
    #     method: GET
    #     user: "{{ ccloud_mock_user }}"
    #     password: "{{ ccloud_mock_password }}"
    #     force_basic_auth: true
    #     status_code: 200
    #   register: post_connector_events_count
    #   when: datagen_available | bool and connector_creation is succeeded

    # - name: Verify events count increased after connector creation
    #   assert:
    #     that:
    #       - post_connector_events_count.json.events_count > post_topic_events_count.json.events_count
    #   when: datagen_available | bool and connector_creation is succeeded
