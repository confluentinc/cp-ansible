---
### Installation of Confluent Platform on RHEL8.
### TLS enabled.
### Customer keystore alias.

driver:
  name: docker
platforms:
  - name: controller1
    hostname: controller1.confluent
    groups:
      - kafka_controller
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: controller2
    hostname: controller2.confluent
    groups:
      - kafka_controller
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center-next-gen
    hostname: control-center-next-gen.confluent
    groups:
      - control_center_next_gen
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9022:9022"
    networks:
      - name: confluent
  - name: usm-agent1
    hostname: usm-agent1.confluent
    groups:
      - usm_agent
    image: redhat/ubi9-minimal
    dockerfile: ../Dockerfile-rhel-java17.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ccloud-mock-service
    hostname: ccloud-mock-service.confluent
    groups:
      - ccloud_mock
    image: usmagent-mock-ccloud:latest
    pre_build_image: true
    command: ""
    published_ports:
      - "8081:8081"
    networks:
      - name: confluent
    env:
      MOCK_SERVER_HOST: "0.0.0.0"
      MOCK_SERVER_PORT: "8081"
      MOCK_SERVER_USE_TLS: "false"
      MOCK_SERVER_REQUIRE_BASIC_AUTH: "true"
      MOCK_SERVER_USERNAME: "ccloud-user"
      MOCK_SERVER_PASSWORD: "ccloud-secret"
      MOCK_SERVER_REQUIRE_MTLS: "false"
provisioner:
  playbooks:
    converge: ../collections_converge.yml
  inventory:
    host_vars:
      ccloud-mock-service:
        ansible_connection: local
        gather_facts: false
      usm-agent1:
        usm_agent_custom_properties:
          confluent.usm-agent.ccloud.ssl.enabled: "false"
        usm_agent_health_check_enabled: false
    group_vars:
      all:
        scenario_name: provided-rhel
        ssl_enabled: true
        control_center_next_gen_port: 9022
        control_center_next_gen_dependency_prometheus_ssl_enabled: true
        control_center_next_gen_dependency_prometheus_basic_auth_enabled: true
        control_center_next_gen_dependency_alertmanager_ssl_enabled: true
        control_center_next_gen_dependency_alertmanager_basic_auth_enabled: true

        # Variable to have prepare playbook add extra cert to
        molecule_add_extra_cert: true
        molecule_certs_format: jks

        ssl_provided_keystore_and_truststore: true
        ssl_keystore_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}.keystore.jks"
        ssl_keystore_key_password: keystorepass
        ssl_keystore_store_password: keystorepass
        ssl_truststore_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/truststore.jks"
        ssl_truststore_password: truststorepass
        ssl_truststore_ca_cert_alias: CARoot

        # USM Agent Configuration - CCloud Mock Server
        ccloud_endpoint: http://ccloud-mock-service:8081
        ccloud_environment_id: env-mock-123
        ccloud_credential:
          username: ccloud-user
          password: ccloud-secret

        # USM Agent Authentication Configuration - BASIC AUTHENTICATION
        usm_agent_basic_auth_enabled: true
        usm_agent_ssl_enabled: true
        usm_agent_ssl_mutual_auth_enabled: false
        # USM Agent Basic Users Configuration
        usm_agent_basic_users:
          admin:
            principal: admin
            password: admin-secret
          user1:
            principal: user1
            password: user1-secret
          user2:
            principal: user2
            password: user2-secret

        # Client credentials for USM Agent (required for basic auth)
        usm_agent_client_username: "user1"
        usm_agent_client_password: "user1-secret"

      kafka_controller:
        ssl_keystore_alias: "kafka_controller.{{inventory_hostname}}"

      kafka_broker:
        ssl_keystore_alias: "kafka_broker.{{inventory_hostname}}"

      schema_registry:
        ssl_keystore_alias: "schema_registry.{{inventory_hostname}}"

      kafka_connect:
        ssl_keystore_alias: "kafka_connect.{{inventory_hostname}}"

      kafka_rest:
        ssl_keystore_alias: "kafka_rest.{{inventory_hostname}}"

      ksql:
        ssl_keystore_alias: "ksql.{{inventory_hostname}}"

      control_center_next_gen:
        ssl_keystore_alias: "control_center_next_gen.{{inventory_hostname}}"

      usm_agent:
        ssl_keystore_alias: "usm_agent.{{inventory_hostname}}"
