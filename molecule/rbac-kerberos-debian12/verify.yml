---
### Validates that protocol set to GSSAPI.
### Validates that a regular user cannot access topics.
### Validates that a super user can access topics.
### Validates that all components are pointing to the MDS for authorization.

- name: Verify - kafka_controller
  hosts: kafka_controller
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/controller/server.properties
        property: listener.name.controller.sasl.enabled.mechanisms
        expected_value: GSSAPI

- name: Verify - kafka_broker
  hosts: kafka_broker
  gather_facts: false
  tasks:
    - import_role:
        name: confluent.test
        tasks_from: check_property.yml
      vars:
        file_path: /etc/kafka/server.properties
        property: listener.name.broker.sasl.enabled.mechanisms
        expected_value: GSSAPI

    - name: Get Kafka Cluster ID from Embedded Rest Proxy
      uri:
        url: "http://{{ inventory_hostname }}:8090/kafka/v3/clusters"
        method: GET
        validate_certs: false
        body_format: json
        return_content: true
        status_code: 200
        url_username: mds
        url_password: password
        force_basic_auth: true
      register: cluster_id_query

    - name: Parse Kafka Cluster ID from json query
      set_fact:
        kafka_cluster_id: "{{ cluster_id_query.json.data[0].cluster_id }}"

    - name: Get Topics as Regular LDAP User
      uri:
        url: "http://{{ inventory_hostname }}:8090/kafka/v3/clusters/{{kafka_cluster_id}}/topics"
        method: GET
        validate_certs: false
        body_format: json
        return_content: true
        status_code: 200
        url_username: kafka_broker
        url_password: password
        force_basic_auth: true
      register: topics_request

    - name: Assert property set as expected
      assert:
        that:
          - topics_request.json.data | length == 0
        fail_msg: "Regular user should not be able to see any topics"
        quiet: true

    - name: Get Topics as MDS Super User
      uri:
        url: "http://{{ inventory_hostname }}:8090/kafka/v3/clusters/{{kafka_cluster_id}}/topics"
        method: GET
        validate_certs: false
        body_format: json
        return_content: true
        status_code: 200
        url_username: mds
        url_password: password
        force_basic_auth: true
      register: topics_request

    - name: Assert property set as expected
      assert:
        that:
          - topics_request.json.data | length > 0
        fail_msg: "MDS Super User should be able to view many topics"
        quiet: true

- name: Verify - schema_registry
  hosts: schema_registry
  gather_facts: false
  tasks:
    - name: Check mds is http
      shell: |
        grep -Fq "confluent.metadata.bootstrap.server.urls=http://kafka-broker" /etc/schema-registry/schema-registry.properties
      register: linecheck
      check_mode: false
      changed_when: false
      failed_when: linecheck.rc != 0

- name: Verify - kafka_connect
  hosts: kafka_connect
  gather_facts: false
  tasks:
    - name: Check mds is http
      shell: |
        grep -Fq "confluent.metadata.bootstrap.server.urls=http://kafka-broker" /etc/kafka/connect-distributed.properties
      register: linecheck
      check_mode: false
      changed_when: false
      failed_when: linecheck.rc != 0

- name: Verify - kafka_rest
  hosts: kafka_rest
  gather_facts: false
  tasks:
    - name: Check mds is http
      shell: |
        grep -Fq "confluent.metadata.bootstrap.server.urls=http://kafka-broker" /etc/kafka-rest/kafka-rest.properties
      register: linecheck
      check_mode: false
      changed_when: false
      failed_when: linecheck.rc != 0

- name: Verify - ksql
  hosts: ksql
  gather_facts: false
  tasks:
    - name: Check mds is http
      shell: |
        grep -Fq "confluent.metadata.bootstrap.server.urls=http://kafka-broker" /etc/ksqldb/ksql-server.properties
      register: linecheck
      check_mode: false
      changed_when: false
      failed_when: linecheck.rc != 0

- name: Verify - control_center_next_gen
  hosts: control_center_next_gen
  gather_facts: false
  tasks:
    - name: Check mds is http
      shell: |
        grep -Fq "confluent.metadata.bootstrap.server.urls=http://kafka-broker" /etc/confluent-control-center/control-center-production.properties
      register: linecheck
      check_mode: false
      changed_when: false
      failed_when: linecheck.rc != 0

- name: Verify logredactor
  hosts: kafka_connect:kafka_controller:kafka_broker:schema_registry:ksql:kafka_rest:control_center_next_gen
  gather_facts: false
  tasks:
    - import_role:
        name: variables

    - name: Create a mapping of component and log file
      set_fact:
        component_log_file_mapping:
          kafka-connect: "{{kafka_connect_log_dir}}/connect.log"
          controller: "{{kafka_controller_log_dir}}/server.log"
          kafka-broker: "{{kafka_broker_log_dir}}/server.log"
          schema-registry: "{{schema_registry_log_dir}}/schema-registry.log"
          ksql: "{{ksql_log_dir}}/ksql.log"
          kafka-rest: "{{kafka_rest_log_dir}}/kafka-rest.log"
          control-center-next-gen: "{{control_center_next_gen_log_dir}}/control-center.log"

    - name: Parse out the component name
      set_fact:
        component: "{% if inventory_hostname == 'control-center-next-gen' %}{{inventory_hostname}}{% else %}{{inventory_hostname[:-1]}}{% endif %}"

    - name: Confirm presence of redacted word in log file
      shell: |
        grep -m 1 "<he-who-must-not-be-named>" {{component_log_file_mapping[component]}}
      register: output
      failed_when: (output.rc == 1) or (output.rc == 2)

- name: Verify - USM Agent Functionality
  import_playbook: ../verify_usm_agent.yml
