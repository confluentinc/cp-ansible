---
### Installation of Confluent Platform on Ubuntu2204.
### RBAC Enabled.
### Customer RBAC system admins.
### Kerberos enabled on Cluster1(mds).
### MTLS Customer certs enabled on cluster2.
### Replicator Configured with Kerberos and MTLS.

driver:
  name: docker
platforms:
  - name: mds-ldap1
    hostname: mds-ldap1.confluent
    groups:
      - ldap_server
    image: centos:centos8
    dockerfile: ../Dockerfile-centos8-base.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-${KRAFT_CONTROLLER:-zookeeper}1
    hostname: mds-${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - mds
    image: geerlingguy/docker-ubuntu2204-ansible
    dockerfile: ../Dockerfile-ubuntu-java11.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker1
    hostname: mds-kafka-broker1.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-ubuntu2204-ansible
    dockerfile: ../Dockerfile-ubuntu-java11.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}2
      - cluster2
    image: geerlingguy/docker-ubuntu2204-ansible
    dockerfile: ../Dockerfile-ubuntu-java11.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-ubuntu2204-ansible
    dockerfile: ../Dockerfile-ubuntu-java11.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-ubuntu2204-ansible
    dockerfile: ../Dockerfile-ubuntu-java11.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-ubuntu2204-ansible
    dockerfile: ../Dockerfile-ubuntu-java11.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect-replicator1
    hostname: kafka_connect_replicator1.confluent
    groups:
      - kafka_connect_replicator2
      - cluster2
    image: geerlingguy/docker-ubuntu2204-ansible
    dockerfile: ../Dockerfile-ubuntu-java11.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
provisioner:
  playbooks:
    converge: converge.yml
  inventory:
    group_vars:
      # Shared properties among mds cluster and cluster2 groups (as well as kerberos and ldap)
      all:
        scenario_name: rbac-kafka-connect-replicator-kerberos-mtls-custom-ubuntu2004
        ubuntu_java_package_name: openjdk-11-jdk

        mask_secrets: false
        rbac_enabled: true
        ssl_mutual_auth_enabled: true
        ssl_enabled: true
        ssl_client_authentication: required
        ssl_custom_certs: true

        create_mds_certs: false
        token_services_public_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/public.pem"
        token_services_private_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/tokenKeypair.pem"

        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        kafka_broker_custom_properties:
          confluent.metadata.server.auth.ssl.principal.mapping.rules: "RULE:.*CN=([a-zA-Z0-9.-_]*).*$$/$$1/,DEFAULT"
          listener.name.internal.ssl.principal.mapping.rules: "RULE:.*CN=([a-zA-Z0-9.-_]*).*$$/$$1/,DEFAULT"
          listener.name.client.ssl.principal.mapping.rules: "RULE:.*CN=([a-zA-Z0-9.-_]*).*$$/$$1/,DEFAULT"
          super.users: User:kafka_broker;User:mds;User:C=US,ST=Ca,L=PaloAlto,O=CONFLUENT,OU=TEST,CN=kafka_broker
          ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
          ldap.com.sun.jndi.ldap.read.timeout: 3000
          ldap.java.naming.provider.url: ldap://mds-ldap1:389
          ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
          ldap.java.naming.security.credentials: password
          ldap.java.naming.security.authentication: simple
          ldap.user.search.base: OU=rbac,DC=example,DC=com
          ldap.group.search.base: OU=rbac,DC=example,DC=com
          ldap.user.name.attribute: uid
          ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.group.name.attribute: cn
          ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.user.object.class: account

        kafka_connect_replicator_custom_properties:
          ssl.principal.mapping.rules: "RULE:.*CN=([a-zA-Z0-9.-_]*).*$$/$$1/,DEFAULT"

        mds_super_user: mds
        mds_super_user_password: password

        kafka_broker_ldap_user: kafka_broker
        kafka_broker_ldap_password: password

        kafka_controller_ldap_user: kafka_controller
        kafka_controller_ldap_password: password

        kafka_connect_replicator_ldap_user: replicator
        kafka_connect_replicator_ldap_password: password

        rbac_component_additional_system_admins:
          - user1
          - User:user2

      mds:

        kafka_broker_cluster_name: mds
        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass

      cluster2:

        kafka_broker_cluster_name: destination_cluster

        ssl_custom_certs: true
        ssl_ca_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        ssl_signed_cert_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        ssl_key_filepath: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        ssl_key_password: keypass

        external_mds_enabled: true
        mds_broker_bootstrap_servers: mds-kafka-broker1:9093
        mds_bootstrap_server_urls: https://mds-kafka-broker1:8090
        mds_broker_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: none

      kafka_connect_replicator:

        kafka_connect_replicator_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: oauth

        ssl_custom_certs: true
        kafka_connect_replicator_cluster_name: replicator
        kafka_connect_replicator_white_list: test-replicator-source
        kafka_connect_replicator_bootstrap_servers: kafka-broker1:9092
        kafka_connect_replicator_ssl_ca_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        kafka_connect_replicator_ssl_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        kafka_connect_replicator_ssl_key_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        kafka_connect_replicator_ssl_key_password: keypass
        kafka_connect_replicator_truststore_storepass: confluenttruststorepass
        kafka_connect_replicator_keystore_storepass: confluentkeystorestorepass

        kafka_connect_replicator_rbac_enabled: true
        kafka_connect_replicator_erp_tls_enabled: false
        kafka_connect_replicator_erp_host: https://mds-kafka-broker1:8090
        kafka_connect_replicator_erp_admin_user: mds
        kafka_connect_replicator_erp_admin_password: password
        # kafka_connect_replicator_kafka_cluster_id: destination_cluster
        kafka_connect_replicator_kafka_cluster_name: destination_cluster
        kafka_connect_replicator_erp_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/public.pem"

        kafka_connect_replicator_consumer_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: oauth

        kafka_connect_replicator_consumer_bootstrap_servers: mds-kafka-broker1:9092
        kafka_connect_replicator_consumer_custom_properties:
          client.id: consumer-test

        kafka_connect_replicator_consumer_rbac_enabled: true
        kafka_connect_replicator_consumer_erp_tls_enabled: false
        kafka_connect_replicator_consumer_erp_host: https://mds-kafka-broker1:8090
        kafka_connect_replicator_consumer_erp_admin_user: mds
        kafka_connect_replicator_consumer_erp_admin_password: password
        # kafka_connect_replicator_consumer_kafka_cluster_id: mds
        kafka_connect_replicator_consumer_kafka_cluster_name: mds
        kafka_connect_replicator_consumer_erp_pem_file: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/public.pem"

        kafka_connect_replicator_producer_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: oauth

        kafka_connect_replicator_producer_bootstrap_servers: kafka-broker1:9092
        kafka_connect_replicator_producer_ssl_ca_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/ca.crt"
        kafka_connect_replicator_producer_ssl_cert_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        kafka_connect_replicator_producer_ssl_key_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        kafka_connect_replicator_producer_ssl_key_password: keypass
        kafka_connect_replicator_producer_custom_properties:
          client.id: producer-test

        kafka_connect_replicator_monitoring_interceptor_listener:
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: oauth

        kafka_connect_replicator_monitoring_interceptor_bootstrap_servers: kafka-broker1:9092

      ldap_server:
        ldaps_enabled: false
        ldaps_custom_certs: false

        ldap_admin_password: ldppassword

        ldap_rbac_group: rbac
        ldap_dc: example
        ldap_dc_extension: com

        ldap_users:
          - username: "{{kafka_broker_ldap_user}}"
            password: "{{kafka_broker_ldap_password}}"
            uid: 9999
            guid: 99
          - username: "{{mds_super_user}}"
            password: "{{mds_super_user_password}}"
            uid: 9993
            guid: 93
          - username: user1
            password: user1p
            uid: 9992
            guid: 92
          - username: "{{kafka_connect_replicator_ldap_user}}"
            password: "{{kafka_connect_replicator_ldap_password}}"
            uid: 9991
            guid: 91
          - username: "{{kafka_controller_ldap_user}}"
            password: "{{kafka_controller_ldap_password}}"
            uid: 9990
            guid: 90


        realm_name: "{{ kerberos.realm | upper }}"

        keytab_output_directory: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/keytabs"

        kerberos_principals:
          - principal: "zookeeper/mds-zookeeper1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/zookeeper-mds-zookeeper1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/mds-controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-mds-controller1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/mds-kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-mds-kafka-broker1.keytab"
          - principal: "zookeeper/zookeeper1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/zookeeper-zookeeper1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/controller1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_controller-controller1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker1.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker1.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker2.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker2.keytab"
          - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker3.confluent@{{kerberos.realm | upper}}"
            keytab_path: "keytabs/kafka_broker-kafka-broker3.keytab"
